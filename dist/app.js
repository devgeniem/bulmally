!function(t){function e(e){for(var a,s,l=e[0],r=e[1],d=e[2],u=0,h=[];u<l.length;u++)s=l[u],Object.prototype.hasOwnProperty.call(o,s)&&o[s]&&h.push(o[s][0]),o[s]=0;for(a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);for(c&&c(e);h.length;)h.shift()();return i.push.apply(i,d||[]),n()}function n(){for(var t,e=0;e<i.length;e++){for(var n=i[e],a=!0,l=1;l<n.length;l++){var r=n[l];0!==o[r]&&(a=!1)}a&&(i.splice(e--,1),t=s(s.s=n[0]))}return t}var a={},o={0:0},i=[];function s(e){if(a[e])return a[e].exports;var n=a[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=a,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)s.d(n,a,function(e){return t[e]}.bind(null,a));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="";var l=window.webpackJsonp=window.webpackJsonp||[],r=l.push.bind(l);l.push=e,l=l.slice();for(var d=0;d<l.length;d++)e(l[d]);var c=r;i.push([3,1]),n()}([,,,function(t,e,n){t.exports=n(11)},function(t,e,n){},function(t,e){t.exports='<h2 id="component-documentation">Component documentation</h2>\n<p><em>Add component specific documentation here.</em></p>\n<h3 id="html">HTML</h3>\n<p><em>Document HTML  markup here and add the code block for easy copy-pasting.</em></p>\n<pre><code>&lt;button class=&quot;button button--boilerplate&quot;&gt;Boilerplate&lt;/button&gt;</code></pre><h3 id="javascript">JavaScript</h3>\n<p><em>Document JavaScript markup here and add the code block for easy copy-pasting.</em></p>\n<pre><code>const something = 123;</code></pre><h3 id="scss">SCSS</h3>\n<p><em>Document SCSS markup here and add the code block for easy copy-pasting.</em></p>\n<pre><code>.button--boilerplate {\n    background-color: #000;\n}</code></pre>'},function(t,e){t.exports='<h2 id="navbar-component">Navbar component</h2>\n<p>This component provides a fully functional navbar implementation for the Bulma navbar component.</p>\n<h3 id="html">HTML</h3>\n<p>The Bulmally navbar follows the Bulma navbar markup with some exceptions. Hoverable dropdowns are not accessible, that is why we do not support them. Instead, we provide an accessible markup for controlling a dropdown menu within the navbar.</p>\n<p>The Bulma documentation uses a link as the dropdown toggler. This is bad practice, it should be a button. Bulmally dropdown toggler can be an actual link itself. This is done by adding a container that holds the link and a button for toggling the dropdown menu. This makes the link accessible and uses semantic HTML element for the toggler: a button. The button has a screen reader only text and a down arrow for sighted usage.</p>\n<pre><code>&lt;nav class=&quot;navbar bulmally-navbar&quot; role=&quot;navigation&quot; aria-label=&quot;main navigation&quot;&gt;\n    &lt;div class=&quot;navbar-brand&quot;&gt;\n        &lt;a class=&quot;navbar-item&quot; href=&quot;#&quot;&gt;\n            &lt;span class=&quot;is-sr-only&quot;&gt;Home&lt;/span&gt;\n            &lt;img src=&quot;https://bulma.io/images/bulma-logo.png&quot; width=&quot;112&quot; height=&quot;28&quot; aria-hidden=true&gt;\n        &lt;/a&gt;\n\n        &lt;button\n            id=&quot;js-navbar-burger&quot;\n            class=&quot;navbar-burger burger&quot;\n            aria-expanded=&quot;false&quot;\n            aria-label=&quot;Open menu&quot;\n            aria-expanded=&quot;false&quot;\n            aria-controls=&quot;js-menu&quot;&gt;\n            &lt;span aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n            &lt;span aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n            &lt;span aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n        &lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=&quot;js-navbar-menu&quot; class=&quot;navbar-menu&quot;&gt;\n        &lt;div class=&quot;navbar-start&quot;&gt;\n            &lt;a class=&quot;navbar-item&quot;&gt;\n                Home\n            &lt;/a&gt;\n\n            &lt;a class=&quot;navbar-item&quot;&gt;\n                Documentation\n            &lt;/a&gt;\n\n            &lt;div class=&quot;navbar-item has-dropdown level&quot;&gt;\n                &lt;div class=&quot;navbar-dropdown-control&quot;&gt;\n                    &lt;!-- The link is clickable. --&gt;\n                    &lt;a class=&quot;navbar-link is-arrowless&quot; href=&quot;#&quot;&gt;\n                        More\n                    &lt;/a&gt;\n                    &lt;!-- This button implements the dropdown toggler. --&gt;\n                    &lt;button class=&quot;dropdown-toggler icon&quot; aria-expanded=false aria-controls=&quot;js-navbar-dropdown-1&quot;&gt;\n                        &lt;span class=&quot;is-sr-only&quot;&gt;Open menu&lt;/span&gt;\n                        &lt;i class=&quot;arrow&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n                    &lt;/button&gt;\n                &lt;/div&gt;\n\n                &lt;!--\n                    Bulma does not hide dropdown menu on touch.\n                    We hide it here with the modifier class.\n                    Toggling is handled with JS.\n                --&gt;\n                &lt;div class=&quot;navbar-dropdown is-hidden-touch&quot; id=&quot;js-navbar-dropdown-1&quot;&gt;\n                    &lt;a class=&quot;navbar-item&quot;&gt;\n                        About\n                    &lt;/a&gt;\n                    &lt;a class=&quot;navbar-item&quot;&gt;\n                        Jobs\n                    &lt;/a&gt;\n                    &lt;a class=&quot;navbar-item&quot;&gt;\n                        Contact\n                    &lt;/a&gt;\n                    &lt;hr class=&quot;navbar-divider&quot;&gt;\n                    &lt;a class=&quot;navbar-item&quot;&gt;\n                        Report an issue\n                    &lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=&quot;navbar-end&quot;&gt;\n            &lt;div class=&quot;navbar-item&quot;&gt;\n                &lt;div class=&quot;buttons&quot;&gt;\n                    &lt;a class=&quot;button is-primary&quot;&gt;\n                        &lt;strong&gt;Sign up&lt;/strong&gt;\n                    &lt;/a&gt;\n                    &lt;a class=&quot;button is-light&quot;&gt;\n                        Log in\n                    &lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;</code></pre><h3 id="javascript">JavaScript</h3>\n<p>This JS implementation is written in ES6 and uses VanillaJS to control the states in the DOM. You may use it as it is and use <a href="https://babeljs.io/">Babel</a> to make it backwards compatible with older browsers. If you do not have Babel in your environment, it should be pretty straightforward to copy the required parts of this code.</p>\n<pre><code>/**\n * Class Navbar\n */\nexport default class Navbar {\n    /**\n     * This method is run automatically when the module is imported,\n     * because it exports a new instance of itself.\n     */\n    constructor() {\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.docReady();\n            }\n        );\n    }\n\n    /**\n     * Cache dom elements for use in the class&#39;s methods\n     */\n    cache() {\n        this.navbarBurger = document.getElementById( &#39;js-navbar-burger&#39; );\n        this.navbarMenu = document.getElementById( &#39;js-navbar-menu&#39; );\n        if ( this.navbarMenu ) {\n            this.dropdownTogglers = this.navbarMenu.querySelectorAll( &#39;.dropdown-toggler&#39; );\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    events() {\n        if ( this.navbarBurger ) {\n            this.navbarBurger.addEventListener( &#39;click&#39;, () =&gt; this.toggleMenu() );\n        }\n\n        if ( this.dropdownTogglers ) {\n            for ( let i = 0; i &lt; this.dropdownTogglers.length; i++ ) {\n                this.dropdownTogglers[ i ].addEventListener( &#39;click&#39;, ( event ) =&gt; this.toggleDropdown( event ) );\n            }\n        }\n    }\n\n    /**\n     * Handle menu toggling when the navbar burger is clicked.\n     */\n    toggleMenu() {\n        this.navbarBurger.classList.toggle( &#39;is-active&#39; );\n        this.navbarMenu.classList.toggle( &#39;is-active&#39; );\n        this.toggleAriaExpanded( this.navbarBurger );\n    }\n\n    /**\n     * Toggles a dropdown menu visibility.\n     *\n     * @param {Event} event A click event.\n     */\n    toggleDropdown( event ) {\n        const target = event.target;\n        const containerId = target.getAttribute( &#39;aria-controls&#39; );\n        const dropdownMenu = this.navbarMenu.querySelector( `#${ containerId }` );\n\n        this.toggleAriaExpanded( target );\n        dropdownMenu.classList.toggle( &#39;is-hidden-touch&#39; );\n        this.toggleAncestorActiveState( target, &#39;has-dropdown&#39; );\n    }\n\n    /**\n     * Set the &#39;is-active&#39; state for an ancestor of an element\n     * with the matching class name.\n     *\n     * @param {HTMLElement} child A child element to start the search from.\n     * @param {HTMLElement} className A target class name for the ancestor.\n     */\n    toggleAncestorActiveState( child, className ) {\n        let ancestor = child.parentNode;\n        while ( ancestor ) {\n            if ( ancestor.classList.contains( className ) ) {\n                ancestor.classList.toggle( &#39;is-active&#39; );\n                return;\n            }\n            ancestor = ancestor.parentNode ? ancestor.parentNode : false;\n        }\n    }\n\n    /**\n     * Get the toggler&#39;s aria-expanded current state and set a new opposite state to it.\n     * Also set the opened container&#39;s aria-hidden state to the new value&#39;s opposite.\n     *\n     * @param {HTMLElement} toggler The toggler element.\n     */\n    toggleAriaExpanded( toggler ) {\n        const ariaExpandedState = toggler.getAttribute( &#39;aria-expanded&#39; ) === &#39;false&#39; ? true : false;\n        toggler.setAttribute( &#39;aria-expanded&#39;, ariaExpandedState );\n    }\n\n    /**\n     * Run when the document is ready.\n     */\n    docReady() {\n        this.cache();\n        this.events();\n    }\n}</code></pre><h3 id="scss">SCSS</h3>\n<p>We use the component class name as the CSS scope for our modifications for the basic Bulma CSS code. We keep the changes to a minimum and most of this code is applied to separate the dropdown toggler from the menu link containing a dropdown menu.</p>\n<pre><code>// This file contains styles for the navbar component.\n.bulmally-navbar {\n\n    // Reset all buttons inside a navbar.\n    button {\n        background: none;\n        border: 0;\n    }\n\n    .navbar-burger {\n        &amp;:hover {\n            background: $navbar-dropdown-item-hover-background-color;\n        }\n    }\n\n    .navbar-dropdown-control {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        .navbar-link {\n            flex: 1 1 auto;\n            padding-right: 1rem;\n\n            &amp;:hover {\n                // The link background is controlled on the &#39;.has-dropdown&#39; level.\n                background: none;\n            }\n        }\n    }\n\n    .navbar-item {\n        &amp;.has-dropdown {\n            &amp;:hover,\n            &amp;.is-active {\n                background-color: $navbar-item-hover-background-color;\n            }\n        }\n    }\n\n    .dropdown-toggler {\n        position: relative; // Make the arrow stick to the button.\n        flex: 0 0 auto;\n        margin-right: .75rem;\n        transition: transform $speed $easing;\n\n        &amp;[aria-expanded=&quot;true&quot;] {\n            transform: rotate(180deg);\n        }\n\n        .arrow {\n            @extend %arrow;\n            width: .75rem;\n            height: .75rem;\n            margin-top: -.5rem;\n            border-color: $navbar-dropdown-arrow;\n        }\n    }\n}</code></pre>'},function(t,e){t.exports='<h2 id="accordion-component">Accordion component</h2>\n<p>This component provides an accordion functionality with added accessible JS implementation.</p>\n<h3 id="html">HTML</h3>\n<p>The Bulmally accordion&#39;s titles are inside a button so that they are focusable and clickable.</p>\n<pre><code>&lt;div id=&quot;js-bulmally-accordion&quot; class=&quot;bulmally-accordion&quot;&gt;\n    &lt;div class=&quot;columns is-multiline&quot;&gt;\n\n        &lt;div class=&quot;column is-10-tablet is-offset-1-tablet is-8-desktop is-offset-2-desktop&quot;&gt;\n            &lt;div class=&quot;accordion-row box&quot;&gt;\n                &lt;h3 class=&quot;h4 accordion-title&quot;&gt;\n                    &lt;!-- This controls the section. Toggling the state is done with JS --&gt;\n                    &lt;button\n                        id=&quot;accordion-title-button-1&quot;\n                        class=&quot;accordion-title-button&quot;\n                        aria-expanded=&quot;false&quot;\n                        aria-controls=&quot;accordion-content-1&quot;&gt;\n\n                        &lt;div class=&quot;level is-mobile&quot;&gt;\n                            &lt;div class=&quot;level-left can-shrink&quot;&gt;\n                                &lt;span class=&quot;level-item can-shrink accordion-title-text&quot;&gt;\n                                    This heading is clickable\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div class=&quot;level-right&quot;&gt;\n                                &lt;span class=&quot;level-item icon accordion-title-icon&quot;&gt;\n                                    &lt;i class=&quot;fas fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/button&gt;\n                &lt;/h3&gt;\n\n                &lt;!-- The ID of this element has to be dynamically added. --&gt;\n                &lt;div id=&quot;accordion-content-1&quot; class=&quot;accordion-content&quot;&gt;\n                    &lt;div class=&quot;content is-small&quot;&gt;\n                        &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n\n                        &lt;h3&gt;Lorem ipsum dolor sit amet consectetur&lt;/h3&gt;\n\n                        &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Next accordion row --&gt;\n\n        &lt;div class=&quot;column is-10-tablet is-offset-1-tablet is-8-desktop is-offset-2-desktop&quot;&gt;\n            &lt;div class=&quot;accordion-row box&quot;&gt;\n                &lt;h3 class=&quot;h4 accordion-title&quot;&gt;\n                    &lt;!-- This controls the section. Toggling the state is done with JS --&gt;\n                    &lt;button\n                        id=&quot;accordion-title-button-1&quot;\n                        class=&quot;accordion-title-button&quot;\n                        aria-expanded=&quot;false&quot;\n                        aria-controls=&quot;accordion-content-1&quot;&gt;\n\n                        &lt;div class=&quot;level is-mobile&quot;&gt;\n                            &lt;div class=&quot;level-left can-shrink&quot;&gt;\n                                &lt;span class=&quot;level-item can-shrink accordion-title-text&quot;&gt;\n                                    This heading is clickable\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div class=&quot;level-right&quot;&gt;\n                                &lt;span class=&quot;level-item icon accordion-title-icon&quot;&gt;\n                                    &lt;i class=&quot;fas fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/button&gt;\n                &lt;/h3&gt;\n\n                &lt;!-- The ID of this element has to be dynamically added. --&gt;\n                &lt;div id=&quot;accordion-content-1&quot; class=&quot;accordion-content&quot;&gt;\n                    &lt;div class=&quot;content is-small&quot;&gt;\n                        &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n\n                        &lt;h3&gt;Lorem ipsum dolor sit amet consectetur&lt;/h3&gt;\n\n                        &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre><h3 id="javascript">JavaScript</h3>\n<p>This JS implementation is written in ES6 and uses VanillaJS to control the states in the DOM. You may use it as it is and use <a href="https://babeljs.io/">Babel</a> to make it backwards compatible with older browsers. If you do not have Babel in your environment, it should be pretty straightforward to copy the required parts of this code.</p>\n<pre><code>/**\n * Accordion JS controller.\n */\n\n/**\n * Class Accordion\n */\nexport default class Accordion {\n    /**\n     * This method is run when a new instance of the class is created.\n     */\n    constructor() {\n        // This must be set for each component.\n        this.documentation = require( &#39;./accordion.md&#39; );\n\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.docReady();\n            }\n        );\n    }\n\n    /**\n     * Cache dom elements for use in the class&#39;s methods\n     */\n    cache() {\n        this.mainContainer = document.getElementById( &#39;js-bulmally-accordion&#39; );\n\n        if ( this.mainContainer ) {\n            this.dropdownTogglers = this.mainContainer.querySelectorAll( &#39;.accordion-title-button&#39; );\n            this.dropdowns = this.mainContainer.querySelectorAll( &#39;.accordion-content&#39; );\n        }\n\n        // Hide all toggleable elements with JS.\n        for ( let i = 0; i &lt; this.dropdowns.length; i++ ) {\n            this.dropdowns[ i ].classList.add( &#39;is-hidden&#39; );\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    events() {\n        if ( this.dropdownTogglers ) {\n            for ( let i = 0; i &lt; this.dropdownTogglers.length; i++ ) {\n                this.dropdownTogglers[ i ].addEventListener( &#39;click&#39;, () =&gt; this.toggleDropdown( this.dropdownTogglers[ i ] ) );\n            }\n        }\n    }\n\n    /**\n     * Toggles a dropdown content visibility.\n     *\n     * @param {HTMLButtonElement} clickedToggler The toggler button that was clicked.\n     */\n    toggleDropdown( clickedToggler ) {\n        const containerId = clickedToggler.getAttribute( &#39;aria-controls&#39; );\n        const dropDownContent = this.mainContainer.querySelector( `#${ containerId }` );\n\n        this.toggleAriaExpanded( clickedToggler );\n        dropDownContent.classList.toggle( &#39;is-hidden&#39; );\n    }\n\n    /**\n     * Get the toggler&#39;s aria-expanded current state and set a new opposite state to it.\n     * Also set the opened container&#39;s aria-hidden state to the new value&#39;s opposite.\n     *\n     * @param {HTMLElement} toggler The toggler element.\n     */\n    toggleAriaExpanded( toggler ) {\n        const ariaExpandedState = toggler.getAttribute( &#39;aria-expanded&#39; ) === &#39;false&#39; ? true : false;\n        toggler.setAttribute( &#39;aria-expanded&#39;, ariaExpandedState );\n    }\n\n    /**\n     * Run when the document is ready.\n     */\n    docReady() {\n        this.cache();\n        this.events();\n    }\n}</code></pre><h3 id="scss">SCSS</h3>\n<p>We use the component class name as the CSS scope for our modifications to the basic Bulma CSS code.</p>\n<pre><code>// This file contains all styles for the accordion element.\n.bulmally-accordion {\n\n    .accordion-title-button {\n        appearance: none;\n\n        background-color: $white;\n        border: 0;\n        box-shadow: none;\n        width: 100%;\n\n        &amp;[aria-expanded=&quot;true&quot;] {\n            .icon {\n                transform: rotate(-180deg);\n            }\n        }\n    }\n\n    .accordion-title-icon {\n        transition: transform .2s ease;\n    }\n\n    .accordion-content {\n        margin-top: 1.25rem;\n        padding-top: 1.25rem;\n        border-top: .0625rem solid $grey-lighter;\n    }\n\n    .can-shrink {\n        flex-shrink: 1;\n    }\n}</code></pre>'},function(t,e){t.exports='<h2 id="tabs">Tabs</h2>\n<p>This component provides the needed JavaScript functionalities for the <a href="https://bulma.io/documentation/components/tabs/">Bulma tabs</a>. Accessibility is implemented with JavaScript making the DOM as simple as possible. There are two tab elements on this page to demonstrate that you can have multiple tabs on the same page. All Bulma tab styles are supported.</p>\n<h3 id="html">HTML</h3>\n<p>Bulma uses buttons as tabs. We use anchor links instead. This makes tabs accessible even if JavaScript is not available. Each tab is an anchor link taking the user to the corresponding tab panel. If JavaScript is successfully loaded, all tab containers are queried from the DOM and their functionalities are initialized on the document ready event.</p>\n<h3 id="requirements">Requirements</h3>\n<ul>\n<li>Add a container for the tabs and the panels with a class named <em>&quot;bulmally-tabs&quot;</em>.</li>\n<li>The <em>href</em> attribute of the link must be the id of the tab panel. This enables linking the tab to the panel.</li>\n<li>The tab panels should be placed directly after the tabs to create a logical tab order.</li>\n</ul>\n<pre><code>&lt;div class=&quot;bulmally-tabs&quot;&gt;\n    &lt;div class=&quot;tabs&quot;&gt;\n        &lt;ul aria-label=&quot;Add a description for the tabs here&quot;&gt;\n            &lt;li class=&quot;is-active&quot;&gt;&lt;a href=&quot;#first&quot;&gt;First&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=&quot;#second&quot;&gt;Second&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=&quot;#third&quot;&gt;Third&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=&quot;#fourth&quot;&gt;Fourth&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n        &lt;div id=&quot;first&quot;&gt;\n            &lt;h2&gt;First&lt;/h2&gt;\n        &lt;/div&gt;\n        &lt;div id=&quot;second&quot;&gt;\n            &lt;h2&gt;Second&lt;/h2&gt;\n        &lt;/div&gt;\n        &lt;div id=&quot;third&quot;&gt;\n            &lt;h2&gt;Third&lt;/h2&gt;\n        &lt;/div&gt;\n        &lt;div id=&quot;fourth&quot;&gt;\n            &lt;h2&gt;Fourth&lt;/h2&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;</code></pre><h3 id="scss">SCSS</h3>\n<p>The only styling required is the hidden state of the panels. This is done by using the <em>&quot;hidden&quot;</em> attribute as the CSS selector.</p>\n<pre><code>.bulmally-tabs {\n\n    &amp;-panel[hidden] {\n        display: none;\n    }\n\n}</code></pre><h3 id="javascript">JavaScript</h3>\n<p>Bulmally tabs implements the WAI-ARIA <a href="https://www.w3.org/TR/wai-aria-practices/#tabpanel">tabs design pattern</a>. JavaScript code is based on the WAI-ARIA example for <a href="(https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html)">manually activated tabs</a>. The implementation provides the following features:</p>\n<ul>\n<li>Tab navigation with arrow keys.</li>\n<li>Tab panel activation by pressing enter or space on the focused tab.</li>\n<li>Tab panel activation on mouse click event.</li>\n<li>Focus handling for all interactions.</li>\n</ul>\n<p>We extended the WAI-ARIA example with the ability to have multiple tab elements on the same page. If you create tabs dynamically <em>(after the document ready event)</em>, you can initialize their accessibility features by passing the Bulmally tabs element container for the <em>init()</em> method. You can find an example of this in the <em>initAllTabs()</em> method that finds and initializes all Bulmally tab elements on the document ready event.</p>\n<pre><code>// For easy reference\nconst keys = {\n    end: 35,\n    home: 36,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    enter: 13,\n    space: 32,\n};\n\n// Add or subtract depending on key pressed\nconst direction = {\n    37: -1,\n    38: -1,\n    39: 1,\n    40: 1,\n};\n\n/**\n * Class Tabs\n */\nexport default class Tabs {\n    /**\n     * This method is run automatically when the module is imported,\n     * because it exports a new instance of itself.\n     */\n    constructor() {\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.initAllTabs();\n            }\n        );\n    }\n\n    /**\n     * Find all tab elements and initialize their functionalities.\n     * This method should be run on document ready to initialize all\n     * tabs in the DOM after the page is loaded.\n     */\n    initAllTabs() {\n        this.allTabs = document.querySelectorAll( &#39;.bulmally-tabs&#39; );\n\n        if ( ! this.allTabs ) {\n            // No tabs found.\n            return;\n        }\n\n        for ( let i = 0; i &lt; this.allTabs.length; i++ ) {\n            this.init( this.allTabs[ i ] );\n        }\n    }\n\n    /**\n     * Initalize a single tabs element.\n     *\n     * @param {HTMLElement} tabsElement Bulmally tabs container.\n     */\n    init( tabsElement ) {\n        const tablist = tabsElement.querySelector( &#39;.bulmally-tabs-tablist&#39; );\n        const tabs = tablist.querySelectorAll( &#39;a&#39; );\n        const tabPanels = tabsElement.querySelectorAll( &#39;.bulmally-tabs-panel&#39; );\n        const tabListItems = tablist.querySelectorAll( &#39;li&#39; );\n\n        // Store references to the first and the last tab for focus manipulations.\n        // Initialize an array for storing references to all tabs.\n        tablist.firstTab = tabs[ 0 ];\n        tablist.lastTab = tabs[ tabs.length - 1 ];\n        tablist.tabs = [];\n        tablist.panels = [];\n\n        // Tabs must be initialized first.\n        for ( let i = 0; i &lt; tabs.length; i++ ) {\n            this.initTab( tabs[ i ], tablist, i );\n        }\n\n        // After tabs, initalize the corresponding tabs.\n        for ( let i = 0; i &lt; tabPanels.length; i++ ) {\n            this.initPanel( tabPanels[ i ], tabs[ i ], tablist, i );\n        }\n\n        for ( let i = 0; i &lt; tabListItems.length; i++ ) {\n            // All &lt;li&gt; elements must have a role of presentation.\n            tabListItems[ i ].setAttribute( &#39;role&#39;, &#39;presentation&#39; );\n        }\n    }\n\n    /**\n     * Initialize functionalities for a tab element.\n     *\n     * @param {HTMLElement} tab A tab link.\n     * @param {HTMLElement} tablist The tablist element for the tab.\n     * @param {number} index The current element index in the tab list.\n     */\n    initTab( tab, tablist, index ) {\n        const panelId = tab.hash.slice( 1 );\n\n        // Create a unique id using the tab link&#39;s hash\n        tab.id = `tab-${ panelId }`;\n\n        // Make a two-way reference of the tab and its tablist.\n        tab.tablist = tablist;\n        tablist.tabs[ index ] = tab;\n\n        // Store the index.\n        tab.index = index;\n\n        tab.panel = document.getElementById( panelId );\n\n        tab.role = &#39;tab&#39;;\n        tab.setAttribute( &#39;aria-selected&#39;, &#39;false&#39; );\n        tab.setAttribute( &#39;aria-controls&#39;, panelId );\n        tab.tabindex = -1;\n\n        tab.addEventListener( &#39;click&#39;, ( event ) =&gt; this.clickEventListener( event ) );\n        tab.addEventListener( &#39;keydown&#39;, ( event ) =&gt; this.keydownEventListener( event ) );\n        tab.addEventListener( &#39;keyup&#39;, ( event ) =&gt; this.keyupEventListener( event ) );\n    }\n\n    /**\n     * Initalize panel functionalities.\n     *\n     * @param {HTMLElement} panel The panel element.\n     * @param {HTMLElement} tab The corresponding tab element.\n     * @param {HTMLElement} tablist The tablist element for the tab.\n     * @param {number} index The index in panels.\n     */\n    initPanel( panel, tab, tablist, index ) {\n        if ( index !== 0 ) {\n            // Hide all but the first tab.\n            panel.hidden = true;\n        }\n\n        panel.setAttribute( &#39;tabindex&#39;, &#39;0&#39; );\n        panel.setAttribute( &#39;role&#39;, &#39;tabpanel&#39; );\n        panel.setAttribute( &#39;aria-labelledby&#39;, tab.id );\n\n        // Store a reference for the tablist.\n        tablist.panels.push( panel );\n    }\n\n    /**\n     * When a tab is clicked, activateTab is fired to activate it\n     *\n     * @param {Event} event Event object.\n     */\n    clickEventListener( event ) {\n        // Prevent the default click event.\n        event.preventDefault();\n\n        const tab = event.target;\n        this.activateTab( tab, false );\n    }\n\n    /**\n     * Handle keydown on tabs\n     *\n     * @param {Event} event Event object.\n     */\n    keydownEventListener( event ) {\n        const key = event.keyCode;\n        const tablist = event.target.tablist;\n\n        switch ( key ) {\n        case keys.end:\n            event.preventDefault();\n            // Activate last tab\n            this.focusLastTab( tablist );\n            break;\n        case keys.home:\n            event.preventDefault();\n            // Activate first tab\n            this.focusFirstTab( tablist );\n            break;\n\n        // Up and down are in keydown to prevent page scroll.\n        case keys.up:\n        case keys.down:\n            this.determineOrientation( event );\n            break;\n        case keys.enter:\n        case keys.space:\n            event.preventDefault();\n            this.activateTab( event.target, true );\n            break;\n        }\n    }\n\n    /**\n     * Handle keyup on tabs\n     *\n     * @param {Event} event Event object.\n     */\n    keyupEventListener( event ) {\n        const key = event.keyCode;\n\n        switch ( key ) {\n        case keys.left:\n        case keys.right:\n            this.determineOrientation( event );\n            break;\n        }\n    }\n\n    /**\n     * When a tablist&#39;s aria-orientation is set to vertical,\n     * only up and down arrow should function.\n     * only up and down arrow should function.\n     *\n     * @param {Event} event The event object.\n     */\n    determineOrientation( event ) {\n        const key = event.keyCode;\n        const vertical = event.target.tablist.getAttribute( &#39;aria-orientation&#39; ) === &#39;vertical&#39;;\n        let proceed = false;\n\n        if ( vertical ) {\n            if ( key === keys.up || key === keys.down ) {\n                event.preventDefault();\n                proceed = true;\n            }\n        } else if ( key === keys.left || key === keys.right ) {\n            proceed = true;\n        }\n\n        if ( proceed ) {\n            this.switchTabOnArrowPress( event );\n        }\n    }\n\n    /**\n     * Either focus the next, previous, first, or last tab\n     * depending on the key pressed.\n     *\n     * @param {Event} event Event object.\n     */\n    switchTabOnArrowPress( event ) {\n        const pressed = event.keyCode;\n\n        if ( direction[ pressed ] ) {\n            const target = event.target;\n            const tablist = target.tablist;\n            const tabs = tablist.tabs;\n            if ( target.index !== undefined ) {\n                if ( tabs[ target.index + direction[ pressed ] ] ) {\n                    tabs[ target.index + direction[ pressed ] ].focus();\n                } else if ( pressed === keys.left || pressed === keys.up ) {\n                    this.focusLastTab( tablist );\n                } else if ( pressed === keys.right || pressed === keys.down ) {\n                    this.focusFirstTab( tablist );\n                }\n            }\n        }\n    }\n\n    /**\n     * Activates any given tab panel\n     *\n     * @param {HTMLElement} tab A tab element.\n     * @param {boolean} setFocus Whether to set focus.\n     */\n    activateTab( tab, setFocus ) {\n        // Deactivate all other tabs\n        this.deactivateTabs( tab.tablist );\n\n        // Remove tabindex attribute.\n        tab.removeAttribute( &#39;tabindex&#39; );\n\n        // Set the tab as selected.\n        tab.setAttribute( &#39;aria-selected&#39;, &#39;true&#39; );\n\n        // Set Bulma class.\n        tab.parentNode.classList.add( &#39;is-active&#39; );\n\n        // Remove hidden attribute from tab panel to make it visible.\n        tab.panel.removeAttribute( &#39;hidden&#39; );\n\n        // Set focus when required.\n        if ( setFocus ) {\n            tab.panel.focus();\n        }\n    }\n\n    /**\n     * Deactivate all tabs and tab panels\n     *\n     * @param {HTMLElement} tablist The tablist element.\n     */\n    deactivateTabs( tablist ) {\n        for ( let t = 0; t &lt; tablist.tabs.length; t++ ) {\n            tablist.tabs[ t ].parentNode.classList.remove( &#39;is-active&#39; );\n            tablist.tabs[ t ].setAttribute( &#39;tabindex&#39;, &#39;-1&#39; );\n            tablist.tabs[ t ].setAttribute( &#39;aria-selected&#39;, &#39;false&#39; );\n        }\n\n        for ( let p = 0; p &lt; tablist.panels.length; p++ ) {\n            tablist.panels[ p ].setAttribute( &#39;hidden&#39;, &#39;hidden&#39; );\n        }\n    }\n\n    /**\n     * Focus on the first tab in the tablist of the given tab.\n     *\n     * @param {HTMLElement} tablist A tablist element.\n     */\n    focusFirstTab( tablist ) {\n        tablist.firstTab.focus();\n    }\n\n    /**\n     * Focus on the last tab in the tablist of the given tab.\n     *\n     * @param {HTMLElement} tablist A tablist element.\n     */\n    focusLastTab( tablist ) {\n        tablist.lastTab.focus();\n    }\n}</code></pre>'},function(t,e){t.exports=""},function(t,e){t.exports='<h2 id="message">Message</h2>\n<p>Bulma describes the <a href="https://bulma.io/documentation/components/message/">message component</a> as a colored message block, to emphasize part of your page. Bulmally implements the closing functionality for it. We also modify the message HTML markup a little to make it semantically better.</p>\n<h3 id="html">HTML</h3>\n<p>Instead of an article, we encourage to use a section tag for the message container. Heading should be inside a header element and the heading should have a heading tag with a level following the structure of your page. As an example, we use <em>h2</em> since the element probably does not contain the main heading of a page. Inside the delete button, you should add a descriptive text inside the span element targeted for screen readers. Using a span element instead of <em>aria-label</em> we support language translators that do not translate HTML attributes <em>(e.g. Google Translate)</em>.</p>\n<pre><code>&lt;section class=&quot;bulmally-message message&quot;&gt;\n    &lt;header class=&quot;message-header&quot;&gt;\n        &lt;h2&gt;Hello World&lt;/h2&gt;\n        &lt;button class=&quot;delete&quot;&gt;\n            &lt;span class=&quot;is-sr-only&quot;&gt;Close message&lt;/span&gt;\n        &lt;/button&gt;\n    &lt;/header&gt;\n    &lt;div class=&quot;message-body&quot;&gt;\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. &lt;strong&gt;Pellentesque risus mi&lt;/strong&gt;, tempus quis placerat ut, porta nec nulla. Vestibulum rhoncus ac ex sit amet fringilla. Nullam gravida purus diam, et dictum &lt;a&gt;felis venenatis&lt;/a&gt; efficitur. Aenean ac &lt;em&gt;eleifend lacus&lt;/em&gt;, in mollis lectus. Donec sodales, arcu et sollicitudin porttitor, tortor urna tempor ligula, id porttitor mi magna a neque. Donec dui urna, vehicula et sem eget, facilisis sodales sem.\n    &lt;/div&gt;\n&lt;/section&gt;</code></pre><h3 id="javascript">JavaScript</h3>\n<p>JavaScript handles removing the element and moving focus to the next sibling of the message element. If the message element has no siblings, focus is moved to the parent element. We encourage placing the message element so that is has a text element next to it. This makes the focus change logical for a screen reader to announce it after the previously focused delete button and the whole message element is removed from the DOM.</p>\n<p>If you create messages dynamically, the <em>Message</em> class has static methods for initalizing new message components. The <em>initMessages()</em> method has an example of how to initalize a single message component.</p>\n<pre><code>/**\n * Class Message\n */\nexport default class Message {\n    /**\n     * Construct the component handler.\n     */\n    constructor() {\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.initMessages();\n            }\n        );\n    }\n\n    /**\n     * Find all message elements and initalize their closing functionality.\n     */\n    initMessages() {\n        const messages = document.querySelectorAll( &#39;.bulmally-message&#39; );\n\n        for ( let i = 0; i &lt; messages.length; i++ ) {\n            Message.initMessage( messages[ i ] );\n        }\n    }\n\n    /**\n     * Initializes closing functionalities for a message element.\n     *\n     * @param {HTMLElement} messageElement A message element.\n     */\n    static initMessage( messageElement ) {\n        const deleteButton = messageElement.querySelector( &#39;.delete&#39; );\n        deleteButton.message = messageElement;\n\n        deleteButton.addEventListener( &#39;click&#39;, Message.delete );\n    }\n\n    /**\n     * Handles the click event of a delete button and deletes the message.\n     * Focus is set on the next element before deleting the element.\n     *\n     * @param {Event} event An event object.\n     */\n    static delete( event ) {\n        const message = event.target.message;\n        let focusTo = message.nextElementSibling;\n\n        if ( ! focusTo ) {\n            // If there&#39;s no sibling for the message,\n            // move focus to the parent node.\n            focusTo = message.parentNode;\n        }\n\n        // Force ability to give focus on the sibling.\n        if ( focusTo.tabIndex !== 0 ) {\n            focusTo.setAttribute( &#39;tabindex&#39;, -1 );\n        }\n        focusTo.focus();\n\n        message.remove();\n    }\n}</code></pre><h3 id="scss">SCSS</h3>\n<p>The heading of the message element should be inside a heading tag. Bulma styles headings without any weight by default. We set the correct weight with this simple override.</p>\n<pre><code>.bulmally-message {\n\n    .message-header {\n        h1, h2, h3, h4, h5, h6 {\n            // Override heading weight.\n            font-weight: $message-header-weight;\n        }\n    }\n\n}</code></pre>'},function(t,e,n){"use strict";n.r(e);n(4);function a(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var o=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.cache(),this.documentation=n(5),document.addEventListener("DOMContentLoaded",function(){e.docReady()})}var e,o,i;return e=t,(o=[{key:"cache",value:function(){}},{key:"events",value:function(){}},{key:"docReady",value:function(){this.cache(),this.events()}}])&&a(e.prototype,o),i&&a(e,i),t}();function i(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var s=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(6),document.addEventListener("DOMContentLoaded",function(){e.docReady()})}var e,a,o;return e=t,(a=[{key:"cache",value:function(){this.navbarBurger=document.getElementById("js-navbar-burger"),this.navbarMenu=document.getElementById("js-navbar-menu"),this.navbarMenu&&(this.dropdownTogglers=this.navbarMenu.querySelectorAll(".dropdown-toggler"))}},{key:"events",value:function(){var t=this;if(this.navbarBurger&&this.navbarBurger.addEventListener("click",function(){return t.toggleMenu()}),this.dropdownTogglers)for(var e=0;e<this.dropdownTogglers.length;e++)this.dropdownTogglers[e].addEventListener("click",function(e){return t.toggleDropdown(e)})}},{key:"toggleMenu",value:function(){this.navbarBurger.classList.toggle("is-active"),this.navbarMenu.classList.toggle("is-active"),this.toggleAriaExpanded(this.navbarBurger)}},{key:"toggleDropdown",value:function(t){var e=t.target,n=e.getAttribute("aria-controls"),a=this.navbarMenu.querySelector("#".concat(n));this.toggleAriaExpanded(e),a.classList.toggle("is-hidden-touch"),this.toggleAncestorActiveState(e,"has-dropdown")}},{key:"toggleAncestorActiveState",value:function(t,e){for(var n=t.parentNode;n;){if(n.classList.contains(e))return void n.classList.toggle("is-active");n=!!n.parentNode&&n.parentNode}}},{key:"toggleAriaExpanded",value:function(t){var e="false"===t.getAttribute("aria-expanded");t.setAttribute("aria-expanded",e)}},{key:"docReady",value:function(){this.cache(),this.events()}}])&&i(e.prototype,a),o&&i(e,o),t}();function l(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var r=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(7),document.addEventListener("DOMContentLoaded",function(){e.docReady()})}var e,a,o;return e=t,(a=[{key:"cache",value:function(){if(this.mainContainer=document.getElementById("js-bulmally-accordion"),this.mainContainer){this.dropdownTogglers=this.mainContainer.querySelectorAll(".accordion-title-button"),this.dropdowns=this.mainContainer.querySelectorAll(".accordion-content");for(var t=0;t<this.dropdowns.length;t++)this.dropdowns[t].classList.add("is-hidden")}}},{key:"events",value:function(){var t=this;if(this.dropdownTogglers)for(var e=function(e){t.dropdownTogglers[e].addEventListener("click",function(){return t.toggleDropdown(t.dropdownTogglers[e])})},n=0;n<this.dropdownTogglers.length;n++)e(n)}},{key:"toggleDropdown",value:function(t){var e=t.getAttribute("aria-controls"),n=this.mainContainer.querySelector("#".concat(e));this.toggleAriaExpanded(t),n.classList.toggle("is-hidden")}},{key:"toggleAriaExpanded",value:function(t){var e="false"===t.getAttribute("aria-expanded");t.setAttribute("aria-expanded",e)}},{key:"docReady",value:function(){this.cache(),this.events()}}])&&l(e.prototype,a),o&&l(e,o),t}();function d(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var c=35,u=36,h=37,g=38,b=39,p=40,m=13,v=32,f={37:-1,38:-1,39:1,40:1},y=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(8),document.addEventListener("DOMContentLoaded",function(){e.initAllTabs()})}var e,a,o;return e=t,(a=[{key:"initAllTabs",value:function(){if(this.allTabs=document.querySelectorAll(".bulmally-tabs"),this.allTabs)for(var t=0;t<this.allTabs.length;t++)this.init(this.allTabs[t])}},{key:"init",value:function(t){var e=t.querySelector(".tabs").querySelector("ul"),n=e.querySelectorAll("a"),a=e.querySelectorAll("li");e.firstTab=n[0],e.lastTab=n[n.length-1],e.tabs=[],e.panels=[];for(var o=0;o<n.length;o++)this.initTab(n[o],e,o);for(var i=0;i<a.length;i++)a[i].setAttribute("role","presentation")}},{key:"initTab",value:function(t,e,n){var a=this,o=t.hash.slice(1);t.id="tab-".concat(o),t.tablist=e,e.tabs[n]=t,t.index=n,t.panel=document.getElementById(o),this.initPanel(t.panel,t,e,n),t.role="tab",t.setAttribute("aria-selected","false"),t.setAttribute("aria-controls",o),t.tabindex=-1,t.addEventListener("click",function(t){return a.clickEventListener(t)}),t.addEventListener("keydown",function(t){return a.keydownEventListener(t)}),t.addEventListener("keyup",function(t){return a.keyupEventListener(t)})}},{key:"initPanel",value:function(t,e,n,a){0!==a&&(t.hidden=!0),t.setAttribute("tabindex","0"),t.setAttribute("role","tabpanel"),t.setAttribute("aria-labelledby",e.id),n.panels.push(t)}},{key:"clickEventListener",value:function(t){t.preventDefault();var e=t.target;this.activateTab(e,!1)}},{key:"keydownEventListener",value:function(t){var e=t.keyCode,n=t.target.tablist;switch(e){case c:t.preventDefault(),this.focusLastTab(n);break;case u:t.preventDefault(),this.focusFirstTab(n);break;case g:case p:this.determineOrientation(t);break;case m:case v:t.preventDefault(),this.activateTab(t.target,!0)}}},{key:"keyupEventListener",value:function(t){switch(t.keyCode){case h:case b:this.determineOrientation(t)}}},{key:"determineOrientation",value:function(t){var e=t.keyCode,n=!1;"vertical"===t.target.tablist.getAttribute("aria-orientation")?e!==g&&e!==p||(t.preventDefault(),n=!0):e!==h&&e!==b||(n=!0),n&&this.switchTabOnArrowPress(t)}},{key:"switchTabOnArrowPress",value:function(t){var e=t.keyCode;if(f[e]){var n=t.target,a=n.tablist,o=a.tabs;void 0!==n.index&&(o[n.index+f[e]]?o[n.index+f[e]].focus():e===h||e===g?this.focusLastTab(a):e!==b&&e!==p||this.focusFirstTab(a))}}},{key:"activateTab",value:function(t,e){this.deactivateTabs(t.tablist),t.removeAttribute("tabindex"),t.setAttribute("aria-selected","true"),t.parentNode.classList.add("is-active"),t.panel.removeAttribute("hidden"),e&&t.panel.focus()}},{key:"deactivateTabs",value:function(t){for(var e=0;e<t.tabs.length;e++)t.tabs[e].parentNode.classList.remove("is-active"),t.tabs[e].setAttribute("tabindex","-1"),t.tabs[e].setAttribute("aria-selected","false");for(var n=0;n<t.panels.length;n++)t.panels[n].setAttribute("hidden","hidden")}},{key:"focusFirstTab",value:function(t){t.firstTab.focus()}},{key:"focusLastTab",value:function(t){t.lastTab.focus()}}])&&d(e.prototype,a),o&&d(e,o),t}();function q(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var w=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(9),document.addEventListener("DOMContentLoaded",function(){e.docReady()})}var e,a,o;return e=t,(a=[{key:"cache",value:function(){this.rootEl=document.documentElement,this.$modals=[],this.$modalButtons=document.querySelectorAll(".modal-button"),this.$modalCloses=document.querySelectorAll(".modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button, .modal-close-button")}},{key:"events",value:function(){var t=this;this.$modalButtons.length>0&&this.$modalButtons.forEach(function(e){var n=document.getElementById(e.getAttribute("aria-controls"));n.openingButton=e,n.isOpened=0,t.$modals.push(n),e.addEventListener("click",function(){t.openModal(n),t.toggleAriaExpanded(e)})}),this.$modalCloses.length>0&&this.$modalCloses.forEach(function(e){e.addEventListener("click",function(){t.closeModals()})}),document.addEventListener("keydown",function(e){27===(e||window.event).keyCode&&t.closeModals()})}},{key:"openModal",value:function(t){var e=this;this.rootEl.classList.add("is-clipped"),t.classList.add("is-active"),t.isOpened=1;var n=t.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex="0"]');n.length&&(t.focusableElements=n,t.focusableElements.first=n[0],t.focusableElements.last=n[n.length-1],t.focusableElements.first.focus(),document.addEventListener("keydown",function(n){var a=n||window.event;9===a.keyCode&&e.handleModalTabbing(a,t)}))}},{key:"closeModals",value:function(){var t=this;this.rootEl.classList.remove("is-clipped"),this.$modals.forEach(function(e){e.classList.remove("is-active"),e.isOpened&&(e.openingButton.focus(),t.toggleAriaExpanded(e.openingButton),e.isOpened=0)})}},{key:"handleModalTabbing",value:function(t,e){t.shiftKey?e.focusableElements.first===document.activeElement&&(t.preventDefault(),e.focusableElements.last.focus()):e.focusableElements.last===document.activeElement&&(t.preventDefault(),e.focusableElements.first.focus())}},{key:"toggleAriaExpanded",value:function(t){var e="false"===t.getAttribute("aria-expanded");t.setAttribute("aria-expanded",e)}},{key:"docReady",value:function(){this.cache(),this.events()}}])&&q(e.prototype,a),o&&q(e,o),t}();function k(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var T=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(10),document.addEventListener("DOMContentLoaded",function(){e.initMessages()})}var e,a,o;return e=t,o=[{key:"initMessage",value:function(e){var n=e.querySelector(".delete");n.message=e,n.addEventListener("click",t.delete)}},{key:"delete",value:function(t){var e=t.target.message,n=e.nextElementSibling;n||(n=e.parentNode),0!==n.tabIndex&&n.setAttribute("tabindex",-1),n.focus(),e.remove()}}],(a=[{key:"initMessages",value:function(){for(var e=document.querySelectorAll(".bulmally-message"),n=0;n<e.length;n++)t.initMessage(e[n])}}])&&k(e.prototype,a),o&&k(e,o),t}(),A=n(0),E=n.n(A),x=n(1),L=n.n(x),S=n(2),M=n.n(S);function C(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}E.a.registerLanguage("javascript",L.a),E.a.registerLanguage("scss",M.a),new(function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.components=e,document.addEventListener("DOMContentLoaded",function(){n.initDocumentation()})}var e,n,a;return e=t,(n=[{key:"initDocumentation",value:function(){var t=window.location.pathname;for(var e in this.components){var n=this.components[e];if(t.includes(e)&&n.documentation){var a=document.getElementById("js-markdown");a&&(a.innerHTML=n.documentation,a.querySelectorAll("code").forEach(function(t){var e=document.createElement("pre");t.parentNode.insertBefore(e,t),e.appendChild(t),E.a.highlightBlock(t)}))}}}}])&&C(e.prototype,n),a&&C(e,a),t}())({boilerplate:new o,navbar:new s,accordion:new r,tabs:new y,modal:new w,message:new T})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9ib2lsZXJwbGF0ZS9ib2lsZXJwbGF0ZS5tZCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL25hdmJhci9uYXZiYXIubWQiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hY2NvcmRpb24vYWNjb3JkaW9uLm1kIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvdGFicy90YWJzLm1kIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbW9kYWwvbW9kYWwubWQiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9tZXNzYWdlL21lc3NhZ2UubWQiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9ib2lsZXJwbGF0ZS9ib2lsZXJwbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL25hdmJhci9uYXZiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hY2NvcmRpb24vYWNjb3JkaW9uLmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvdGFicy90YWJzLmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbW9kYWwvbW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9tZXNzYWdlL21lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2RvY3VtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2FwcC5qcyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiZXhlY3V0ZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImRlZmVycmVkTW9kdWxlcyIsImFwcGx5IiwiY2hlY2tEZWZlcnJlZE1vZHVsZXMiLCJyZXN1bHQiLCJkZWZlcnJlZE1vZHVsZSIsImZ1bGZpbGxlZCIsImoiLCJkZXBJZCIsInNwbGljZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIjAiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsIkJvaWxlclBsYXRlIiwidGhpcyIsImNhY2hlIiwiZG9jdW1lbnRhdGlvbiIsInJlcXVpcmUiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb2NSZWFkeSIsImV2ZW50cyIsIk5hdmJhciIsIm5hdmJhckJ1cmdlciIsImdldEVsZW1lbnRCeUlkIiwibmF2YmFyTWVudSIsImRyb3Bkb3duVG9nZ2xlcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwidG9nZ2xlTWVudSIsImV2ZW50IiwidG9nZ2xlRHJvcGRvd24iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJ0b2dnbGVBcmlhRXhwYW5kZWQiLCJ0YXJnZXQiLCJjb250YWluZXJJZCIsImdldEF0dHJpYnV0ZSIsImRyb3Bkb3duTWVudSIsInF1ZXJ5U2VsZWN0b3IiLCJ0b2dnbGVBbmNlc3RvckFjdGl2ZVN0YXRlIiwiY2hpbGQiLCJjbGFzc05hbWUiLCJhbmNlc3RvciIsInBhcmVudE5vZGUiLCJjb250YWlucyIsInRvZ2dsZXIiLCJhcmlhRXhwYW5kZWRTdGF0ZSIsInNldEF0dHJpYnV0ZSIsIkFjY29yZGlvbiIsIm1haW5Db250YWluZXIiLCJkcm9wZG93bnMiLCJhZGQiLCJjbGlja2VkVG9nZ2xlciIsImRyb3BEb3duQ29udGVudCIsImtleXMiLCJkaXJlY3Rpb24iLCIzNyIsIjM4IiwiMzkiLCI0MCIsIlRhYnMiLCJpbml0QWxsVGFicyIsImFsbFRhYnMiLCJpbml0IiwidGFic0VsZW1lbnQiLCJ0YWJsaXN0IiwidGFicyIsInRhYkxpc3RJdGVtcyIsImZpcnN0VGFiIiwibGFzdFRhYiIsInBhbmVscyIsImluaXRUYWIiLCJ0YWIiLCJpbmRleCIsInBhbmVsSWQiLCJoYXNoIiwiaWQiLCJwYW5lbCIsImluaXRQYW5lbCIsInJvbGUiLCJ0YWJpbmRleCIsImNsaWNrRXZlbnRMaXN0ZW5lciIsImtleWRvd25FdmVudExpc3RlbmVyIiwia2V5dXBFdmVudExpc3RlbmVyIiwiaGlkZGVuIiwicHJldmVudERlZmF1bHQiLCJhY3RpdmF0ZVRhYiIsImtleUNvZGUiLCJmb2N1c0xhc3RUYWIiLCJmb2N1c0ZpcnN0VGFiIiwiZGV0ZXJtaW5lT3JpZW50YXRpb24iLCJwcm9jZWVkIiwic3dpdGNoVGFiT25BcnJvd1ByZXNzIiwicHJlc3NlZCIsInVuZGVmaW5lZCIsImZvY3VzIiwic2V0Rm9jdXMiLCJkZWFjdGl2YXRlVGFicyIsInJlbW92ZUF0dHJpYnV0ZSIsInJlbW92ZSIsIk1vZGFsIiwicm9vdEVsIiwiZG9jdW1lbnRFbGVtZW50IiwiJG1vZGFscyIsIiRtb2RhbEJ1dHRvbnMiLCIkbW9kYWxDbG9zZXMiLCJmb3JFYWNoIiwiYnV0dG9uIiwibW9kYWwiLCJvcGVuaW5nQnV0dG9uIiwiaXNPcGVuZWQiLCJvcGVuTW9kYWwiLCJjbG9zZU1vZGFscyIsImZvY3VzYWJsZUVsZW1lbnRzIiwiZmlyc3QiLCJsYXN0IiwiZSIsImhhbmRsZU1vZGFsVGFiYmluZyIsInNoaWZ0S2V5IiwiYWN0aXZlRWxlbWVudCIsIk1lc3NhZ2UiLCJpbml0TWVzc2FnZXMiLCJtZXNzYWdlRWxlbWVudCIsImRlbGV0ZUJ1dHRvbiIsIm1lc3NhZ2UiLCJmb2N1c1RvIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwidGFiSW5kZXgiLCJtZXNzYWdlcyIsImluaXRNZXNzYWdlIiwiaGxqcyIsInJlZ2lzdGVyTGFuZ3VhZ2UiLCJqYXZhc2NyaXB0Iiwic2NzcyIsImNvbXBvbmVudHMiLCJpbml0RG9jdW1lbnRhdGlvbiIsInBhdGhuYW1lIiwibG9jYXRpb24iLCJzbHVnIiwiY29tcG9uZW50IiwiaW5jbHVkZXMiLCJkb2NDb250YWluZXIiLCJpbm5lckhUTUwiLCJibG9jayIsIndyYXBwZXIiLCJjcmVhdGVFbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJoaWdobGlnaHRCbG9jayIsImJvaWxlcnBsYXRlIiwibmF2YmFyIiwiYWNjb3JkaW9uIl0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBQ25CSyxFQUFpQkwsRUFBSyxHQUlITSxFQUFJLEVBQUdDLEVBQVcsR0FDcENELEVBQUlILEVBQVNLLE9BQVFGLElBQ3pCSixFQUFVQyxFQUFTRyxHQUNoQkcsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBaUJYLElBQVlXLEVBQWdCWCxJQUNwRkssRUFBU08sS0FBS0QsRUFBZ0JYLEdBQVMsSUFFeENXLEVBQWdCWCxHQUFXLEVBRTVCLElBQUlELEtBQVlHLEVBQ1pLLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtSLEVBQWFILEtBQ3BEYyxFQUFRZCxHQUFZRyxFQUFZSCxJQUtsQyxJQUZHZSxHQUFxQkEsRUFBb0JoQixHQUV0Q08sRUFBU0MsUUFDZEQsRUFBU1UsT0FBVFYsR0FPRCxPQUhBVyxFQUFnQkosS0FBS0ssTUFBTUQsRUFBaUJiLEdBQWtCLElBR3ZEZSxJQUVSLFNBQVNBLElBRVIsSUFEQSxJQUFJQyxFQUNJZixFQUFJLEVBQUdBLEVBQUlZLEVBQWdCVixPQUFRRixJQUFLLENBRy9DLElBRkEsSUFBSWdCLEVBQWlC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Z0NDbkNyQyxDQVhtQixDQUNmTSxZQUFhLElBQUl4SSxFQUNqQnlJLE9BQVEsSUFBSWhJLEVBQ1ppSSxVQUFXLElBQUl2RyxFQUNma0IsS0FBTSxJQUFJTixFQUNWZ0QsTUFBTyxJQUFJUixFQUNYd0IsUUFBUyxJQUFJSiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzMsMV0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGgyIGlkPVxcXCJjb21wb25lbnQtZG9jdW1lbnRhdGlvblxcXCI+Q29tcG9uZW50IGRvY3VtZW50YXRpb248L2gyPlxcbjxwPjxlbT5BZGQgY29tcG9uZW50IHNwZWNpZmljIGRvY3VtZW50YXRpb24gaGVyZS48L2VtPjwvcD5cXG48aDMgaWQ9XFxcImh0bWxcXFwiPkhUTUw8L2gzPlxcbjxwPjxlbT5Eb2N1bWVudCBIVE1MICBtYXJrdXAgaGVyZSBhbmQgYWRkIHRoZSBjb2RlIGJsb2NrIGZvciBlYXN5IGNvcHktcGFzdGluZy48L2VtPjwvcD5cXG48cHJlPjxjb2RlPiZsdDtidXR0b24gY2xhc3M9JnF1b3Q7YnV0dG9uIGJ1dHRvbi0tYm9pbGVycGxhdGUmcXVvdDsmZ3Q7Qm9pbGVycGxhdGUmbHQ7L2J1dHRvbiZndDs8L2NvZGU+PC9wcmU+PGgzIGlkPVxcXCJqYXZhc2NyaXB0XFxcIj5KYXZhU2NyaXB0PC9oMz5cXG48cD48ZW0+RG9jdW1lbnQgSmF2YVNjcmlwdCBtYXJrdXAgaGVyZSBhbmQgYWRkIHRoZSBjb2RlIGJsb2NrIGZvciBlYXN5IGNvcHktcGFzdGluZy48L2VtPjwvcD5cXG48cHJlPjxjb2RlPmNvbnN0IHNvbWV0aGluZyA9IDEyMzs8L2NvZGU+PC9wcmU+PGgzIGlkPVxcXCJzY3NzXFxcIj5TQ1NTPC9oMz5cXG48cD48ZW0+RG9jdW1lbnQgU0NTUyBtYXJrdXAgaGVyZSBhbmQgYWRkIHRoZSBjb2RlIGJsb2NrIGZvciBlYXN5IGNvcHktcGFzdGluZy48L2VtPjwvcD5cXG48cHJlPjxjb2RlPi5idXR0b24tLWJvaWxlcnBsYXRlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG59PC9jb2RlPjwvcHJlPlwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8aDIgaWQ9XFxcIm5hdmJhci1jb21wb25lbnRcXFwiPk5hdmJhciBjb21wb25lbnQ8L2gyPlxcbjxwPlRoaXMgY29tcG9uZW50IHByb3ZpZGVzIGEgZnVsbHkgZnVuY3Rpb25hbCBuYXZiYXIgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBCdWxtYSBuYXZiYXIgY29tcG9uZW50LjwvcD5cXG48aDMgaWQ9XFxcImh0bWxcXFwiPkhUTUw8L2gzPlxcbjxwPlRoZSBCdWxtYWxseSBuYXZiYXIgZm9sbG93cyB0aGUgQnVsbWEgbmF2YmFyIG1hcmt1cCB3aXRoIHNvbWUgZXhjZXB0aW9ucy4gSG92ZXJhYmxlIGRyb3Bkb3ducyBhcmUgbm90IGFjY2Vzc2libGUsIHRoYXQgaXMgd2h5IHdlIGRvIG5vdCBzdXBwb3J0IHRoZW0uIEluc3RlYWQsIHdlIHByb3ZpZGUgYW4gYWNjZXNzaWJsZSBtYXJrdXAgZm9yIGNvbnRyb2xsaW5nIGEgZHJvcGRvd24gbWVudSB3aXRoaW4gdGhlIG5hdmJhci48L3A+XFxuPHA+VGhlIEJ1bG1hIGRvY3VtZW50YXRpb24gdXNlcyBhIGxpbmsgYXMgdGhlIGRyb3Bkb3duIHRvZ2dsZXIuIFRoaXMgaXMgYmFkIHByYWN0aWNlLCBpdCBzaG91bGQgYmUgYSBidXR0b24uIEJ1bG1hbGx5IGRyb3Bkb3duIHRvZ2dsZXIgY2FuIGJlIGFuIGFjdHVhbCBsaW5rIGl0c2VsZi4gVGhpcyBpcyBkb25lIGJ5IGFkZGluZyBhIGNvbnRhaW5lciB0aGF0IGhvbGRzIHRoZSBsaW5rIGFuZCBhIGJ1dHRvbiBmb3IgdG9nZ2xpbmcgdGhlIGRyb3Bkb3duIG1lbnUuIFRoaXMgbWFrZXMgdGhlIGxpbmsgYWNjZXNzaWJsZSBhbmQgdXNlcyBzZW1hbnRpYyBIVE1MIGVsZW1lbnQgZm9yIHRoZSB0b2dnbGVyOiBhIGJ1dHRvbi4gVGhlIGJ1dHRvbiBoYXMgYSBzY3JlZW4gcmVhZGVyIG9ubHkgdGV4dCBhbmQgYSBkb3duIGFycm93IGZvciBzaWdodGVkIHVzYWdlLjwvcD5cXG48cHJlPjxjb2RlPiZsdDtuYXYgY2xhc3M9JnF1b3Q7bmF2YmFyIGJ1bG1hbGx5LW5hdmJhciZxdW90OyByb2xlPSZxdW90O25hdmlnYXRpb24mcXVvdDsgYXJpYS1sYWJlbD0mcXVvdDttYWluIG5hdmlnYXRpb24mcXVvdDsmZ3Q7XFxuICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7bmF2YmFyLWJyYW5kJnF1b3Q7Jmd0O1xcbiAgICAgICAgJmx0O2EgY2xhc3M9JnF1b3Q7bmF2YmFyLWl0ZW0mcXVvdDsgaHJlZj0mcXVvdDsjJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICZsdDtzcGFuIGNsYXNzPSZxdW90O2lzLXNyLW9ubHkmcXVvdDsmZ3Q7SG9tZSZsdDsvc3BhbiZndDtcXG4gICAgICAgICAgICAmbHQ7aW1nIHNyYz0mcXVvdDtodHRwczovL2J1bG1hLmlvL2ltYWdlcy9idWxtYS1sb2dvLnBuZyZxdW90OyB3aWR0aD0mcXVvdDsxMTImcXVvdDsgaGVpZ2h0PSZxdW90OzI4JnF1b3Q7IGFyaWEtaGlkZGVuPXRydWUmZ3Q7XFxuICAgICAgICAmbHQ7L2EmZ3Q7XFxuXFxuICAgICAgICAmbHQ7YnV0dG9uXFxuICAgICAgICAgICAgaWQ9JnF1b3Q7anMtbmF2YmFyLWJ1cmdlciZxdW90O1xcbiAgICAgICAgICAgIGNsYXNzPSZxdW90O25hdmJhci1idXJnZXIgYnVyZ2VyJnF1b3Q7XFxuICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0mcXVvdDtmYWxzZSZxdW90O1xcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9JnF1b3Q7T3BlbiBtZW51JnF1b3Q7XFxuICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0mcXVvdDtmYWxzZSZxdW90O1xcbiAgICAgICAgICAgIGFyaWEtY29udHJvbHM9JnF1b3Q7anMtbWVudSZxdW90OyZndDtcXG4gICAgICAgICAgICAmbHQ7c3BhbiBhcmlhLWhpZGRlbj0mcXVvdDt0cnVlJnF1b3Q7Jmd0OyZsdDsvc3BhbiZndDtcXG4gICAgICAgICAgICAmbHQ7c3BhbiBhcmlhLWhpZGRlbj0mcXVvdDt0cnVlJnF1b3Q7Jmd0OyZsdDsvc3BhbiZndDtcXG4gICAgICAgICAgICAmbHQ7c3BhbiBhcmlhLWhpZGRlbj0mcXVvdDt0cnVlJnF1b3Q7Jmd0OyZsdDsvc3BhbiZndDtcXG4gICAgICAgICZsdDsvYnV0dG9uJmd0O1xcbiAgICAmbHQ7L2RpdiZndDtcXG5cXG4gICAgJmx0O2RpdiBpZD0mcXVvdDtqcy1uYXZiYXItbWVudSZxdW90OyBjbGFzcz0mcXVvdDtuYXZiYXItbWVudSZxdW90OyZndDtcXG4gICAgICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7bmF2YmFyLXN0YXJ0JnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICZsdDthIGNsYXNzPSZxdW90O25hdmJhci1pdGVtJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICBIb21lXFxuICAgICAgICAgICAgJmx0Oy9hJmd0O1xcblxcbiAgICAgICAgICAgICZsdDthIGNsYXNzPSZxdW90O25hdmJhci1pdGVtJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICBEb2N1bWVudGF0aW9uXFxuICAgICAgICAgICAgJmx0Oy9hJmd0O1xcblxcbiAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7bmF2YmFyLWl0ZW0gaGFzLWRyb3Bkb3duIGxldmVsJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O25hdmJhci1kcm9wZG93bi1jb250cm9sJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0OyEtLSBUaGUgbGluayBpcyBjbGlja2FibGUuIC0tJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2EgY2xhc3M9JnF1b3Q7bmF2YmFyLWxpbmsgaXMtYXJyb3dsZXNzJnF1b3Q7IGhyZWY9JnF1b3Q7IyZxdW90OyZndDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3JlXFxuICAgICAgICAgICAgICAgICAgICAmbHQ7L2EmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAmbHQ7IS0tIFRoaXMgYnV0dG9uIGltcGxlbWVudHMgdGhlIGRyb3Bkb3duIHRvZ2dsZXIuIC0tJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2J1dHRvbiBjbGFzcz0mcXVvdDtkcm9wZG93bi10b2dnbGVyIGljb24mcXVvdDsgYXJpYS1leHBhbmRlZD1mYWxzZSBhcmlhLWNvbnRyb2xzPSZxdW90O2pzLW5hdmJhci1kcm9wZG93bi0xJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICZsdDtzcGFuIGNsYXNzPSZxdW90O2lzLXNyLW9ubHkmcXVvdDsmZ3Q7T3BlbiBtZW51Jmx0Oy9zcGFuJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICZsdDtpIGNsYXNzPSZxdW90O2Fycm93JnF1b3Q7IGFyaWEtaGlkZGVuPSZxdW90O3RydWUmcXVvdDsmZ3Q7Jmx0Oy9pJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0Oy9idXR0b24mZ3Q7XFxuICAgICAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcblxcbiAgICAgICAgICAgICAgICAmbHQ7IS0tXFxuICAgICAgICAgICAgICAgICAgICBCdWxtYSBkb2VzIG5vdCBoaWRlIGRyb3Bkb3duIG1lbnUgb24gdG91Y2guXFxuICAgICAgICAgICAgICAgICAgICBXZSBoaWRlIGl0IGhlcmUgd2l0aCB0aGUgbW9kaWZpZXIgY2xhc3MuXFxuICAgICAgICAgICAgICAgICAgICBUb2dnbGluZyBpcyBoYW5kbGVkIHdpdGggSlMuXFxuICAgICAgICAgICAgICAgIC0tJmd0O1xcbiAgICAgICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O25hdmJhci1kcm9wZG93biBpcy1oaWRkZW4tdG91Y2gmcXVvdDsgaWQ9JnF1b3Q7anMtbmF2YmFyLWRyb3Bkb3duLTEmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAmbHQ7YSBjbGFzcz0mcXVvdDtuYXZiYXItaXRlbSZxdW90OyZndDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBBYm91dFxcbiAgICAgICAgICAgICAgICAgICAgJmx0Oy9hJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2EgY2xhc3M9JnF1b3Q7bmF2YmFyLWl0ZW0mcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgSm9ic1xcbiAgICAgICAgICAgICAgICAgICAgJmx0Oy9hJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2EgY2xhc3M9JnF1b3Q7bmF2YmFyLWl0ZW0mcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdFxcbiAgICAgICAgICAgICAgICAgICAgJmx0Oy9hJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2hyIGNsYXNzPSZxdW90O25hdmJhci1kaXZpZGVyJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2EgY2xhc3M9JnF1b3Q7bmF2YmFyLWl0ZW0mcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVwb3J0IGFuIGlzc3VlXFxuICAgICAgICAgICAgICAgICAgICAmbHQ7L2EmZ3Q7XFxuICAgICAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgJmx0Oy9kaXYmZ3Q7XFxuXFxuICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O25hdmJhci1lbmQmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0mcXVvdDtuYXZiYXItaXRlbSZxdW90OyZndDtcXG4gICAgICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0mcXVvdDtidXR0b25zJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2EgY2xhc3M9JnF1b3Q7YnV0dG9uIGlzLXByaW1hcnkmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgJmx0O3N0cm9uZyZndDtTaWduIHVwJmx0Oy9zdHJvbmcmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAmbHQ7L2EmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAmbHQ7YSBjbGFzcz0mcXVvdDtidXR0b24gaXMtbGlnaHQmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nIGluXFxuICAgICAgICAgICAgICAgICAgICAmbHQ7L2EmZ3Q7XFxuICAgICAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgJmx0Oy9kaXYmZ3Q7XFxuICAgICZsdDsvZGl2Jmd0O1xcbiZsdDsvbmF2Jmd0OzwvY29kZT48L3ByZT48aDMgaWQ9XFxcImphdmFzY3JpcHRcXFwiPkphdmFTY3JpcHQ8L2gzPlxcbjxwPlRoaXMgSlMgaW1wbGVtZW50YXRpb24gaXMgd3JpdHRlbiBpbiBFUzYgYW5kIHVzZXMgVmFuaWxsYUpTIHRvIGNvbnRyb2wgdGhlIHN0YXRlcyBpbiB0aGUgRE9NLiBZb3UgbWF5IHVzZSBpdCBhcyBpdCBpcyBhbmQgdXNlIDxhIGhyZWY9XFxcImh0dHBzOi8vYmFiZWxqcy5pby9cXFwiPkJhYmVsPC9hPiB0byBtYWtlIGl0IGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggb2xkZXIgYnJvd3NlcnMuIElmIHlvdSBkbyBub3QgaGF2ZSBCYWJlbCBpbiB5b3VyIGVudmlyb25tZW50LCBpdCBzaG91bGQgYmUgcHJldHR5IHN0cmFpZ2h0Zm9yd2FyZCB0byBjb3B5IHRoZSByZXF1aXJlZCBwYXJ0cyBvZiB0aGlzIGNvZGUuPC9wPlxcbjxwcmU+PGNvZGU+LyoqXFxuICogQ2xhc3MgTmF2YmFyXFxuICovXFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2YmFyIHtcXG4gICAgLyoqXFxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHJ1biBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIG1vZHVsZSBpcyBpbXBvcnRlZCxcXG4gICAgICogYmVjYXVzZSBpdCBleHBvcnRzIGEgbmV3IGluc3RhbmNlIG9mIGl0c2VsZi5cXG4gICAgICovXFxuICAgIGNvbnN0cnVjdG9yKCkge1xcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcXG4gICAgICAgICAgICAmIzM5O0RPTUNvbnRlbnRMb2FkZWQmIzM5OyxcXG4gICAgICAgICAgICAoKSA9Jmd0OyB7XFxuICAgICAgICAgICAgICAgIHRoaXMuZG9jUmVhZHkoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICApO1xcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBDYWNoZSBkb20gZWxlbWVudHMgZm9yIHVzZSBpbiB0aGUgY2xhc3MmIzM5O3MgbWV0aG9kc1xcbiAgICAgKi9cXG4gICAgY2FjaGUoKSB7XFxuICAgICAgICB0aGlzLm5hdmJhckJ1cmdlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAmIzM5O2pzLW5hdmJhci1idXJnZXImIzM5OyApO1xcbiAgICAgICAgdGhpcy5uYXZiYXJNZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICYjMzk7anMtbmF2YmFyLW1lbnUmIzM5OyApO1xcbiAgICAgICAgaWYgKCB0aGlzLm5hdmJhck1lbnUgKSB7XFxuICAgICAgICAgICAgdGhpcy5kcm9wZG93blRvZ2dsZXJzID0gdGhpcy5uYXZiYXJNZW51LnF1ZXJ5U2VsZWN0b3JBbGwoICYjMzk7LmRyb3Bkb3duLXRvZ2dsZXImIzM5OyApO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBBZGQgZXZlbnQgbGlzdGVuZXJzLlxcbiAgICAgKi9cXG4gICAgZXZlbnRzKCkge1xcbiAgICAgICAgaWYgKCB0aGlzLm5hdmJhckJ1cmdlciApIHtcXG4gICAgICAgICAgICB0aGlzLm5hdmJhckJ1cmdlci5hZGRFdmVudExpc3RlbmVyKCAmIzM5O2NsaWNrJiMzOTssICgpID0mZ3Q7IHRoaXMudG9nZ2xlTWVudSgpICk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAoIHRoaXMuZHJvcGRvd25Ub2dnbGVycyApIHtcXG4gICAgICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgJmx0OyB0aGlzLmRyb3Bkb3duVG9nZ2xlcnMubGVuZ3RoOyBpKysgKSB7XFxuICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd25Ub2dnbGVyc1sgaSBdLmFkZEV2ZW50TGlzdGVuZXIoICYjMzk7Y2xpY2smIzM5OywgKCBldmVudCApID0mZ3Q7IHRoaXMudG9nZ2xlRHJvcGRvd24oIGV2ZW50ICkgKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIEhhbmRsZSBtZW51IHRvZ2dsaW5nIHdoZW4gdGhlIG5hdmJhciBidXJnZXIgaXMgY2xpY2tlZC5cXG4gICAgICovXFxuICAgIHRvZ2dsZU1lbnUoKSB7XFxuICAgICAgICB0aGlzLm5hdmJhckJ1cmdlci5jbGFzc0xpc3QudG9nZ2xlKCAmIzM5O2lzLWFjdGl2ZSYjMzk7ICk7XFxuICAgICAgICB0aGlzLm5hdmJhck1lbnUuY2xhc3NMaXN0LnRvZ2dsZSggJiMzOTtpcy1hY3RpdmUmIzM5OyApO1xcbiAgICAgICAgdGhpcy50b2dnbGVBcmlhRXhwYW5kZWQoIHRoaXMubmF2YmFyQnVyZ2VyICk7XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIFRvZ2dsZXMgYSBkcm9wZG93biBtZW51IHZpc2liaWxpdHkuXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEEgY2xpY2sgZXZlbnQuXFxuICAgICAqL1xcbiAgICB0b2dnbGVEcm9wZG93biggZXZlbnQgKSB7XFxuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XFxuICAgICAgICBjb25zdCBjb250YWluZXJJZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoICYjMzk7YXJpYS1jb250cm9scyYjMzk7ICk7XFxuICAgICAgICBjb25zdCBkcm9wZG93bk1lbnUgPSB0aGlzLm5hdmJhck1lbnUucXVlcnlTZWxlY3RvciggYCMkeyBjb250YWluZXJJZCB9YCBcXHUwMDFkKTtcXG5cXG4gICAgICAgIHRoaXMudG9nZ2xlQXJpYUV4cGFuZGVkKCB0YXJnZXQgKTtcXG4gICAgICAgIGRyb3Bkb3duTWVudS5jbGFzc0xpc3QudG9nZ2xlKCAmIzM5O2lzLWhpZGRlbi10b3VjaCYjMzk7ICk7XFxuICAgICAgICB0aGlzLnRvZ2dsZUFuY2VzdG9yQWN0aXZlU3RhdGUoIHRhcmdldCwgJiMzOTtoYXMtZHJvcGRvd24mIzM5OyApO1xcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBTZXQgdGhlICYjMzk7aXMtYWN0aXZlJiMzOTsgc3RhdGUgZm9yIGFuIGFuY2VzdG9yIG9mIGFuIGVsZW1lbnRcXG4gICAgICogd2l0aCB0aGUgbWF0Y2hpbmcgY2xhc3MgbmFtZS5cXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2hpbGQgQSBjaGlsZCBlbGVtZW50IHRvIHN0YXJ0IHRoZSBzZWFyY2ggZnJvbS5cXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2xhc3NOYW1lIEEgdGFyZ2V0IGNsYXNzIG5hbWUgZm9yIHRoZSBhbmNlc3Rvci5cXG4gICAgICovXFxuICAgIHRvZ2dsZUFuY2VzdG9yQWN0aXZlU3RhdGUoIGNoaWxkLCBjbGFzc05hbWUgKSB7XFxuICAgICAgICBsZXQgYW5jZXN0b3IgPSBjaGlsZC5wYXJlbnROb2RlO1xcbiAgICAgICAgd2hpbGUgKCBhbmNlc3RvciApIHtcXG4gICAgICAgICAgICBpZiAoIGFuY2VzdG9yLmNsYXNzTGlzdC5jb250YWlucyggY2xhc3NOYW1lICkgKSB7XFxuICAgICAgICAgICAgICAgIGFuY2VzdG9yLmNsYXNzTGlzdC50b2dnbGUoICYjMzk7aXMtYWN0aXZlJiMzOTsgKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudE5vZGUgPyBhbmNlc3Rvci5wYXJlbnROb2RlIDogZmFsc2U7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIEdldCB0aGUgdG9nZ2xlciYjMzk7cyBhcmlhLWV4cGFuZGVkIGN1cnJlbnQgc3RhdGUgYW5kIHNldCBhIG5ldyBvcHBvc2l0ZSBzdGF0ZSB0byBpdC5cXG4gICAgICogQWxzbyBzZXQgdGhlIG9wZW5lZCBjb250YWluZXImIzM5O3MgYXJpYS1oaWRkZW4gc3RhdGUgdG8gdGhlIG5ldyB2YWx1ZSYjMzk7cyBvcHBvc2l0ZS5cXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdG9nZ2xlciBUaGUgdG9nZ2xlciBlbGVtZW50LlxcbiAgICAgKi9cXG4gICAgdG9nZ2xlQXJpYUV4cGFuZGVkKCB0b2dnbGVyICkge1xcbiAgICAgICAgY29uc3QgYXJpYUV4cGFuZGVkU3RhdGUgPSB0b2dnbGVyLmdldEF0dHJpYnV0ZSggJiMzOTthcmlhLWV4cGFuZGVkJiMzOTsgKSA9PT0gJiMzOTtmYWxzZSYjMzk7ID8gdHJ1ZSA6IGZhbHNlO1xcbiAgICAgICAgdG9nZ2xlci5zZXRBdHRyaWJ1dGUoICYjMzk7YXJpYS1leHBhbmRlZCYjMzk7LCBhcmlhRXhwYW5kZWRTdGF0ZSApO1xcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBSdW4gd2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuXFxuICAgICAqL1xcbiAgICBkb2NSZWFkeSgpIHtcXG4gICAgICAgIHRoaXMuY2FjaGUoKTtcXG4gICAgICAgIHRoaXMuZXZlbnRzKCk7XFxuICAgIH1cXG59PC9jb2RlPjwvcHJlPjxoMyBpZD1cXFwic2Nzc1xcXCI+U0NTUzwvaDM+XFxuPHA+V2UgdXNlIHRoZSBjb21wb25lbnQgY2xhc3MgbmFtZSBhcyB0aGUgQ1NTIHNjb3BlIGZvciBvdXIgbW9kaWZpY2F0aW9ucyBmb3IgdGhlIGJhc2ljIEJ1bG1hIENTUyBjb2RlLiBXZSBrZWVwIHRoZSBjaGFuZ2VzIHRvIGEgbWluaW11bSBhbmQgbW9zdCBvZiB0aGlzIGNvZGUgaXMgYXBwbGllZCB0byBzZXBhcmF0ZSB0aGUgZHJvcGRvd24gdG9nZ2xlciBmcm9tIHRoZSBtZW51IGxpbmsgY29udGFpbmluZyBhIGRyb3Bkb3duIG1lbnUuPC9wPlxcbjxwcmU+PGNvZGU+Ly8gVGhpcyBmaWxlIGNvbnRhaW5zIHN0eWxlcyBmb3IgdGhlIG5hdmJhciBjb21wb25lbnQuXFxuLmJ1bG1hbGx5LW5hdmJhciB7XFxuXFxuICAgIC8vIFJlc2V0IGFsbCBidXR0b25zIGluc2lkZSBhIG5hdmJhci5cXG4gICAgYnV0dG9uIHtcXG4gICAgICAgIGJhY2tncm91bmQ6IG5vbmU7XFxuICAgICAgICBib3JkZXI6IDA7XFxuICAgIH1cXG5cXG4gICAgLm5hdmJhci1idXJnZXIge1xcbiAgICAgICAgJmFtcDs6aG92ZXIge1xcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICRuYXZiYXItZHJvcGRvd24taXRlbS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5uYXZiYXItZHJvcGRvd24tY29udHJvbCB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICAgICAgICAubmF2YmFyLWxpbmsge1xcbiAgICAgICAgICAgIGZsZXg6IDEgMSBhdXRvO1xcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XFxuXFxuICAgICAgICAgICAgJmFtcDs6aG92ZXIge1xcbiAgICAgICAgICAgICAgICAvLyBUaGUgbGluayBiYWNrZ3JvdW5kIGlzIGNvbnRyb2xsZWQgb24gdGhlICYjMzk7Lmhhcy1kcm9wZG93biYjMzk7IGxldmVsLlxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAubmF2YmFyLWl0ZW0ge1xcbiAgICAgICAgJmFtcDsuaGFzLWRyb3Bkb3duIHtcXG4gICAgICAgICAgICAmYW1wOzpob3ZlcixcXG4gICAgICAgICAgICAmYW1wOy5pcy1hY3RpdmUge1xcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbmF2YmFyLWl0ZW0taG92ZXItYmFja2dyb3VuZC1jb2xvcjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLmRyb3Bkb3duLXRvZ2dsZXIge1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyAvLyBNYWtlIHRoZSBhcnJvdyBzdGljayB0byB0aGUgYnV0dG9uLlxcbiAgICAgICAgZmxleDogMCAwIGF1dG87XFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IC43NXJlbTtcXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAkc3BlZWQgJGVhc2luZztcXG5cXG4gICAgICAgICZhbXA7W2FyaWEtZXhwYW5kZWQ9JnF1b3Q7dHJ1ZSZxdW90O10ge1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAuYXJyb3cge1xcbiAgICAgICAgICAgIEBleHRlbmQgJWFycm93O1xcbiAgICAgICAgICAgIHdpZHRoOiAuNzVyZW07XFxuICAgICAgICAgICAgaGVpZ2h0OiAuNzVyZW07XFxuICAgICAgICAgICAgbWFyZ2luLXRvcDogLS41cmVtO1xcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJG5hdmJhci1kcm9wZG93bi1hcnJvdztcXG4gICAgICAgIH1cXG4gICAgfVxcbn08L2NvZGU+PC9wcmU+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxoMiBpZD1cXFwiYWNjb3JkaW9uLWNvbXBvbmVudFxcXCI+QWNjb3JkaW9uIGNvbXBvbmVudDwvaDI+XFxuPHA+VGhpcyBjb21wb25lbnQgcHJvdmlkZXMgYW4gYWNjb3JkaW9uIGZ1bmN0aW9uYWxpdHkgd2l0aCBhZGRlZCBhY2Nlc3NpYmxlIEpTIGltcGxlbWVudGF0aW9uLjwvcD5cXG48aDMgaWQ9XFxcImh0bWxcXFwiPkhUTUw8L2gzPlxcbjxwPlRoZSBCdWxtYWxseSBhY2NvcmRpb24mIzM5O3MgdGl0bGVzIGFyZSBpbnNpZGUgYSBidXR0b24gc28gdGhhdCB0aGV5IGFyZSBmb2N1c2FibGUgYW5kIGNsaWNrYWJsZS48L3A+XFxuPHByZT48Y29kZT4mbHQ7ZGl2IGlkPSZxdW90O2pzLWJ1bG1hbGx5LWFjY29yZGlvbiZxdW90OyBjbGFzcz0mcXVvdDtidWxtYWxseS1hY2NvcmRpb24mcXVvdDsmZ3Q7XFxuICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7Y29sdW1ucyBpcy1tdWx0aWxpbmUmcXVvdDsmZ3Q7XFxuXFxuICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O2NvbHVtbiBpcy0xMC10YWJsZXQgaXMtb2Zmc2V0LTEtdGFibGV0IGlzLTgtZGVza3RvcCBpcy1vZmZzZXQtMi1kZXNrdG9wJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7YWNjb3JkaW9uLXJvdyBib3gmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICZsdDtoMyBjbGFzcz0mcXVvdDtoNCBhY2NvcmRpb24tdGl0bGUmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAmbHQ7IS0tIFRoaXMgY29udHJvbHMgdGhlIHNlY3Rpb24uIFRvZ2dsaW5nIHRoZSBzdGF0ZSBpcyBkb25lIHdpdGggSlMgLS0mZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAmbHQ7YnV0dG9uXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9JnF1b3Q7YWNjb3JkaW9uLXRpdGxlLWJ1dHRvbi0xJnF1b3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9JnF1b3Q7YWNjb3JkaW9uLXRpdGxlLWJ1dHRvbiZxdW90O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9JnF1b3Q7ZmFsc2UmcXVvdDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSZxdW90O2FjY29yZGlvbi1jb250ZW50LTEmcXVvdDsmZ3Q7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0mcXVvdDtsZXZlbCBpcy1tb2JpbGUmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7bGV2ZWwtbGVmdCBjYW4tc2hyaW5rJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmx0O3NwYW4gY2xhc3M9JnF1b3Q7bGV2ZWwtaXRlbSBjYW4tc2hyaW5rIGFjY29yZGlvbi10aXRsZS10ZXh0JnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaGVhZGluZyBpcyBjbGlja2FibGVcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZsdDsvc3BhbiZndDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJmx0Oy9kaXYmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7bGV2ZWwtcmlnaHQmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbHQ7c3BhbiBjbGFzcz0mcXVvdDtsZXZlbC1pdGVtIGljb24gYWNjb3JkaW9uLXRpdGxlLWljb24mcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmx0O2kgY2xhc3M9JnF1b3Q7ZmFzIGZhLWFuZ2xlLWRvd24mcXVvdDsgYXJpYS1oaWRkZW49JnF1b3Q7dHJ1ZSZxdW90OyZndDsmbHQ7L2kmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbHQ7L3NwYW4mZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0Oy9idXR0b24mZ3Q7XFxuICAgICAgICAgICAgICAgICZsdDsvaDMmZ3Q7XFxuXFxuICAgICAgICAgICAgICAgICZsdDshLS0gVGhlIElEIG9mIHRoaXMgZWxlbWVudCBoYXMgdG8gYmUgZHluYW1pY2FsbHkgYWRkZWQuIC0tJmd0O1xcbiAgICAgICAgICAgICAgICAmbHQ7ZGl2IGlkPSZxdW90O2FjY29yZGlvbi1jb250ZW50LTEmcXVvdDsgY2xhc3M9JnF1b3Q7YWNjb3JkaW9uLWNvbnRlbnQmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O2NvbnRlbnQgaXMtc21hbGwmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgJmx0O3AmZ3Q7TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gQXNwZXJuYXR1ciwgcXVpc3F1YW0gbW9sZXN0aWFzLiBRdWFlcmF0IG1vbGVzdGlhZSBuYW0sIGV4cGxpY2FibyBxdW8gbmlzaSBjb3Jwb3JpcyEgQmxhbmRpdGlpcyBxdWFtIHF1aWJ1c2RhbSwgZmFjaWxpcyBuaWhpbCBvZGlvIG5pc2kgaXVzdG8gaXBzYSBsYWJvcnVtIG5lcXVlIGZ1Z2l0LiZsdDsvcCZndDtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAmbHQ7aDMmZ3Q7TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXImbHQ7L2gzJmd0O1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICZsdDtwJmd0O0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEFzcGVybmF0dXIsIHF1aXNxdWFtIG1vbGVzdGlhcy4gUXVhZXJhdCBtb2xlc3RpYWUgbmFtLCBleHBsaWNhYm8gcXVvIG5pc2kgY29ycG9yaXMhIEJsYW5kaXRpaXMgcXVhbSBxdWlidXNkYW0sIGZhY2lsaXMgbmloaWwgb2RpbyBuaXNpIGl1c3RvIGlwc2EgbGFib3J1bSBuZXF1ZSBmdWdpdC4mbHQ7L3AmZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAmbHQ7L2RpdiZndDtcXG4gICAgICAgICAgICAgICAgJmx0Oy9kaXYmZ3Q7XFxuICAgICAgICAgICAgJmx0Oy9kaXYmZ3Q7XFxuICAgICAgICAmbHQ7L2RpdiZndDtcXG5cXG4gICAgICAgICZsdDshLS0gTmV4dCBhY2NvcmRpb24gcm93IC0tJmd0O1xcblxcbiAgICAgICAgJmx0O2RpdiBjbGFzcz0mcXVvdDtjb2x1bW4gaXMtMTAtdGFibGV0IGlzLW9mZnNldC0xLXRhYmxldCBpcy04LWRlc2t0b3AgaXMtb2Zmc2V0LTItZGVza3RvcCZxdW90OyZndDtcXG4gICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O2FjY29yZGlvbi1yb3cgYm94JnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAmbHQ7aDMgY2xhc3M9JnF1b3Q7aDQgYWNjb3JkaW9uLXRpdGxlJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0OyEtLSBUaGlzIGNvbnRyb2xzIHRoZSBzZWN0aW9uLiBUb2dnbGluZyB0aGUgc3RhdGUgaXMgZG9uZSB3aXRoIEpTIC0tJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2J1dHRvblxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPSZxdW90O2FjY29yZGlvbi10aXRsZS1idXR0b24tMSZxdW90O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSZxdW90O2FjY29yZGlvbi10aXRsZS1idXR0b24mcXVvdDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSZxdW90O2ZhbHNlJnF1b3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0mcXVvdDthY2NvcmRpb24tY29udGVudC0xJnF1b3Q7Jmd0O1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7bGV2ZWwgaXMtbW9iaWxlJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O2xldmVsLWxlZnQgY2FuLXNocmluayZxdW90OyZndDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZsdDtzcGFuIGNsYXNzPSZxdW90O2xldmVsLWl0ZW0gY2FuLXNocmluayBhY2NvcmRpb24tdGl0bGUtdGV4dCZxdW90OyZndDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGhlYWRpbmcgaXMgY2xpY2thYmxlXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbHQ7L3NwYW4mZ3Q7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O2xldmVsLXJpZ2h0JnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmx0O3NwYW4gY2xhc3M9JnF1b3Q7bGV2ZWwtaXRlbSBpY29uIGFjY29yZGlvbi10aXRsZS1pY29uJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZsdDtpIGNsYXNzPSZxdW90O2ZhcyBmYS1hbmdsZS1kb3duJnF1b3Q7IGFyaWEtaGlkZGVuPSZxdW90O3RydWUmcXVvdDsmZ3Q7Jmx0Oy9pJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmx0Oy9zcGFuJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbHQ7L2RpdiZndDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAmbHQ7L2RpdiZndDtcXG4gICAgICAgICAgICAgICAgICAgICZsdDsvYnV0dG9uJmd0O1xcbiAgICAgICAgICAgICAgICAmbHQ7L2gzJmd0O1xcblxcbiAgICAgICAgICAgICAgICAmbHQ7IS0tIFRoZSBJRCBvZiB0aGlzIGVsZW1lbnQgaGFzIHRvIGJlIGR5bmFtaWNhbGx5IGFkZGVkLiAtLSZndDtcXG4gICAgICAgICAgICAgICAgJmx0O2RpdiBpZD0mcXVvdDthY2NvcmRpb24tY29udGVudC0xJnF1b3Q7IGNsYXNzPSZxdW90O2FjY29yZGlvbi1jb250ZW50JnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0O2RpdiBjbGFzcz0mcXVvdDtjb250ZW50IGlzLXNtYWxsJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICZsdDtwJmd0O0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEFzcGVybmF0dXIsIHF1aXNxdWFtIG1vbGVzdGlhcy4gUXVhZXJhdCBtb2xlc3RpYWUgbmFtLCBleHBsaWNhYm8gcXVvIG5pc2kgY29ycG9yaXMhIEJsYW5kaXRpaXMgcXVhbSBxdWlidXNkYW0sIGZhY2lsaXMgbmloaWwgb2RpbyBuaXNpIGl1c3RvIGlwc2EgbGFib3J1bSBuZXF1ZSBmdWdpdC4mbHQ7L3AmZ3Q7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgJmx0O2gzJmd0O0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyJmx0Oy9oMyZndDtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAmbHQ7cCZndDtMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBBc3Blcm5hdHVyLCBxdWlzcXVhbSBtb2xlc3RpYXMuIFF1YWVyYXQgbW9sZXN0aWFlIG5hbSwgZXhwbGljYWJvIHF1byBuaXNpIGNvcnBvcmlzISBCbGFuZGl0aWlzIHF1YW0gcXVpYnVzZGFtLCBmYWNpbGlzIG5paGlsIG9kaW8gbmlzaSBpdXN0byBpcHNhIGxhYm9ydW0gbmVxdWUgZnVnaXQuJmx0Oy9wJmd0O1xcbiAgICAgICAgICAgICAgICAgICAgJmx0Oy9kaXYmZ3Q7XFxuICAgICAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgJmx0Oy9kaXYmZ3Q7XFxuXFxuICAgICZsdDsvZGl2Jmd0O1xcbiZsdDsvZGl2Jmd0OzwvY29kZT48L3ByZT48aDMgaWQ9XFxcImphdmFzY3JpcHRcXFwiPkphdmFTY3JpcHQ8L2gzPlxcbjxwPlRoaXMgSlMgaW1wbGVtZW50YXRpb24gaXMgd3JpdHRlbiBpbiBFUzYgYW5kIHVzZXMgVmFuaWxsYUpTIHRvIGNvbnRyb2wgdGhlIHN0YXRlcyBpbiB0aGUgRE9NLiBZb3UgbWF5IHVzZSBpdCBhcyBpdCBpcyBhbmQgdXNlIDxhIGhyZWY9XFxcImh0dHBzOi8vYmFiZWxqcy5pby9cXFwiPkJhYmVsPC9hPiB0byBtYWtlIGl0IGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggb2xkZXIgYnJvd3NlcnMuIElmIHlvdSBkbyBub3QgaGF2ZSBCYWJlbCBpbiB5b3VyIGVudmlyb25tZW50LCBpdCBzaG91bGQgYmUgcHJldHR5IHN0cmFpZ2h0Zm9yd2FyZCB0byBjb3B5IHRoZSByZXF1aXJlZCBwYXJ0cyBvZiB0aGlzIGNvZGUuPC9wPlxcbjxwcmU+PGNvZGU+LyoqXFxuICogQWNjb3JkaW9uIEpTIGNvbnRyb2xsZXIuXFxuICovXFxuXFxuLyoqXFxuICogQ2xhc3MgQWNjb3JkaW9uXFxuICovXFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3JkaW9uIHtcXG4gICAgLyoqXFxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHJ1biB3aGVuIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjbGFzcyBpcyBjcmVhdGVkLlxcbiAgICAgKi9cXG4gICAgY29uc3RydWN0b3IoKSB7XFxuICAgICAgICAvLyBUaGlzIG11c3QgYmUgc2V0IGZvciBlYWNoIGNvbXBvbmVudC5cXG4gICAgICAgIHRoaXMuZG9jdW1lbnRhdGlvbiA9IHJlcXVpcmUoICYjMzk7Li9hY2NvcmRpb24ubWQmIzM5OyApO1xcblxcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcXG4gICAgICAgICAgICAmIzM5O0RPTUNvbnRlbnRMb2FkZWQmIzM5OyxcXG4gICAgICAgICAgICAoKSA9Jmd0OyB7XFxuICAgICAgICAgICAgICAgIHRoaXMuZG9jUmVhZHkoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICApO1xcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBDYWNoZSBkb20gZWxlbWVudHMgZm9yIHVzZSBpbiB0aGUgY2xhc3MmIzM5O3MgbWV0aG9kc1xcbiAgICAgKi9cXG4gICAgY2FjaGUoKSB7XFxuICAgICAgICB0aGlzLm1haW5Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJiMzOTtqcy1idWxtYWxseS1hY2NvcmRpb24mIzM5OyApO1xcblxcbiAgICAgICAgaWYgKCB0aGlzLm1haW5Db250YWluZXIgKSB7XFxuICAgICAgICAgICAgdGhpcy5kcm9wZG93blRvZ2dsZXJzID0gdGhpcy5tYWluQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoICYjMzk7LmFjY29yZGlvbi10aXRsZS1idXR0b24mIzM5OyApO1xcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25zID0gdGhpcy5tYWluQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoICYjMzk7LmFjY29yZGlvbi1jb250ZW50JiMzOTsgKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vIEhpZGUgYWxsIHRvZ2dsZWFibGUgZWxlbWVudHMgd2l0aCBKUy5cXG4gICAgICAgIGZvciAoIGxldCBpID0gMDsgaSAmbHQ7IHRoaXMuZHJvcGRvd25zLmxlbmd0aDsgaSsrICkge1xcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25zWyBpIF0uY2xhc3NMaXN0LmFkZCggJiMzOTtpcy1oaWRkZW4mIzM5OyApO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBBZGQgZXZlbnQgbGlzdGVuZXJzLlxcbiAgICAgKi9cXG4gICAgZXZlbnRzKCkge1xcbiAgICAgICAgaWYgKCB0aGlzLmRyb3Bkb3duVG9nZ2xlcnMgKSB7XFxuICAgICAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpICZsdDsgdGhpcy5kcm9wZG93blRvZ2dsZXJzLmxlbmd0aDsgaSsrICkge1xcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duVG9nZ2xlcnNbIGkgXS5hZGRFdmVudExpc3RlbmVyKCAmIzM5O2NsaWNrJiMzOTssICgpID0mZ3Q7IHRoaXMudG9nZ2xlRHJvcGRvd24oIHRoaXMuZHJvcGRvd25Ub2dnbGVyc1sgaSBdICkgKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIFRvZ2dsZXMgYSBkcm9wZG93biBjb250ZW50IHZpc2liaWxpdHkuXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7SFRNTEJ1dHRvbkVsZW1lbnR9IGNsaWNrZWRUb2dnbGVyIFRoZSB0b2dnbGVyIGJ1dHRvbiB0aGF0IHdhcyBjbGlja2VkLlxcbiAgICAgKi9cXG4gICAgdG9nZ2xlRHJvcGRvd24oIGNsaWNrZWRUb2dnbGVyICkge1xcbiAgICAgICAgY29uc3QgY29udGFpbmVySWQgPSBjbGlja2VkVG9nZ2xlci5nZXRBdHRyaWJ1dGUoICYjMzk7YXJpYS1jb250cm9scyYjMzk7ICk7XFxuICAgICAgICBjb25zdCBkcm9wRG93bkNvbnRlbnQgPSB0aGlzLm1haW5Db250YWluZXIucXVlcnlTZWxlY3RvciggYCMkeyBjb250YWluZXJJZCB9YCApO1xcblxcbiAgICAgICAgdGhpcy50b2dnbGVBcmlhRXhwYW5kZWQoIGNsaWNrZWRUb2dnbGVyICk7XFxuICAgICAgICBkcm9wRG93bkNvbnRlbnQuY2xhc3NMaXN0LnRvZ2dsZSggJiMzOTtpcy1oaWRkZW4mIzM5OyApO1xcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBHZXQgdGhlIHRvZ2dsZXImIzM5O3MgYXJpYS1leHBhbmRlZCBjdXJyZW50IHN0YXRlIGFuZCBzZXQgYSBuZXcgb3Bwb3NpdGUgc3RhdGUgdG8gaXQuXFxuICAgICAqIEFsc28gc2V0IHRoZSBvcGVuZWQgY29udGFpbmVyJiMzOTtzIGFyaWEtaGlkZGVuIHN0YXRlIHRvIHRoZSBuZXcgdmFsdWUmIzM5O3Mgb3Bwb3NpdGUuXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRvZ2dsZXIgVGhlIHRvZ2dsZXIgZWxlbWVudC5cXG4gICAgICovXFxuICAgIHRvZ2dsZUFyaWFFeHBhbmRlZCggdG9nZ2xlciApIHtcXG4gICAgICAgIGNvbnN0IGFyaWFFeHBhbmRlZFN0YXRlID0gdG9nZ2xlci5nZXRBdHRyaWJ1dGUoICYjMzk7YXJpYS1leHBhbmRlZCYjMzk7ICkgPT09ICYjMzk7ZmFsc2UmIzM5OyA/IHRydWUgOiBmYWxzZTtcXG4gICAgICAgIHRvZ2dsZXIuc2V0QXR0cmlidXRlKCAmIzM5O2FyaWEtZXhwYW5kZWQmIzM5OywgYXJpYUV4cGFuZGVkU3RhdGUgKTtcXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogUnVuIHdoZW4gdGhlIGRvY3VtZW50IGlzIHJlYWR5LlxcbiAgICAgKi9cXG4gICAgZG9jUmVhZHkoKSB7XFxuICAgICAgICB0aGlzLmNhY2hlKCk7XFxuICAgICAgICB0aGlzLmV2ZW50cygpO1xcbiAgICB9XFxufTwvY29kZT48L3ByZT48aDMgaWQ9XFxcInNjc3NcXFwiPlNDU1M8L2gzPlxcbjxwPldlIHVzZSB0aGUgY29tcG9uZW50IGNsYXNzIG5hbWUgYXMgdGhlIENTUyBzY29wZSBmb3Igb3VyIG1vZGlmaWNhdGlvbnMgdG8gdGhlIGJhc2ljIEJ1bG1hIENTUyBjb2RlLjwvcD5cXG48cHJlPjxjb2RlPi8vIFRoaXMgZmlsZSBjb250YWlucyBhbGwgc3R5bGVzIGZvciB0aGUgYWNjb3JkaW9uIGVsZW1lbnQuXFxuLmJ1bG1hbGx5LWFjY29yZGlvbiB7XFxuXFxuICAgIC5hY2NvcmRpb24tdGl0bGUtYnV0dG9uIHtcXG4gICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XFxuICAgICAgICBib3JkZXI6IDA7XFxuICAgICAgICBib3gtc2hhZG93OiBub25lO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuXFxuICAgICAgICAmYW1wO1thcmlhLWV4cGFuZGVkPSZxdW90O3RydWUmcXVvdDtdIHtcXG4gICAgICAgICAgICAuaWNvbiB7XFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0xODBkZWcpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAuYWNjb3JkaW9uLXRpdGxlLWljb24ge1xcbiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4ycyBlYXNlO1xcbiAgICB9XFxuXFxuICAgIC5hY2NvcmRpb24tY29udGVudCB7XFxuICAgICAgICBtYXJnaW4tdG9wOiAxLjI1cmVtO1xcbiAgICAgICAgcGFkZGluZy10b3A6IDEuMjVyZW07XFxuICAgICAgICBib3JkZXItdG9wOiAuMDYyNXJlbSBzb2xpZCAkZ3JleS1saWdodGVyO1xcbiAgICB9XFxuXFxuICAgIC5jYW4tc2hyaW5rIHtcXG4gICAgICAgIGZsZXgtc2hyaW5rOiAxO1xcbiAgICB9XFxufTwvY29kZT48L3ByZT5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGgyIGlkPVxcXCJ0YWJzXFxcIj5UYWJzPC9oMj5cXG48cD5UaGlzIGNvbXBvbmVudCBwcm92aWRlcyB0aGUgbmVlZGVkIEphdmFTY3JpcHQgZnVuY3Rpb25hbGl0aWVzIGZvciB0aGUgPGEgaHJlZj1cXFwiaHR0cHM6Ly9idWxtYS5pby9kb2N1bWVudGF0aW9uL2NvbXBvbmVudHMvdGFicy9cXFwiPkJ1bG1hIHRhYnM8L2E+LiBBY2Nlc3NpYmlsaXR5IGlzIGltcGxlbWVudGVkIHdpdGggSmF2YVNjcmlwdCBtYWtpbmcgdGhlIERPTSBhcyBzaW1wbGUgYXMgcG9zc2libGUuIFRoZXJlIGFyZSB0d28gdGFiIGVsZW1lbnRzIG9uIHRoaXMgcGFnZSB0byBkZW1vbnN0cmF0ZSB0aGF0IHlvdSBjYW4gaGF2ZSBtdWx0aXBsZSB0YWJzIG9uIHRoZSBzYW1lIHBhZ2UuIEFsbCBCdWxtYSB0YWIgc3R5bGVzIGFyZSBzdXBwb3J0ZWQuPC9wPlxcbjxoMyBpZD1cXFwiaHRtbFxcXCI+SFRNTDwvaDM+XFxuPHA+QnVsbWEgdXNlcyBidXR0b25zIGFzIHRhYnMuIFdlIHVzZSBhbmNob3IgbGlua3MgaW5zdGVhZC4gVGhpcyBtYWtlcyB0YWJzIGFjY2Vzc2libGUgZXZlbiBpZiBKYXZhU2NyaXB0IGlzIG5vdCBhdmFpbGFibGUuIEVhY2ggdGFiIGlzIGFuIGFuY2hvciBsaW5rIHRha2luZyB0aGUgdXNlciB0byB0aGUgY29ycmVzcG9uZGluZyB0YWIgcGFuZWwuIElmIEphdmFTY3JpcHQgaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZCwgYWxsIHRhYiBjb250YWluZXJzIGFyZSBxdWVyaWVkIGZyb20gdGhlIERPTSBhbmQgdGhlaXIgZnVuY3Rpb25hbGl0aWVzIGFyZSBpbml0aWFsaXplZCBvbiB0aGUgZG9jdW1lbnQgcmVhZHkgZXZlbnQuPC9wPlxcbjxoMyBpZD1cXFwicmVxdWlyZW1lbnRzXFxcIj5SZXF1aXJlbWVudHM8L2gzPlxcbjx1bD5cXG48bGk+QWRkIGEgY29udGFpbmVyIGZvciB0aGUgdGFicyBhbmQgdGhlIHBhbmVscyB3aXRoIGEgY2xhc3MgbmFtZWQgPGVtPiZxdW90O2J1bG1hbGx5LXRhYnMmcXVvdDs8L2VtPi48L2xpPlxcbjxsaT5UaGUgPGVtPmhyZWY8L2VtPiBhdHRyaWJ1dGUgb2YgdGhlIGxpbmsgbXVzdCBiZSB0aGUgaWQgb2YgdGhlIHRhYiBwYW5lbC4gVGhpcyBlbmFibGVzIGxpbmtpbmcgdGhlIHRhYiB0byB0aGUgcGFuZWwuPC9saT5cXG48bGk+VGhlIHRhYiBwYW5lbHMgc2hvdWxkIGJlIHBsYWNlZCBkaXJlY3RseSBhZnRlciB0aGUgdGFicyB0byBjcmVhdGUgYSBsb2dpY2FsIHRhYiBvcmRlci48L2xpPlxcbjwvdWw+XFxuPHByZT48Y29kZT4mbHQ7ZGl2IGNsYXNzPSZxdW90O2J1bG1hbGx5LXRhYnMmcXVvdDsmZ3Q7XFxuICAgICZsdDtkaXYgY2xhc3M9JnF1b3Q7dGFicyZxdW90OyZndDtcXG4gICAgICAgICZsdDt1bCBhcmlhLWxhYmVsPSZxdW90O0FkZCBhIGRlc2NyaXB0aW9uIGZvciB0aGUgdGFicyBoZXJlJnF1b3Q7Jmd0O1xcbiAgICAgICAgICAgICZsdDtsaSBjbGFzcz0mcXVvdDtpcy1hY3RpdmUmcXVvdDsmZ3Q7Jmx0O2EgaHJlZj0mcXVvdDsjZmlyc3QmcXVvdDsmZ3Q7Rmlyc3QmbHQ7L2EmZ3Q7Jmx0Oy9saSZndDtcXG4gICAgICAgICAgICAmbHQ7bGkmZ3Q7Jmx0O2EgaHJlZj0mcXVvdDsjc2Vjb25kJnF1b3Q7Jmd0O1NlY29uZCZsdDsvYSZndDsmbHQ7L2xpJmd0O1xcbiAgICAgICAgICAgICZsdDtsaSZndDsmbHQ7YSBocmVmPSZxdW90OyN0aGlyZCZxdW90OyZndDtUaGlyZCZsdDsvYSZndDsmbHQ7L2xpJmd0O1xcbiAgICAgICAgICAgICZsdDtsaSZndDsmbHQ7YSBocmVmPSZxdW90OyNmb3VydGgmcXVvdDsmZ3Q7Rm91cnRoJmx0Oy9hJmd0OyZsdDsvbGkmZ3Q7XFxuICAgICAgICAmbHQ7L3VsJmd0O1xcbiAgICAmbHQ7L2RpdiZndDtcXG5cXG4gICAgJmx0O2RpdiZndDtcXG4gICAgICAgICZsdDtkaXYgaWQ9JnF1b3Q7Zmlyc3QmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgJmx0O2gyJmd0O0ZpcnN0Jmx0Oy9oMiZndDtcXG4gICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgJmx0O2RpdiBpZD0mcXVvdDtzZWNvbmQmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgJmx0O2gyJmd0O1NlY29uZCZsdDsvaDImZ3Q7XFxuICAgICAgICAmbHQ7L2RpdiZndDtcXG4gICAgICAgICZsdDtkaXYgaWQ9JnF1b3Q7dGhpcmQmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgJmx0O2gyJmd0O1RoaXJkJmx0Oy9oMiZndDtcXG4gICAgICAgICZsdDsvZGl2Jmd0O1xcbiAgICAgICAgJmx0O2RpdiBpZD0mcXVvdDtmb3VydGgmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgJmx0O2gyJmd0O0ZvdXJ0aCZsdDsvaDImZ3Q7XFxuICAgICAgICAmbHQ7L2RpdiZndDtcXG4gICAgJmx0Oy9kaXYmZ3Q7XFxuXFxuJmx0Oy9kaXYmZ3Q7PC9jb2RlPjwvcHJlPjxoMyBpZD1cXFwic2Nzc1xcXCI+U0NTUzwvaDM+XFxuPHA+VGhlIG9ubHkgc3R5bGluZyByZXF1aXJlZCBpcyB0aGUgaGlkZGVuIHN0YXRlIG9mIHRoZSBwYW5lbHMuIFRoaXMgaXMgZG9uZSBieSB1c2luZyB0aGUgPGVtPiZxdW90O2hpZGRlbiZxdW90OzwvZW0+IGF0dHJpYnV0ZSBhcyB0aGUgQ1NTIHNlbGVjdG9yLjwvcD5cXG48cHJlPjxjb2RlPi5idWxtYWxseS10YWJzIHtcXG5cXG4gICAgJmFtcDstcGFuZWxbaGlkZGVuXSB7XFxuICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICB9XFxuXFxufTwvY29kZT48L3ByZT48aDMgaWQ9XFxcImphdmFzY3JpcHRcXFwiPkphdmFTY3JpcHQ8L2gzPlxcbjxwPkJ1bG1hbGx5IHRhYnMgaW1wbGVtZW50cyB0aGUgV0FJLUFSSUEgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLXByYWN0aWNlcy8jdGFicGFuZWxcXFwiPnRhYnMgZGVzaWduIHBhdHRlcm48L2E+LiBKYXZhU2NyaXB0IGNvZGUgaXMgYmFzZWQgb24gdGhlIFdBSS1BUklBIGV4YW1wbGUgZm9yIDxhIGhyZWY9XFxcIihodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL3RhYnMvdGFicy0yL3RhYnMuaHRtbClcXFwiPm1hbnVhbGx5IGFjdGl2YXRlZCB0YWJzPC9hPi4gVGhlIGltcGxlbWVudGF0aW9uIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXM6PC9wPlxcbjx1bD5cXG48bGk+VGFiIG5hdmlnYXRpb24gd2l0aCBhcnJvdyBrZXlzLjwvbGk+XFxuPGxpPlRhYiBwYW5lbCBhY3RpdmF0aW9uIGJ5IHByZXNzaW5nIGVudGVyIG9yIHNwYWNlIG9uIHRoZSBmb2N1c2VkIHRhYi48L2xpPlxcbjxsaT5UYWIgcGFuZWwgYWN0aXZhdGlvbiBvbiBtb3VzZSBjbGljayBldmVudC48L2xpPlxcbjxsaT5Gb2N1cyBoYW5kbGluZyBmb3IgYWxsIGludGVyYWN0aW9ucy48L2xpPlxcbjwvdWw+XFxuPHA+V2UgZXh0ZW5kZWQgdGhlIFdBSS1BUklBIGV4YW1wbGUgd2l0aCB0aGUgYWJpbGl0eSB0byBoYXZlIG11bHRpcGxlIHRhYiBlbGVtZW50cyBvbiB0aGUgc2FtZSBwYWdlLiBJZiB5b3UgY3JlYXRlIHRhYnMgZHluYW1pY2FsbHkgPGVtPihhZnRlciB0aGUgZG9jdW1lbnQgcmVhZHkgZXZlbnQpPC9lbT4sIHlvdSBjYW4gaW5pdGlhbGl6ZSB0aGVpciBhY2Nlc3NpYmlsaXR5IGZlYXR1cmVzIGJ5IHBhc3NpbmcgdGhlIEJ1bG1hbGx5IHRhYnMgZWxlbWVudCBjb250YWluZXIgZm9yIHRoZSA8ZW0+aW5pdCgpPC9lbT4gbWV0aG9kLiBZb3UgY2FuIGZpbmQgYW4gZXhhbXBsZSBvZiB0aGlzIGluIHRoZSA8ZW0+aW5pdEFsbFRhYnMoKTwvZW0+IG1ldGhvZCB0aGF0IGZpbmRzIGFuZCBpbml0aWFsaXplcyBhbGwgQnVsbWFsbHkgdGFiIGVsZW1lbnRzIG9uIHRoZSBkb2N1bWVudCByZWFkeSBldmVudC48L3A+XFxuPHByZT48Y29kZT4vLyBGb3IgZWFzeSByZWZlcmVuY2VcXG5jb25zdCBrZXlzID0ge1xcbiAgICBlbmQ6IDM1LFxcbiAgICBob21lOiAzNixcXG4gICAgbGVmdDogMzcsXFxuICAgIHVwOiAzOCxcXG4gICAgcmlnaHQ6IDM5LFxcbiAgICBkb3duOiA0MCxcXG4gICAgZW50ZXI6IDEzLFxcbiAgICBzcGFjZTogMzIsXFxufTtcXG5cXG4vLyBBZGQgb3Igc3VidHJhY3QgZGVwZW5kaW5nIG9uIGtleSBwcmVzc2VkXFxuY29uc3QgZGlyZWN0aW9uID0ge1xcbiAgICAzNzogLTEsXFxuICAgIDM4OiAtMSxcXG4gICAgMzk6IDEsXFxuICAgIDQwOiAxLFxcbn07XFxuXFxuLyoqXFxuICogQ2xhc3MgVGFic1xcbiAqL1xcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYnMge1xcbiAgICAvKipcXG4gICAgICogVGhpcyBtZXRob2QgaXMgcnVuIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGUgbW9kdWxlIGlzIGltcG9ydGVkLFxcbiAgICAgKiBiZWNhdXNlIGl0IGV4cG9ydHMgYSBuZXcgaW5zdGFuY2Ugb2YgaXRzZWxmLlxcbiAgICAgKi9cXG4gICAgY29uc3RydWN0b3IoKSB7XFxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxcbiAgICAgICAgICAgICYjMzk7RE9NQ29udGVudExvYWRlZCYjMzk7LFxcbiAgICAgICAgICAgICgpID0mZ3Q7IHtcXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0QWxsVGFicygpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICk7XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIEZpbmQgYWxsIHRhYiBlbGVtZW50cyBhbmQgaW5pdGlhbGl6ZSB0aGVpciBmdW5jdGlvbmFsaXRpZXMuXFxuICAgICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBydW4gb24gZG9jdW1lbnQgcmVhZHkgdG8gaW5pdGlhbGl6ZSBhbGxcXG4gICAgICogdGFicyBpbiB0aGUgRE9NIGFmdGVyIHRoZSBwYWdlIGlzIGxvYWRlZC5cXG4gICAgICovXFxuICAgIGluaXRBbGxUYWJzKCkge1xcbiAgICAgICAgdGhpcy5hbGxUYWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJiMzOTsuYnVsbWFsbHktdGFicyYjMzk7ICk7XFxuXFxuICAgICAgICBpZiAoICEgdGhpcy5hbGxUYWJzICkge1xcbiAgICAgICAgICAgIC8vIE5vIHRhYnMgZm91bmQuXFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpICZsdDsgdGhpcy5hbGxUYWJzLmxlbmd0aDsgaSsrICkge1xcbiAgICAgICAgICAgIHRoaXMuaW5pdCggdGhpcy5hbGxUYWJzWyBpIF0gKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogSW5pdGFsaXplIGEgc2luZ2xlIHRhYnMgZWxlbWVudC5cXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFic0VsZW1lbnQgQnVsbWFsbHkgdGFicyBjb250YWluZXIuXFxuICAgICAqL1xcbiAgICBpbml0KCB0YWJzRWxlbWVudCApIHtcXG4gICAgICAgIGNvbnN0IHRhYmxpc3QgPSB0YWJzRWxlbWVudC5xdWVyeVNlbGVjdG9yKCAmIzM5Oy5idWxtYWxseS10YWJzLXRhYmxpc3QmIzM5OyApO1xcbiAgICAgICAgY29uc3QgdGFicyA9IHRhYmxpc3QucXVlcnlTZWxlY3RvckFsbCggJiMzOTthJiMzOTsgKTtcXG4gICAgICAgIGNvbnN0IHRhYlBhbmVscyA9IHRhYnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICYjMzk7LmJ1bG1hbGx5LXRhYnMtcGFuZWwmIzM5OyApO1xcbiAgICAgICAgY29uc3QgdGFiTGlzdEl0ZW1zID0gdGFibGlzdC5xdWVyeVNlbGVjdG9yQWxsKCAmIzM5O2xpJiMzOTsgKTtcXG5cXG4gICAgICAgIC8vIFN0b3JlIHJlZmVyZW5jZXMgdG8gdGhlIGZpcnN0IGFuZCB0aGUgbGFzdCB0YWIgZm9yIGZvY3VzIG1hbmlwdWxhdGlvbnMuXFxuICAgICAgICAvLyBJbml0aWFsaXplIGFuIGFycmF5IGZvciBzdG9yaW5nIHJlZmVyZW5jZXMgdG8gYWxsIHRhYnMuXFxuICAgICAgICB0YWJsaXN0LmZpcnN0VGFiID0gdGFic1sgMCBdO1xcbiAgICAgICAgdGFibGlzdC5sYXN0VGFiID0gdGFic1sgdGFicy5sZW5ndGggLSAxIF07XFxuICAgICAgICB0YWJsaXN0LnRhYnMgPSBbXTtcXG4gICAgICAgIHRhYmxpc3QucGFuZWxzID0gW107XFxuXFxuICAgICAgICAvLyBUYWJzIG11c3QgYmUgaW5pdGlhbGl6ZWQgZmlyc3QuXFxuICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgJmx0OyB0YWJzLmxlbmd0aDsgaSsrICkge1xcbiAgICAgICAgICAgIHRoaXMuaW5pdFRhYiggdGFic1sgaSBdLCB0YWJsaXN0LCBpICk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBBZnRlciB0YWJzLCBpbml0YWxpemUgdGhlIGNvcnJlc3BvbmRpbmcgdGFicy5cXG4gICAgICAgIGZvciAoIGxldCBpID0gMDsgaSAmbHQ7IHRhYlBhbmVscy5sZW5ndGg7IGkrKyApIHtcXG4gICAgICAgICAgICB0aGlzLmluaXRQYW5lbCggdGFiUGFuZWxzWyBpIF0sIHRhYnNbIGkgXSwgdGFibGlzdCwgaSApO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpICZsdDsgdGFiTGlzdEl0ZW1zLmxlbmd0aDsgaSsrICkge1xcbiAgICAgICAgICAgIC8vIEFsbCAmbHQ7bGkmZ3Q7IGVsZW1lbnRzIG11c3QgaGF2ZSBhIHJvbGUgb2YgcHJlc2VudGF0aW9uLlxcbiAgICAgICAgICAgIHRhYkxpc3RJdGVtc1sgaSBdLnNldEF0dHJpYnV0ZSggJiMzOTtyb2xlJiMzOTssICYjMzk7cHJlc2VudGF0aW9uJiMzOTsgKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogSW5pdGlhbGl6ZSBmdW5jdGlvbmFsaXRpZXMgZm9yIGEgdGFiIGVsZW1lbnQuXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhYiBBIHRhYiBsaW5rLlxcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWJsaXN0IFRoZSB0YWJsaXN0IGVsZW1lbnQgZm9yIHRoZSB0YWIuXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgY3VycmVudCBlbGVtZW50IGluZGV4IGluIHRoZSB0YWIgbGlzdC5cXG4gICAgICovXFxuICAgIGluaXRUYWIoIHRhYiwgdGFibGlzdCwgaW5kZXggKSB7XFxuICAgICAgICBjb25zdCBwYW5lbElkID0gdGFiLmhhc2guc2xpY2UoIDEgKTtcXG5cXG4gICAgICAgIC8vIENyZWF0ZSBhIHVuaXF1ZSBpZCB1c2luZyB0aGUgdGFiIGxpbmsmIzM5O3MgaGFzaFxcbiAgICAgICAgdGFiLmlkID0gYHRhYi0keyBwYW5lbElkIH1gO1xcblxcbiAgICAgICAgLy8gTWFrZSBhIHR3by13YXkgcmVmZXJlbmNlIG9mIHRoZSB0YWIgYW5kIGl0cyB0YWJsaXN0LlxcbiAgICAgICAgdGFiLnRhYmxpc3QgPSB0YWJsaXN0O1xcbiAgICAgICAgdGFibGlzdC50YWJzWyBpbmRleCBdID0gdGFiO1xcblxcbiAgICAgICAgLy8gU3RvcmUgdGhlIGluZGV4LlxcbiAgICAgICAgdGFiLmluZGV4ID0gaW5kZXg7XFxuXFxuICAgICAgICB0YWIucGFuZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggcGFuZWxJZCApO1xcblxcbiAgICAgICAgdGFiLnJvbGUgPSAmIzM5O3RhYiYjMzk7O1xcbiAgICAgICAgdGFiLnNldEF0dHJpYnV0ZSggJiMzOTthcmlhLXNlbGVjdGVkJiMzOTssICYjMzk7ZmFsc2UmIzM5OyApO1xcbiAgICAgICAgdGFiLnNldEF0dHJpYnV0ZSggJiMzOTthcmlhLWNvbnRyb2xzJiMzOTssIHBhbmVsSWQgKTtcXG4gICAgICAgIHRhYi50YWJpbmRleCA9IC0xO1xcblxcbiAgICAgICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoICYjMzk7Y2xpY2smIzM5OywgKCBldmVudCApID0mZ3Q7IHRoaXMuY2xpY2tFdmVudExpc3RlbmVyKCBldmVudCApICk7XFxuICAgICAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lciggJiMzOTtrZXlkb3duJiMzOTssICggZXZlbnQgKSA9Jmd0OyB0aGlzLmtleWRvd25FdmVudExpc3RlbmVyKCBldmVudCApICk7XFxuICAgICAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lciggJiMzOTtrZXl1cCYjMzk7LCAoIGV2ZW50ICkgPSZndDsgdGhpcy5rZXl1cEV2ZW50TGlzdGVuZXIoIGV2ZW50ICkgKTtcXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogSW5pdGFsaXplIHBhbmVsIGZ1bmN0aW9uYWxpdGllcy5cXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFuZWwgVGhlIHBhbmVsIGVsZW1lbnQuXFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhYiBUaGUgY29ycmVzcG9uZGluZyB0YWIgZWxlbWVudC5cXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFibGlzdCBUaGUgdGFibGlzdCBlbGVtZW50IGZvciB0aGUgdGFiLlxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IGluIHBhbmVscy5cXG4gICAgICovXFxuICAgIGluaXRQYW5lbCggcGFuZWwsIHRhYiwgdGFibGlzdCwgaW5kZXggKSB7XFxuICAgICAgICBpZiAoIGluZGV4ICE9PSAwICkge1xcbiAgICAgICAgICAgIC8vIEhpZGUgYWxsIGJ1dCB0aGUgZmlyc3QgdGFiLlxcbiAgICAgICAgICAgIHBhbmVsLmhpZGRlbiA9IHRydWU7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBwYW5lbC5zZXRBdHRyaWJ1dGUoICYjMzk7dGFiaW5kZXgmIzM5OywgJiMzOTswJiMzOTsgKTtcXG4gICAgICAgIHBhbmVsLnNldEF0dHJpYnV0ZSggJiMzOTtyb2xlJiMzOTssICYjMzk7dGFicGFuZWwmIzM5OyApO1xcbiAgICAgICAgcGFuZWwuc2V0QXR0cmlidXRlKCAmIzM5O2FyaWEtbGFiZWxsZWRieSYjMzk7LCB0YWIuaWQgKTtcXG5cXG4gICAgICAgIC8vIFN0b3JlIGEgcmVmZXJlbmNlIGZvciB0aGUgdGFibGlzdC5cXG4gICAgICAgIHRhYmxpc3QucGFuZWxzLnB1c2goIHBhbmVsICk7XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIFdoZW4gYSB0YWIgaXMgY2xpY2tlZCwgYWN0aXZhdGVUYWIgaXMgZmlyZWQgdG8gYWN0aXZhdGUgaXRcXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxcbiAgICAgKi9cXG4gICAgY2xpY2tFdmVudExpc3RlbmVyKCBldmVudCApIHtcXG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgY2xpY2sgZXZlbnQuXFxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xcblxcbiAgICAgICAgY29uc3QgdGFiID0gZXZlbnQudGFyZ2V0O1xcbiAgICAgICAgdGhpcy5hY3RpdmF0ZVRhYiggdGFiLCBmYWxzZSApO1xcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBIYW5kbGUga2V5ZG93biBvbiB0YWJzXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEV2ZW50IG9iamVjdC5cXG4gICAgICovXFxuICAgIGtleWRvd25FdmVudExpc3RlbmVyKCBldmVudCApIHtcXG4gICAgICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleUNvZGU7XFxuICAgICAgICBjb25zdCB0YWJsaXN0ID0gZXZlbnQudGFyZ2V0LnRhYmxpc3Q7XFxuXFxuICAgICAgICBzd2l0Y2ggKCBrZXkgKSB7XFxuICAgICAgICBjYXNlIGtleXMuZW5kOlxcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XFxuICAgICAgICAgICAgLy8gQWN0aXZhdGUgbGFzdCB0YWJcXG4gICAgICAgICAgICB0aGlzLmZvY3VzTGFzdFRhYiggdGFibGlzdCApO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgY2FzZSBrZXlzLmhvbWU6XFxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcXG4gICAgICAgICAgICAvLyBBY3RpdmF0ZSBmaXJzdCB0YWJcXG4gICAgICAgICAgICB0aGlzLmZvY3VzRmlyc3RUYWIoIHRhYmxpc3QgKTtcXG4gICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgIC8vIFVwIGFuZCBkb3duIGFyZSBpbiBrZXlkb3duIHRvIHByZXZlbnQgcGFnZSBzY3JvbGwuXFxuICAgICAgICBjYXNlIGtleXMudXA6XFxuICAgICAgICBjYXNlIGtleXMuZG93bjpcXG4gICAgICAgICAgICB0aGlzLmRldGVybWluZU9yaWVudGF0aW9uKCBldmVudCApO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgY2FzZSBrZXlzLmVudGVyOlxcbiAgICAgICAgY2FzZSBrZXlzLnNwYWNlOlxcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XFxuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZVRhYiggZXZlbnQudGFyZ2V0LCB0cnVlICk7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIEhhbmRsZSBrZXl1cCBvbiB0YWJzXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEV2ZW50IG9iamVjdC5cXG4gICAgICovXFxuICAgIGtleXVwRXZlbnRMaXN0ZW5lciggZXZlbnQgKSB7XFxuICAgICAgICBjb25zdCBrZXkgPSBldmVudC5rZXlDb2RlO1xcblxcbiAgICAgICAgc3dpdGNoICgga2V5ICkge1xcbiAgICAgICAgY2FzZSBrZXlzLmxlZnQ6XFxuICAgICAgICBjYXNlIGtleXMucmlnaHQ6XFxuICAgICAgICAgICAgdGhpcy5kZXRlcm1pbmVPcmllbnRhdGlvbiggZXZlbnQgKTtcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogV2hlbiBhIHRhYmxpc3QmIzM5O3MgYXJpYS1vcmllbnRhdGlvbiBpcyBzZXQgdG8gdmVydGljYWwsXFxuICAgICAqIG9ubHkgdXAgYW5kIGRvd24gYXJyb3cgc2hvdWxkIGZ1bmN0aW9uLlxcbiAgICAgKiBvbmx5IHVwIGFuZCBkb3duIGFycm93IHNob3VsZCBmdW5jdGlvbi5cXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGV2ZW50IG9iamVjdC5cXG4gICAgICovXFxuICAgIGRldGVybWluZU9yaWVudGF0aW9uKCBldmVudCApIHtcXG4gICAgICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleUNvZGU7XFxuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IGV2ZW50LnRhcmdldC50YWJsaXN0LmdldEF0dHJpYnV0ZSggJiMzOTthcmlhLW9yaWVudGF0aW9uJiMzOTsgKSA9PT0gJiMzOTt2ZXJ0aWNhbCYjMzk7O1xcbiAgICAgICAgbGV0IHByb2NlZWQgPSBmYWxzZTtcXG5cXG4gICAgICAgIGlmICggdmVydGljYWwgKSB7XFxuICAgICAgICAgICAgaWYgKCBrZXkgPT09IGtleXMudXAgfHwga2V5ID09PSBrZXlzLmRvd24gKSB7XFxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XFxuICAgICAgICAgICAgICAgIHByb2NlZWQgPSB0cnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSBpZiAoIGtleSA9PT0ga2V5cy5sZWZ0IHx8IGtleSA9PT0ga2V5cy5yaWdodCApIHtcXG4gICAgICAgICAgICBwcm9jZWVkID0gdHJ1ZTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmICggcHJvY2VlZCApIHtcXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFRhYk9uQXJyb3dQcmVzcyggZXZlbnQgKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogRWl0aGVyIGZvY3VzIHRoZSBuZXh0LCBwcmV2aW91cywgZmlyc3QsIG9yIGxhc3QgdGFiXFxuICAgICAqIGRlcGVuZGluZyBvbiB0aGUga2V5IHByZXNzZWQuXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEV2ZW50IG9iamVjdC5cXG4gICAgICovXFxuICAgIHN3aXRjaFRhYk9uQXJyb3dQcmVzcyggZXZlbnQgKSB7XFxuICAgICAgICBjb25zdCBwcmVzc2VkID0gZXZlbnQua2V5Q29kZTtcXG5cXG4gICAgICAgIGlmICggZGlyZWN0aW9uWyBwcmVzc2VkIF0gKSB7XFxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xcbiAgICAgICAgICAgIGNvbnN0IHRhYmxpc3QgPSB0YXJnZXQudGFibGlzdDtcXG4gICAgICAgICAgICBjb25zdCB0YWJzID0gdGFibGlzdC50YWJzO1xcbiAgICAgICAgICAgIGlmICggdGFyZ2V0LmluZGV4ICE9PSB1bmRlZmluZWQgKSB7XFxuICAgICAgICAgICAgICAgIGlmICggdGFic1sgdGFyZ2V0LmluZGV4ICsgZGlyZWN0aW9uWyBwcmVzc2VkIF0gXSApIHtcXG4gICAgICAgICAgICAgICAgICAgIHRhYnNbIHRhcmdldC5pbmRleCArIGRpcmVjdGlvblsgcHJlc3NlZCBdIF0uZm9jdXMoKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggcHJlc3NlZCA9PT0ga2V5cy5sZWZ0IHx8IHByZXNzZWQgPT09IGtleXMudXAgKSB7XFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTGFzdFRhYiggdGFibGlzdCApO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBwcmVzc2VkID09PSBrZXlzLnJpZ2h0IHx8IHByZXNzZWQgPT09IGtleXMuZG93biApIHtcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNGaXJzdFRhYiggdGFibGlzdCApO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBBY3RpdmF0ZXMgYW55IGdpdmVuIHRhYiBwYW5lbFxcbiAgICAgKlxcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWIgQSB0YWIgZWxlbWVudC5cXG4gICAgICogQHBhcmFtIHtib29sZWFufSBzZXRGb2N1cyBXaGV0aGVyIHRvIHNldCBmb2N1cy5cXG4gICAgICovXFxuICAgIGFjdGl2YXRlVGFiKCB0YWIsIHNldEZvY3VzICkge1xcbiAgICAgICAgLy8gRGVhY3RpdmF0ZSBhbGwgb3RoZXIgdGFic1xcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlVGFicyggdGFiLnRhYmxpc3QgKTtcXG5cXG4gICAgICAgIC8vIFJlbW92ZSB0YWJpbmRleCBhdHRyaWJ1dGUuXFxuICAgICAgICB0YWIucmVtb3ZlQXR0cmlidXRlKCAmIzM5O3RhYmluZGV4JiMzOTsgKTtcXG5cXG4gICAgICAgIC8vIFNldCB0aGUgdGFiIGFzIHNlbGVjdGVkLlxcbiAgICAgICAgdGFiLnNldEF0dHJpYnV0ZSggJiMzOTthcmlhLXNlbGVjdGVkJiMzOTssICYjMzk7dHJ1ZSYjMzk7ICk7XFxuXFxuICAgICAgICAvLyBTZXQgQnVsbWEgY2xhc3MuXFxuICAgICAgICB0YWIucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCAmIzM5O2lzLWFjdGl2ZSYjMzk7ICk7XFxuXFxuICAgICAgICAvLyBSZW1vdmUgaGlkZGVuIGF0dHJpYnV0ZSBmcm9tIHRhYiBwYW5lbCB0byBtYWtlIGl0IHZpc2libGUuXFxuICAgICAgICB0YWIucGFuZWwucmVtb3ZlQXR0cmlidXRlKCAmIzM5O2hpZGRlbiYjMzk7ICk7XFxuXFxuICAgICAgICAvLyBTZXQgZm9jdXMgd2hlbiByZXF1aXJlZC5cXG4gICAgICAgIGlmICggc2V0Rm9jdXMgKSB7XFxuICAgICAgICAgICAgdGFiLnBhbmVsLmZvY3VzKCk7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIERlYWN0aXZhdGUgYWxsIHRhYnMgYW5kIHRhYiBwYW5lbHNcXG4gICAgICpcXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFibGlzdCBUaGUgdGFibGlzdCBlbGVtZW50LlxcbiAgICAgKi9cXG4gICAgZGVhY3RpdmF0ZVRhYnMoIHRhYmxpc3QgKSB7XFxuICAgICAgICBmb3IgKCBsZXQgdCA9IDA7IHQgJmx0OyB0YWJsaXN0LnRhYnMubGVuZ3RoOyB0KysgKSB7XFxuICAgICAgICAgICAgdGFibGlzdC50YWJzWyB0IF0ucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCAmIzM5O2lzLWFjdGl2ZSYjMzk7ICk7XFxuICAgICAgICAgICAgdGFibGlzdC50YWJzWyB0IF0uc2V0QXR0cmlidXRlKCAmIzM5O3RhYmluZGV4JiMzOTssICYjMzk7LTEmIzM5OyApO1xcbiAgICAgICAgICAgIHRhYmxpc3QudGFic1sgdCBdLnNldEF0dHJpYnV0ZSggJiMzOTthcmlhLXNlbGVjdGVkJiMzOTssICYjMzk7ZmFsc2UmIzM5OyApO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgZm9yICggbGV0IHAgPSAwOyBwICZsdDsgdGFibGlzdC5wYW5lbHMubGVuZ3RoOyBwKysgKSB7XFxuICAgICAgICAgICAgdGFibGlzdC5wYW5lbHNbIHAgXS5zZXRBdHRyaWJ1dGUoICYjMzk7aGlkZGVuJiMzOTssICYjMzk7aGlkZGVuJiMzOTsgKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogRm9jdXMgb24gdGhlIGZpcnN0IHRhYiBpbiB0aGUgdGFibGlzdCBvZiB0aGUgZ2l2ZW4gdGFiLlxcbiAgICAgKlxcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWJsaXN0IEEgdGFibGlzdCBlbGVtZW50LlxcbiAgICAgKi9cXG4gICAgZm9jdXNGaXJzdFRhYiggdGFibGlzdCApIHtcXG4gICAgICAgIHRhYmxpc3QuZmlyc3RUYWIuZm9jdXMoKTtcXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogRm9jdXMgb24gdGhlIGxhc3QgdGFiIGluIHRoZSB0YWJsaXN0IG9mIHRoZSBnaXZlbiB0YWIuXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhYmxpc3QgQSB0YWJsaXN0IGVsZW1lbnQuXFxuICAgICAqL1xcbiAgICBmb2N1c0xhc3RUYWIoIHRhYmxpc3QgKSB7XFxuICAgICAgICB0YWJsaXN0Lmxhc3RUYWIuZm9jdXMoKTtcXG4gICAgfVxcbn08L2NvZGU+PC9wcmU+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIlwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8aDIgaWQ9XFxcIm1lc3NhZ2VcXFwiPk1lc3NhZ2U8L2gyPlxcbjxwPkJ1bG1hIGRlc2NyaWJlcyB0aGUgPGEgaHJlZj1cXFwiaHR0cHM6Ly9idWxtYS5pby9kb2N1bWVudGF0aW9uL2NvbXBvbmVudHMvbWVzc2FnZS9cXFwiPm1lc3NhZ2UgY29tcG9uZW50PC9hPiBhcyBhIGNvbG9yZWQgbWVzc2FnZSBibG9jaywgdG8gZW1waGFzaXplIHBhcnQgb2YgeW91ciBwYWdlLiBCdWxtYWxseSBpbXBsZW1lbnRzIHRoZSBjbG9zaW5nIGZ1bmN0aW9uYWxpdHkgZm9yIGl0LiBXZSBhbHNvIG1vZGlmeSB0aGUgbWVzc2FnZSBIVE1MIG1hcmt1cCBhIGxpdHRsZSB0byBtYWtlIGl0IHNlbWFudGljYWxseSBiZXR0ZXIuPC9wPlxcbjxoMyBpZD1cXFwiaHRtbFxcXCI+SFRNTDwvaDM+XFxuPHA+SW5zdGVhZCBvZiBhbiBhcnRpY2xlLCB3ZSBlbmNvdXJhZ2UgdG8gdXNlIGEgc2VjdGlvbiB0YWcgZm9yIHRoZSBtZXNzYWdlIGNvbnRhaW5lci4gSGVhZGluZyBzaG91bGQgYmUgaW5zaWRlIGEgaGVhZGVyIGVsZW1lbnQgYW5kIHRoZSBoZWFkaW5nIHNob3VsZCBoYXZlIGEgaGVhZGluZyB0YWcgd2l0aCBhIGxldmVsIGZvbGxvd2luZyB0aGUgc3RydWN0dXJlIG9mIHlvdXIgcGFnZS4gQXMgYW4gZXhhbXBsZSwgd2UgdXNlIDxlbT5oMjwvZW0+IHNpbmNlIHRoZSBlbGVtZW50IHByb2JhYmx5IGRvZXMgbm90IGNvbnRhaW4gdGhlIG1haW4gaGVhZGluZyBvZiBhIHBhZ2UuIEluc2lkZSB0aGUgZGVsZXRlIGJ1dHRvbiwgeW91IHNob3VsZCBhZGQgYSBkZXNjcmlwdGl2ZSB0ZXh0IGluc2lkZSB0aGUgc3BhbiBlbGVtZW50IHRhcmdldGVkIGZvciBzY3JlZW4gcmVhZGVycy4gVXNpbmcgYSBzcGFuIGVsZW1lbnQgaW5zdGVhZCBvZiA8ZW0+YXJpYS1sYWJlbDwvZW0+IHdlIHN1cHBvcnQgbGFuZ3VhZ2UgdHJhbnNsYXRvcnMgdGhhdCBkbyBub3QgdHJhbnNsYXRlIEhUTUwgYXR0cmlidXRlcyA8ZW0+KGUuZy4gR29vZ2xlIFRyYW5zbGF0ZSk8L2VtPi48L3A+XFxuPHByZT48Y29kZT4mbHQ7c2VjdGlvbiBjbGFzcz0mcXVvdDtidWxtYWxseS1tZXNzYWdlIG1lc3NhZ2UmcXVvdDsmZ3Q7XFxuICAgICZsdDtoZWFkZXIgY2xhc3M9JnF1b3Q7bWVzc2FnZS1oZWFkZXImcXVvdDsmZ3Q7XFxuICAgICAgICAmbHQ7aDImZ3Q7SGVsbG8gV29ybGQmbHQ7L2gyJmd0O1xcbiAgICAgICAgJmx0O2J1dHRvbiBjbGFzcz0mcXVvdDtkZWxldGUmcXVvdDsmZ3Q7XFxuICAgICAgICAgICAgJmx0O3NwYW4gY2xhc3M9JnF1b3Q7aXMtc3Itb25seSZxdW90OyZndDtDbG9zZSBtZXNzYWdlJmx0Oy9zcGFuJmd0O1xcbiAgICAgICAgJmx0Oy9idXR0b24mZ3Q7XFxuICAgICZsdDsvaGVhZGVyJmd0O1xcbiAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O21lc3NhZ2UtYm9keSZxdW90OyZndDtcXG4gICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuICZsdDtzdHJvbmcmZ3Q7UGVsbGVudGVzcXVlIHJpc3VzIG1pJmx0Oy9zdHJvbmcmZ3Q7LCB0ZW1wdXMgcXVpcyBwbGFjZXJhdCB1dCwgcG9ydGEgbmVjIG51bGxhLiBWZXN0aWJ1bHVtIHJob25jdXMgYWMgZXggc2l0IGFtZXQgZnJpbmdpbGxhLiBOdWxsYW0gZ3JhdmlkYSBwdXJ1cyBkaWFtLCBldCBkaWN0dW0gJmx0O2EmZ3Q7ZmVsaXMgdmVuZW5hdGlzJmx0Oy9hJmd0OyBlZmZpY2l0dXIuIEFlbmVhbiBhYyAmbHQ7ZW0mZ3Q7ZWxlaWZlbmQgbGFjdXMmbHQ7L2VtJmd0OywgaW4gbW9sbGlzIGxlY3R1cy4gRG9uZWMgc29kYWxlcywgYXJjdSBldCBzb2xsaWNpdHVkaW4gcG9ydHRpdG9yLCB0b3J0b3IgdXJuYSB0ZW1wb3IgbGlndWxhLCBpZCBwb3J0dGl0b3IgbWkgbWFnbmEgYSBuZXF1ZS4gRG9uZWMgZHVpIHVybmEsIHZlaGljdWxhIGV0IHNlbSBlZ2V0LCBmYWNpbGlzaXMgc29kYWxlcyBzZW0uXFxuICAgICZsdDsvZGl2Jmd0O1xcbiZsdDsvc2VjdGlvbiZndDs8L2NvZGU+PC9wcmU+PGgzIGlkPVxcXCJqYXZhc2NyaXB0XFxcIj5KYXZhU2NyaXB0PC9oMz5cXG48cD5KYXZhU2NyaXB0IGhhbmRsZXMgcmVtb3ZpbmcgdGhlIGVsZW1lbnQgYW5kIG1vdmluZyBmb2N1cyB0byB0aGUgbmV4dCBzaWJsaW5nIG9mIHRoZSBtZXNzYWdlIGVsZW1lbnQuIElmIHRoZSBtZXNzYWdlIGVsZW1lbnQgaGFzIG5vIHNpYmxpbmdzLCBmb2N1cyBpcyBtb3ZlZCB0byB0aGUgcGFyZW50IGVsZW1lbnQuIFdlIGVuY291cmFnZSBwbGFjaW5nIHRoZSBtZXNzYWdlIGVsZW1lbnQgc28gdGhhdCBpcyBoYXMgYSB0ZXh0IGVsZW1lbnQgbmV4dCB0byBpdC4gVGhpcyBtYWtlcyB0aGUgZm9jdXMgY2hhbmdlIGxvZ2ljYWwgZm9yIGEgc2NyZWVuIHJlYWRlciB0byBhbm5vdW5jZSBpdCBhZnRlciB0aGUgcHJldmlvdXNseSBmb2N1c2VkIGRlbGV0ZSBidXR0b24gYW5kIHRoZSB3aG9sZSBtZXNzYWdlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uPC9wPlxcbjxwPklmIHlvdSBjcmVhdGUgbWVzc2FnZXMgZHluYW1pY2FsbHksIHRoZSA8ZW0+TWVzc2FnZTwvZW0+IGNsYXNzIGhhcyBzdGF0aWMgbWV0aG9kcyBmb3IgaW5pdGFsaXppbmcgbmV3IG1lc3NhZ2UgY29tcG9uZW50cy4gVGhlIDxlbT5pbml0TWVzc2FnZXMoKTwvZW0+IG1ldGhvZCBoYXMgYW4gZXhhbXBsZSBvZiBob3cgdG8gaW5pdGFsaXplIGEgc2luZ2xlIG1lc3NhZ2UgY29tcG9uZW50LjwvcD5cXG48cHJlPjxjb2RlPi8qKlxcbiAqIENsYXNzIE1lc3NhZ2VcXG4gKi9cXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNzYWdlIHtcXG4gICAgLyoqXFxuICAgICAqIENvbnN0cnVjdCB0aGUgY29tcG9uZW50IGhhbmRsZXIuXFxuICAgICAqL1xcbiAgICBjb25zdHJ1Y3RvcigpIHtcXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXFxuICAgICAgICAgICAgJiMzOTtET01Db250ZW50TG9hZGVkJiMzOTssXFxuICAgICAgICAgICAgKCkgPSZndDsge1xcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRNZXNzYWdlcygpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICk7XFxuICAgIH1cXG5cXG4gICAgLyoqXFxuICAgICAqIEZpbmQgYWxsIG1lc3NhZ2UgZWxlbWVudHMgYW5kIGluaXRhbGl6ZSB0aGVpciBjbG9zaW5nIGZ1bmN0aW9uYWxpdHkuXFxuICAgICAqL1xcbiAgICBpbml0TWVzc2FnZXMoKSB7XFxuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICYjMzk7LmJ1bG1hbGx5LW1lc3NhZ2UmIzM5OyApO1xcblxcbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpICZsdDsgbWVzc2FnZXMubGVuZ3RoOyBpKysgKSB7XFxuICAgICAgICAgICAgTWVzc2FnZS5pbml0TWVzc2FnZSggbWVzc2FnZXNbIGkgXSApO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBJbml0aWFsaXplcyBjbG9zaW5nIGZ1bmN0aW9uYWxpdGllcyBmb3IgYSBtZXNzYWdlIGVsZW1lbnQuXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG1lc3NhZ2VFbGVtZW50IEEgbWVzc2FnZSBlbGVtZW50LlxcbiAgICAgKi9cXG4gICAgc3RhdGljIGluaXRNZXNzYWdlKCBtZXNzYWdlRWxlbWVudCApIHtcXG4gICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IG1lc3NhZ2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoICYjMzk7LmRlbGV0ZSYjMzk7ICk7XFxuICAgICAgICBkZWxldGVCdXR0b24ubWVzc2FnZSA9IG1lc3NhZ2VFbGVtZW50O1xcblxcbiAgICAgICAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoICYjMzk7Y2xpY2smIzM5OywgTWVzc2FnZS5kZWxldGUgKTtcXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogSGFuZGxlcyB0aGUgY2xpY2sgZXZlbnQgb2YgYSBkZWxldGUgYnV0dG9uIGFuZCBkZWxldGVzIHRoZSBtZXNzYWdlLlxcbiAgICAgKiBGb2N1cyBpcyBzZXQgb24gdGhlIG5leHQgZWxlbWVudCBiZWZvcmUgZGVsZXRpbmcgdGhlIGVsZW1lbnQuXFxuICAgICAqXFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEFuIGV2ZW50IG9iamVjdC5cXG4gICAgICovXFxuICAgIHN0YXRpYyBkZWxldGUoIGV2ZW50ICkge1xcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGV2ZW50LnRhcmdldC5tZXNzYWdlO1xcbiAgICAgICAgbGV0IGZvY3VzVG8gPSBtZXNzYWdlLm5leHRFbGVtZW50U2libGluZztcXG5cXG4gICAgICAgIGlmICggISBmb2N1c1RvICkge1xcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJiMzOTtzIG5vIHNpYmxpbmcgZm9yIHRoZSBtZXNzYWdlLFxcbiAgICAgICAgICAgIC8vIG1vdmUgZm9jdXMgdG8gdGhlIHBhcmVudCBub2RlLlxcbiAgICAgICAgICAgIGZvY3VzVG8gPSBtZXNzYWdlLnBhcmVudE5vZGU7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBGb3JjZSBhYmlsaXR5IHRvIGdpdmUgZm9jdXMgb24gdGhlIHNpYmxpbmcuXFxuICAgICAgICBpZiAoIGZvY3VzVG8udGFiSW5kZXggIT09IDAgKSB7XFxuICAgICAgICAgICAgZm9jdXNUby5zZXRBdHRyaWJ1dGUoICYjMzk7dGFiaW5kZXgmIzM5OywgLTEgKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGZvY3VzVG8uZm9jdXMoKTtcXG5cXG4gICAgICAgIG1lc3NhZ2UucmVtb3ZlKCk7XFxuICAgIH1cXG59PC9jb2RlPjwvcHJlPjxoMyBpZD1cXFwic2Nzc1xcXCI+U0NTUzwvaDM+XFxuPHA+VGhlIGhlYWRpbmcgb2YgdGhlIG1lc3NhZ2UgZWxlbWVudCBzaG91bGQgYmUgaW5zaWRlIGEgaGVhZGluZyB0YWcuIEJ1bG1hIHN0eWxlcyBoZWFkaW5ncyB3aXRob3V0IGFueSB3ZWlnaHQgYnkgZGVmYXVsdC4gV2Ugc2V0IHRoZSBjb3JyZWN0IHdlaWdodCB3aXRoIHRoaXMgc2ltcGxlIG92ZXJyaWRlLjwvcD5cXG48cHJlPjxjb2RlPi5idWxtYWxseS1tZXNzYWdlIHtcXG5cXG4gICAgLm1lc3NhZ2UtaGVhZGVyIHtcXG4gICAgICAgIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xcbiAgICAgICAgICAgIC8vIE92ZXJyaWRlIGhlYWRpbmcgd2VpZ2h0LlxcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAkbWVzc2FnZS1oZWFkZXItd2VpZ2h0O1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxufTwvY29kZT48L3ByZT5cIjsiLCIvKipcbiAqIEJvaWxlclBsYXRlIEpTIGNvbnRyb2xsZXIuXG4gKi9cblxuLyoqXG4gKiBDbGFzcyBCb2lsZXJQbGF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb2lsZXJQbGF0ZSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IHRoZSBjb21wb25lbnQgZnVuY3Rpb25hbGl0aWVzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNhY2hlKCk7XG5cbiAgICAgICAgLy8gVGhpcyBtdXN0IGJlIHNldCBmb3IgZWFjaCBjb21wb25lbnQuXG4gICAgICAgIHRoaXMuZG9jdW1lbnRhdGlvbiA9IHJlcXVpcmUoICcuL2JvaWxlcnBsYXRlLm1kJyApO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAnRE9NQ29udGVudExvYWRlZCcsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb2NSZWFkeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhY2hlIGRvbSBlbGVtZW50cyBmb3IgdXNlIGluIHRoZSBjbGFzcydzIG1ldGhvZHNcbiAgICAgKi9cbiAgICBjYWNoZSgpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIGV2ZW50cygpIHt9XG5cbiAgICAvKipcbiAgICAgKiBSdW4gd2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuXG4gICAgICovXG4gICAgZG9jUmVhZHkoKSB7XG4gICAgICAgIHRoaXMuY2FjaGUoKTtcbiAgICAgICAgdGhpcy5ldmVudHMoKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIE5hdmJhciBKUyBjb250cm9sbGVyLlxuICovXG5cbi8qKlxuICogQ2xhc3MgTmF2YmFyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmJhciB7XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgcnVuIHdoZW4gYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNsYXNzIGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIFRoaXMgbXVzdCBiZSBzZXQgZm9yIGVhY2ggY29tcG9uZW50LlxuICAgICAgICB0aGlzLmRvY3VtZW50YXRpb24gPSByZXF1aXJlKCAnLi9uYXZiYXIubWQnICk7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdET01Db250ZW50TG9hZGVkJyxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvY1JlYWR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FjaGUgZG9tIGVsZW1lbnRzIGZvciB1c2UgaW4gdGhlIGNsYXNzJ3MgbWV0aG9kc1xuICAgICAqL1xuICAgIGNhY2hlKCkge1xuICAgICAgICB0aGlzLm5hdmJhckJ1cmdlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnanMtbmF2YmFyLWJ1cmdlcicgKTtcbiAgICAgICAgdGhpcy5uYXZiYXJNZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdqcy1uYXZiYXItbWVudScgKTtcbiAgICAgICAgaWYgKCB0aGlzLm5hdmJhck1lbnUgKSB7XG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duVG9nZ2xlcnMgPSB0aGlzLm5hdmJhck1lbnUucXVlcnlTZWxlY3RvckFsbCggJy5kcm9wZG93bi10b2dnbGVyJyApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICBldmVudHMoKSB7XG4gICAgICAgIGlmICggdGhpcy5uYXZiYXJCdXJnZXIgKSB7XG4gICAgICAgICAgICB0aGlzLm5hdmJhckJ1cmdlci5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoKSA9PiB0aGlzLnRvZ2dsZU1lbnUoKSApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0aGlzLmRyb3Bkb3duVG9nZ2xlcnMgKSB7XG4gICAgICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmRyb3Bkb3duVG9nZ2xlcnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93blRvZ2dsZXJzWyBpIF0uYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgKCBldmVudCApID0+IHRoaXMudG9nZ2xlRHJvcGRvd24oIGV2ZW50ICkgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBtZW51IHRvZ2dsaW5nIHdoZW4gdGhlIG5hdmJhciBidXJnZXIgaXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICB0b2dnbGVNZW51KCkge1xuICAgICAgICB0aGlzLm5hdmJhckJ1cmdlci5jbGFzc0xpc3QudG9nZ2xlKCAnaXMtYWN0aXZlJyApO1xuICAgICAgICB0aGlzLm5hdmJhck1lbnUuY2xhc3NMaXN0LnRvZ2dsZSggJ2lzLWFjdGl2ZScgKTtcbiAgICAgICAgdGhpcy50b2dnbGVBcmlhRXhwYW5kZWQoIHRoaXMubmF2YmFyQnVyZ2VyICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBhIGRyb3Bkb3duIG1lbnUgdmlzaWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEEgY2xpY2sgZXZlbnQuXG4gICAgICovXG4gICAgdG9nZ2xlRHJvcGRvd24oIGV2ZW50ICkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcklkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSggJ2FyaWEtY29udHJvbHMnICk7XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duTWVudSA9IHRoaXMubmF2YmFyTWVudS5xdWVyeVNlbGVjdG9yKCBgIyR7IGNvbnRhaW5lcklkIH1gICk7XG5cbiAgICAgICAgdGhpcy50b2dnbGVBcmlhRXhwYW5kZWQoIHRhcmdldCApO1xuICAgICAgICBkcm9wZG93bk1lbnUuY2xhc3NMaXN0LnRvZ2dsZSggJ2lzLWhpZGRlbi10b3VjaCcgKTtcbiAgICAgICAgdGhpcy50b2dnbGVBbmNlc3RvckFjdGl2ZVN0YXRlKCB0YXJnZXQsICdoYXMtZHJvcGRvd24nICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSAnaXMtYWN0aXZlJyBzdGF0ZSBmb3IgYW4gYW5jZXN0b3Igb2YgYW4gZWxlbWVudFxuICAgICAqIHdpdGggdGhlIG1hdGNoaW5nIGNsYXNzIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjaGlsZCBBIGNoaWxkIGVsZW1lbnQgdG8gc3RhcnQgdGhlIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNsYXNzTmFtZSBBIHRhcmdldCBjbGFzcyBuYW1lIGZvciB0aGUgYW5jZXN0b3IuXG4gICAgICovXG4gICAgdG9nZ2xlQW5jZXN0b3JBY3RpdmVTdGF0ZSggY2hpbGQsIGNsYXNzTmFtZSApIHtcbiAgICAgICAgbGV0IGFuY2VzdG9yID0gY2hpbGQucGFyZW50Tm9kZTtcbiAgICAgICAgd2hpbGUgKCBhbmNlc3RvciApIHtcbiAgICAgICAgICAgIGlmICggYW5jZXN0b3IuY2xhc3NMaXN0LmNvbnRhaW5zKCBjbGFzc05hbWUgKSApIHtcbiAgICAgICAgICAgICAgICBhbmNlc3Rvci5jbGFzc0xpc3QudG9nZ2xlKCAnaXMtYWN0aXZlJyApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50Tm9kZSA/IGFuY2VzdG9yLnBhcmVudE5vZGUgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdG9nZ2xlcidzIGFyaWEtZXhwYW5kZWQgY3VycmVudCBzdGF0ZSBhbmQgc2V0IGEgbmV3IG9wcG9zaXRlIHN0YXRlIHRvIGl0LlxuICAgICAqIEFsc28gc2V0IHRoZSBvcGVuZWQgY29udGFpbmVyJ3MgYXJpYS1oaWRkZW4gc3RhdGUgdG8gdGhlIG5ldyB2YWx1ZSdzIG9wcG9zaXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdG9nZ2xlciBUaGUgdG9nZ2xlciBlbGVtZW50LlxuICAgICAqL1xuICAgIHRvZ2dsZUFyaWFFeHBhbmRlZCggdG9nZ2xlciApIHtcbiAgICAgICAgY29uc3QgYXJpYUV4cGFuZGVkU3RhdGUgPSB0b2dnbGVyLmdldEF0dHJpYnV0ZSggJ2FyaWEtZXhwYW5kZWQnICkgPT09ICdmYWxzZScgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHRvZ2dsZXIuc2V0QXR0cmlidXRlKCAnYXJpYS1leHBhbmRlZCcsIGFyaWFFeHBhbmRlZFN0YXRlICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVuIHdoZW4gdGhlIGRvY3VtZW50IGlzIHJlYWR5LlxuICAgICAqL1xuICAgIGRvY1JlYWR5KCkge1xuICAgICAgICB0aGlzLmNhY2hlKCk7XG4gICAgICAgIHRoaXMuZXZlbnRzKCk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBBY2NvcmRpb24gSlMgY29udHJvbGxlci5cbiAqL1xuXG4vKipcbiAqIENsYXNzIEFjY29yZGlvblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY2NvcmRpb24ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHJ1biB3aGVuIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjbGFzcyBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBUaGlzIG11c3QgYmUgc2V0IGZvciBlYWNoIGNvbXBvbmVudC5cbiAgICAgICAgdGhpcy5kb2N1bWVudGF0aW9uID0gcmVxdWlyZSggJy4vYWNjb3JkaW9uLm1kJyApO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAnRE9NQ29udGVudExvYWRlZCcsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb2NSZWFkeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhY2hlIGRvbSBlbGVtZW50cyBmb3IgdXNlIGluIHRoZSBjbGFzcydzIG1ldGhvZHNcbiAgICAgKi9cbiAgICBjYWNoZSgpIHtcbiAgICAgICAgdGhpcy5tYWluQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdqcy1idWxtYWxseS1hY2NvcmRpb24nICk7XG5cbiAgICAgICAgaWYgKCB0aGlzLm1haW5Db250YWluZXIgKSB7XG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duVG9nZ2xlcnMgPSB0aGlzLm1haW5Db250YWluZXIucXVlcnlTZWxlY3RvckFsbCggJy5hY2NvcmRpb24tdGl0bGUtYnV0dG9uJyApO1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bnMgPSB0aGlzLm1haW5Db250YWluZXIucXVlcnlTZWxlY3RvckFsbCggJy5hY2NvcmRpb24tY29udGVudCcgKTtcblxuICAgICAgICAgICAgLy8gSGlkZSBhbGwgdG9nZ2xlYWJsZSBlbGVtZW50cyB3aXRoIEpTLlxuICAgICAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5kcm9wZG93bnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bnNbIGkgXS5jbGFzc0xpc3QuYWRkKCAnaXMtaGlkZGVuJyApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICBldmVudHMoKSB7XG4gICAgICAgIGlmICggdGhpcy5kcm9wZG93blRvZ2dsZXJzICkge1xuICAgICAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5kcm9wZG93blRvZ2dsZXJzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd25Ub2dnbGVyc1sgaSBdLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IHRoaXMudG9nZ2xlRHJvcGRvd24oIHRoaXMuZHJvcGRvd25Ub2dnbGVyc1sgaSBdICkgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgYSBkcm9wZG93biBjb250ZW50IHZpc2liaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxCdXR0b25FbGVtZW50fSBjbGlja2VkVG9nZ2xlciBUaGUgdG9nZ2xlciBidXR0b24gdGhhdCB3YXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICB0b2dnbGVEcm9wZG93biggY2xpY2tlZFRvZ2dsZXIgKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcklkID0gY2xpY2tlZFRvZ2dsZXIuZ2V0QXR0cmlidXRlKCAnYXJpYS1jb250cm9scycgKTtcbiAgICAgICAgY29uc3QgZHJvcERvd25Db250ZW50ID0gdGhpcy5tYWluQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoIGAjJHsgY29udGFpbmVySWQgfWAgKTtcblxuICAgICAgICB0aGlzLnRvZ2dsZUFyaWFFeHBhbmRlZCggY2xpY2tlZFRvZ2dsZXIgKTtcbiAgICAgICAgZHJvcERvd25Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoICdpcy1oaWRkZW4nICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b2dnbGVyJ3MgYXJpYS1leHBhbmRlZCBjdXJyZW50IHN0YXRlIGFuZCBzZXQgYSBuZXcgb3Bwb3NpdGUgc3RhdGUgdG8gaXQuXG4gICAgICogQWxzbyBzZXQgdGhlIG9wZW5lZCBjb250YWluZXIncyBhcmlhLWhpZGRlbiBzdGF0ZSB0byB0aGUgbmV3IHZhbHVlJ3Mgb3Bwb3NpdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0b2dnbGVyIFRoZSB0b2dnbGVyIGVsZW1lbnQuXG4gICAgICovXG4gICAgdG9nZ2xlQXJpYUV4cGFuZGVkKCB0b2dnbGVyICkge1xuICAgICAgICBjb25zdCBhcmlhRXhwYW5kZWRTdGF0ZSA9IHRvZ2dsZXIuZ2V0QXR0cmlidXRlKCAnYXJpYS1leHBhbmRlZCcgKSA9PT0gJ2ZhbHNlJyA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgdG9nZ2xlci5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgYXJpYUV4cGFuZGVkU3RhdGUgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW4gd2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuXG4gICAgICovXG4gICAgZG9jUmVhZHkoKSB7XG4gICAgICAgIHRoaXMuY2FjaGUoKTtcbiAgICAgICAgdGhpcy5ldmVudHMoKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIFRhYnMgSlMgY29udHJvbGxlci5cbiAqL1xuXG4vLyBGb3IgZWFzeSByZWZlcmVuY2VcbmNvbnN0IGtleXMgPSB7XG4gICAgZW5kOiAzNSxcbiAgICBob21lOiAzNixcbiAgICBsZWZ0OiAzNyxcbiAgICB1cDogMzgsXG4gICAgcmlnaHQ6IDM5LFxuICAgIGRvd246IDQwLFxuICAgIGVudGVyOiAxMyxcbiAgICBzcGFjZTogMzIsXG59O1xuXG4vLyBBZGQgb3Igc3VidHJhY3QgZGVwZW5kaW5nIG9uIGtleSBwcmVzc2VkXG5jb25zdCBkaXJlY3Rpb24gPSB7XG4gICAgMzc6IC0xLFxuICAgIDM4OiAtMSxcbiAgICAzOTogMSxcbiAgICA0MDogMSxcbn07XG5cbi8qKlxuICogQ2xhc3MgVGFic1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJzIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBydW4gYXV0b21hdGljYWxseSB3aGVuIHRoZSBtb2R1bGUgaXMgaW1wb3J0ZWQsXG4gICAgICogYmVjYXVzZSBpdCBleHBvcnRzIGEgbmV3IGluc3RhbmNlIG9mIGl0c2VsZi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gVGhpcyBtdXN0IGJlIHNldCBmb3IgZWFjaCBjb21wb25lbnQuXG4gICAgICAgIHRoaXMuZG9jdW1lbnRhdGlvbiA9IHJlcXVpcmUoICcuL3RhYnMubWQnICk7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdET01Db250ZW50TG9hZGVkJyxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRBbGxUYWJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCBhbGwgdGFiIGVsZW1lbnRzIGFuZCBpbml0aWFsaXplIHRoZWlyIGZ1bmN0aW9uYWxpdGllcy5cbiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgcnVuIG9uIGRvY3VtZW50IHJlYWR5IHRvIGluaXRpYWxpemUgYWxsXG4gICAgICogdGFicyBpbiB0aGUgRE9NIGFmdGVyIHRoZSBwYWdlIGlzIGxvYWRlZC5cbiAgICAgKi9cbiAgICBpbml0QWxsVGFicygpIHtcbiAgICAgICAgdGhpcy5hbGxUYWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5idWxtYWxseS10YWJzJyApO1xuXG4gICAgICAgIGlmICggISB0aGlzLmFsbFRhYnMgKSB7XG4gICAgICAgICAgICAvLyBObyB0YWJzIGZvdW5kLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5hbGxUYWJzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgdGhpcy5pbml0KCB0aGlzLmFsbFRhYnNbIGkgXSApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGFsaXplIGEgc2luZ2xlIHRhYnMgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhYnNFbGVtZW50IEJ1bG1hbGx5IHRhYnMgY29udGFpbmVyLlxuICAgICAqL1xuICAgIGluaXQoIHRhYnNFbGVtZW50ICkge1xuICAgICAgICBjb25zdCB0YWJzQ29udGFpbmVyID0gdGFic0VsZW1lbnQucXVlcnlTZWxlY3RvciggJy50YWJzJyApO1xuICAgICAgICBjb25zdCB0YWJsaXN0ID0gdGFic0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCAndWwnICk7XG4gICAgICAgIGNvbnN0IHRhYnMgPSB0YWJsaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoICdhJyApO1xuICAgICAgICBjb25zdCB0YWJMaXN0SXRlbXMgPSB0YWJsaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoICdsaScgKTtcblxuICAgICAgICAvLyBTdG9yZSByZWZlcmVuY2VzIHRvIHRoZSBmaXJzdCBhbmQgdGhlIGxhc3QgdGFiIGZvciBmb2N1cyBtYW5pcHVsYXRpb25zLlxuICAgICAgICAvLyBJbml0aWFsaXplIGFuIGFycmF5IGZvciBzdG9yaW5nIHJlZmVyZW5jZXMgdG8gYWxsIHRhYnMuXG4gICAgICAgIHRhYmxpc3QuZmlyc3RUYWIgPSB0YWJzWyAwIF07XG4gICAgICAgIHRhYmxpc3QubGFzdFRhYiA9IHRhYnNbIHRhYnMubGVuZ3RoIC0gMSBdO1xuICAgICAgICB0YWJsaXN0LnRhYnMgPSBbXTtcbiAgICAgICAgdGFibGlzdC5wYW5lbHMgPSBbXTtcblxuICAgICAgICAvLyBJbml0aWFsaXplIHRhYnMuXG4gICAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHRhYnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRUYWIoIHRhYnNbIGkgXSwgdGFibGlzdCwgaSApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGFiTGlzdEl0ZW1zLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgLy8gQWxsIDxsaT4gZWxlbWVudHMgbXVzdCBoYXZlIGEgcm9sZSBvZiBwcmVzZW50YXRpb24uXG4gICAgICAgICAgICB0YWJMaXN0SXRlbXNbIGkgXS5zZXRBdHRyaWJ1dGUoICdyb2xlJywgJ3ByZXNlbnRhdGlvbicgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgZnVuY3Rpb25hbGl0aWVzIGZvciBhIHRhYiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFiIEEgdGFiIGxpbmsuXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFibGlzdCBUaGUgdGFibGlzdCBlbGVtZW50IGZvciB0aGUgdGFiLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgY3VycmVudCBlbGVtZW50IGluZGV4IGluIHRoZSB0YWIgbGlzdC5cbiAgICAgKi9cbiAgICBpbml0VGFiKCB0YWIsIHRhYmxpc3QsIGluZGV4ICkge1xuICAgICAgICBjb25zdCBwYW5lbElkID0gdGFiLmhhc2guc2xpY2UoIDEgKTtcblxuICAgICAgICAvLyBDcmVhdGUgYSB1bmlxdWUgaWQgdXNpbmcgdGhlIHRhYiBsaW5rJ3MgaGFzaFxuICAgICAgICB0YWIuaWQgPSBgdGFiLSR7IHBhbmVsSWQgfWA7XG5cbiAgICAgICAgLy8gTWFrZSBhIHR3by13YXkgcmVmZXJlbmNlIG9mIHRoZSB0YWIgYW5kIGl0cyB0YWJsaXN0LlxuICAgICAgICB0YWIudGFibGlzdCA9IHRhYmxpc3Q7XG4gICAgICAgIHRhYmxpc3QudGFic1sgaW5kZXggXSA9IHRhYjtcblxuICAgICAgICAvLyBTdG9yZSB0aGUgaW5kZXguXG4gICAgICAgIHRhYi5pbmRleCA9IGluZGV4O1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGNvcnJlc3BvbmRpbmcgcGFuZWwuXG4gICAgICAgIHRhYi5wYW5lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBwYW5lbElkICk7XG4gICAgICAgIHRoaXMuaW5pdFBhbmVsKCB0YWIucGFuZWwsIHRhYiwgdGFibGlzdCwgaW5kZXggKTtcblxuICAgICAgICB0YWIucm9sZSA9ICd0YWInO1xuICAgICAgICB0YWIuc2V0QXR0cmlidXRlKCAnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScgKTtcbiAgICAgICAgdGFiLnNldEF0dHJpYnV0ZSggJ2FyaWEtY29udHJvbHMnLCBwYW5lbElkICk7XG4gICAgICAgIHRhYi50YWJpbmRleCA9IC0xO1xuXG4gICAgICAgIHRhYi5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoIGV2ZW50ICkgPT4gdGhpcy5jbGlja0V2ZW50TGlzdGVuZXIoIGV2ZW50ICkgKTtcbiAgICAgICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgKCBldmVudCApID0+IHRoaXMua2V5ZG93bkV2ZW50TGlzdGVuZXIoIGV2ZW50ICkgKTtcbiAgICAgICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoICdrZXl1cCcsICggZXZlbnQgKSA9PiB0aGlzLmtleXVwRXZlbnRMaXN0ZW5lciggZXZlbnQgKSApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRhbGl6ZSBwYW5lbCBmdW5jdGlvbmFsaXRpZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYW5lbCBUaGUgcGFuZWwgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWIgVGhlIGNvcnJlc3BvbmRpbmcgdGFiIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFibGlzdCBUaGUgdGFibGlzdCBlbGVtZW50IGZvciB0aGUgdGFiLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggaW4gcGFuZWxzLlxuICAgICAqL1xuICAgIGluaXRQYW5lbCggcGFuZWwsIHRhYiwgdGFibGlzdCwgaW5kZXggKSB7XG4gICAgICAgIGlmICggaW5kZXggIT09IDAgKSB7XG4gICAgICAgICAgICAvLyBIaWRlIGFsbCBidXQgdGhlIGZpcnN0IHRhYi5cbiAgICAgICAgICAgIHBhbmVsLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwYW5lbC5zZXRBdHRyaWJ1dGUoICd0YWJpbmRleCcsICcwJyApO1xuICAgICAgICBwYW5lbC5zZXRBdHRyaWJ1dGUoICdyb2xlJywgJ3RhYnBhbmVsJyApO1xuICAgICAgICBwYW5lbC5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsbGVkYnknLCB0YWIuaWQgKTtcblxuICAgICAgICAvLyBTdG9yZSBhIHJlZmVyZW5jZSBmb3IgdGhlIHRhYmxpc3QuXG4gICAgICAgIHRhYmxpc3QucGFuZWxzLnB1c2goIHBhbmVsICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBhIHRhYiBpcyBjbGlja2VkLCBhY3RpdmF0ZVRhYiBpcyBmaXJlZCB0byBhY3RpdmF0ZSBpdFxuICAgICAqXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAqL1xuICAgIGNsaWNrRXZlbnRMaXN0ZW5lciggZXZlbnQgKSB7XG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgY2xpY2sgZXZlbnQuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgdGFiID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICB0aGlzLmFjdGl2YXRlVGFiKCB0YWIsIGZhbHNlICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGtleWRvd24gb24gdGFic1xuICAgICAqXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAqL1xuICAgIGtleWRvd25FdmVudExpc3RlbmVyKCBldmVudCApIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZXZlbnQua2V5Q29kZTtcbiAgICAgICAgY29uc3QgdGFibGlzdCA9IGV2ZW50LnRhcmdldC50YWJsaXN0O1xuXG4gICAgICAgIHN3aXRjaCAoIGtleSApIHtcbiAgICAgICAgY2FzZSBrZXlzLmVuZDpcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBBY3RpdmF0ZSBsYXN0IHRhYlxuICAgICAgICAgICAgdGhpcy5mb2N1c0xhc3RUYWIoIHRhYmxpc3QgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGtleXMuaG9tZTpcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBBY3RpdmF0ZSBmaXJzdCB0YWJcbiAgICAgICAgICAgIHRoaXMuZm9jdXNGaXJzdFRhYiggdGFibGlzdCApO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gVXAgYW5kIGRvd24gYXJlIGluIGtleWRvd24gdG8gcHJldmVudCBwYWdlIHNjcm9sbC5cbiAgICAgICAgY2FzZSBrZXlzLnVwOlxuICAgICAgICBjYXNlIGtleXMuZG93bjpcbiAgICAgICAgICAgIHRoaXMuZGV0ZXJtaW5lT3JpZW50YXRpb24oIGV2ZW50ICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBrZXlzLmVudGVyOlxuICAgICAgICBjYXNlIGtleXMuc3BhY2U6XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZVRhYiggZXZlbnQudGFyZ2V0LCB0cnVlICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBrZXl1cCBvbiB0YWJzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBFdmVudCBvYmplY3QuXG4gICAgICovXG4gICAga2V5dXBFdmVudExpc3RlbmVyKCBldmVudCApIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZXZlbnQua2V5Q29kZTtcblxuICAgICAgICBzd2l0Y2ggKCBrZXkgKSB7XG4gICAgICAgIGNhc2Uga2V5cy5sZWZ0OlxuICAgICAgICBjYXNlIGtleXMucmlnaHQ6XG4gICAgICAgICAgICB0aGlzLmRldGVybWluZU9yaWVudGF0aW9uKCBldmVudCApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGEgdGFibGlzdCdzIGFyaWEtb3JpZW50YXRpb24gaXMgc2V0IHRvIHZlcnRpY2FsLFxuICAgICAqIG9ubHkgdXAgYW5kIGRvd24gYXJyb3cgc2hvdWxkIGZ1bmN0aW9uLlxuICAgICAqIG9ubHkgdXAgYW5kIGRvd24gYXJyb3cgc2hvdWxkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGV2ZW50IG9iamVjdC5cbiAgICAgKi9cbiAgICBkZXRlcm1pbmVPcmllbnRhdGlvbiggZXZlbnQgKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleUNvZGU7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsID0gZXZlbnQudGFyZ2V0LnRhYmxpc3QuZ2V0QXR0cmlidXRlKCAnYXJpYS1vcmllbnRhdGlvbicgKSA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgICAgbGV0IHByb2NlZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIHZlcnRpY2FsICkge1xuICAgICAgICAgICAgaWYgKCBrZXkgPT09IGtleXMudXAgfHwga2V5ID09PSBrZXlzLmRvd24gKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBwcm9jZWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgga2V5ID09PSBrZXlzLmxlZnQgfHwga2V5ID09PSBrZXlzLnJpZ2h0ICkge1xuICAgICAgICAgICAgcHJvY2VlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHByb2NlZWQgKSB7XG4gICAgICAgICAgICB0aGlzLnN3aXRjaFRhYk9uQXJyb3dQcmVzcyggZXZlbnQgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVpdGhlciBmb2N1cyB0aGUgbmV4dCwgcHJldmlvdXMsIGZpcnN0LCBvciBsYXN0IHRhYlxuICAgICAqIGRlcGVuZGluZyBvbiB0aGUga2V5IHByZXNzZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBFdmVudCBvYmplY3QuXG4gICAgICovXG4gICAgc3dpdGNoVGFiT25BcnJvd1ByZXNzKCBldmVudCApIHtcbiAgICAgICAgY29uc3QgcHJlc3NlZCA9IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgICAgaWYgKCBkaXJlY3Rpb25bIHByZXNzZWQgXSApIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgIGNvbnN0IHRhYmxpc3QgPSB0YXJnZXQudGFibGlzdDtcbiAgICAgICAgICAgIGNvbnN0IHRhYnMgPSB0YWJsaXN0LnRhYnM7XG4gICAgICAgICAgICBpZiAoIHRhcmdldC5pbmRleCAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgICAgIGlmICggdGFic1sgdGFyZ2V0LmluZGV4ICsgZGlyZWN0aW9uWyBwcmVzc2VkIF0gXSApIHtcbiAgICAgICAgICAgICAgICAgICAgdGFic1sgdGFyZ2V0LmluZGV4ICsgZGlyZWN0aW9uWyBwcmVzc2VkIF0gXS5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByZXNzZWQgPT09IGtleXMubGVmdCB8fCBwcmVzc2VkID09PSBrZXlzLnVwICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTGFzdFRhYiggdGFibGlzdCApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByZXNzZWQgPT09IGtleXMucmlnaHQgfHwgcHJlc3NlZCA9PT0ga2V5cy5kb3duICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzRmlyc3RUYWIoIHRhYmxpc3QgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgYW55IGdpdmVuIHRhYiBwYW5lbFxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFiIEEgdGFiIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBzZXRGb2N1cyBXaGV0aGVyIHRvIHNldCBmb2N1cy5cbiAgICAgKi9cbiAgICBhY3RpdmF0ZVRhYiggdGFiLCBzZXRGb2N1cyApIHtcbiAgICAgICAgLy8gRGVhY3RpdmF0ZSBhbGwgb3RoZXIgdGFic1xuICAgICAgICB0aGlzLmRlYWN0aXZhdGVUYWJzKCB0YWIudGFibGlzdCApO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0YWJpbmRleCBhdHRyaWJ1dGUuXG4gICAgICAgIHRhYi5yZW1vdmVBdHRyaWJ1dGUoICd0YWJpbmRleCcgKTtcblxuICAgICAgICAvLyBTZXQgdGhlIHRhYiBhcyBzZWxlY3RlZC5cbiAgICAgICAgdGFiLnNldEF0dHJpYnV0ZSggJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScgKTtcblxuICAgICAgICAvLyBTZXQgQnVsbWEgY2xhc3MuXG4gICAgICAgIHRhYi5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoICdpcy1hY3RpdmUnICk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGhpZGRlbiBhdHRyaWJ1dGUgZnJvbSB0YWIgcGFuZWwgdG8gbWFrZSBpdCB2aXNpYmxlLlxuICAgICAgICB0YWIucGFuZWwucmVtb3ZlQXR0cmlidXRlKCAnaGlkZGVuJyApO1xuXG4gICAgICAgIC8vIFNldCBmb2N1cyB3aGVuIHJlcXVpcmVkLlxuICAgICAgICBpZiAoIHNldEZvY3VzICkge1xuICAgICAgICAgICAgdGFiLnBhbmVsLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWFjdGl2YXRlIGFsbCB0YWJzIGFuZCB0YWIgcGFuZWxzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWJsaXN0IFRoZSB0YWJsaXN0IGVsZW1lbnQuXG4gICAgICovXG4gICAgZGVhY3RpdmF0ZVRhYnMoIHRhYmxpc3QgKSB7XG4gICAgICAgIGZvciAoIGxldCB0ID0gMDsgdCA8IHRhYmxpc3QudGFicy5sZW5ndGg7IHQrKyApIHtcbiAgICAgICAgICAgIHRhYmxpc3QudGFic1sgdCBdLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSggJ2lzLWFjdGl2ZScgKTtcbiAgICAgICAgICAgIHRhYmxpc3QudGFic1sgdCBdLnNldEF0dHJpYnV0ZSggJ3RhYmluZGV4JywgJy0xJyApO1xuICAgICAgICAgICAgdGFibGlzdC50YWJzWyB0IF0uc2V0QXR0cmlidXRlKCAnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIGxldCBwID0gMDsgcCA8IHRhYmxpc3QucGFuZWxzLmxlbmd0aDsgcCsrICkge1xuICAgICAgICAgICAgdGFibGlzdC5wYW5lbHNbIHAgXS5zZXRBdHRyaWJ1dGUoICdoaWRkZW4nLCAnaGlkZGVuJyApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9jdXMgb24gdGhlIGZpcnN0IHRhYiBpbiB0aGUgdGFibGlzdCBvZiB0aGUgZ2l2ZW4gdGFiLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFibGlzdCBBIHRhYmxpc3QgZWxlbWVudC5cbiAgICAgKi9cbiAgICBmb2N1c0ZpcnN0VGFiKCB0YWJsaXN0ICkge1xuICAgICAgICB0YWJsaXN0LmZpcnN0VGFiLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9jdXMgb24gdGhlIGxhc3QgdGFiIGluIHRoZSB0YWJsaXN0IG9mIHRoZSBnaXZlbiB0YWIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWJsaXN0IEEgdGFibGlzdCBlbGVtZW50LlxuICAgICAqL1xuICAgIGZvY3VzTGFzdFRhYiggdGFibGlzdCApIHtcbiAgICAgICAgdGFibGlzdC5sYXN0VGFiLmZvY3VzKCk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBNb2RhbCBKUyBjb250cm9sbGVyLlxuICovXG5cbi8qKlxuICogQ2xhc3MgTW9kYWxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwge1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHJ1biB3aGVuIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjbGFzcyBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBUaGlzIG11c3QgYmUgc2V0IGZvciBlYWNoIGNvbXBvbmVudC5cbiAgICAgICAgdGhpcy5kb2N1bWVudGF0aW9uID0gcmVxdWlyZSggJy4vbW9kYWwubWQnICk7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdET01Db250ZW50TG9hZGVkJyxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvY1JlYWR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FjaGUgZG9tIGVsZW1lbnRzIGZvciB1c2UgaW4gdGhlIGNsYXNzJ3MgbWV0aG9kc1xuICAgICAqL1xuICAgIGNhY2hlKCkge1xuICAgICAgICB0aGlzLnJvb3RFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdGhpcy4kbW9kYWxzID0gW107XG4gICAgICAgIHRoaXMuJG1vZGFsQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcubW9kYWwtYnV0dG9uJyApO1xuICAgICAgICB0aGlzLiRtb2RhbENsb3NlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcubW9kYWwtYmFja2dyb3VuZCwgLm1vZGFsLWNsb3NlLCAubW9kYWwtY2FyZC1oZWFkIC5kZWxldGUsIC5tb2RhbC1jYXJkLWZvb3QgLmJ1dHRvbiwgLm1vZGFsLWNsb3NlLWJ1dHRvbicgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIGV2ZW50cygpIHtcbiAgICAgICAgLy8gQmluZCBoYW5kbGVycyB0byBlYWNoIG1vZGFsIG9wZW4gYnV0dG9uLlxuICAgICAgICBpZiAoIHRoaXMuJG1vZGFsQnV0dG9ucy5sZW5ndGggPiAwICkge1xuICAgICAgICAgICAgdGhpcy4kbW9kYWxCdXR0b25zLmZvckVhY2goICggYnV0dG9uICkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGJ1dHRvbi5nZXRBdHRyaWJ1dGUoICdhcmlhLWNvbnRyb2xzJyApICk7XG4gICAgICAgICAgICAgICAgbW9kYWwub3BlbmluZ0J1dHRvbiA9IGJ1dHRvbjtcbiAgICAgICAgICAgICAgICBtb2RhbC5pc09wZW5lZCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy4kbW9kYWxzLnB1c2goIG1vZGFsICk7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuTW9kYWwoIG1vZGFsICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQXJpYUV4cGFuZGVkKCBidXR0b24gKTtcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICB9ICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIGhhbmRsZXJzIHRvIGVhY2ggbW9kYWwgY2xvc2UgYnV0dG9uLlxuICAgICAgICBpZiAoIHRoaXMuJG1vZGFsQ2xvc2VzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICB0aGlzLiRtb2RhbENsb3Nlcy5mb3JFYWNoKCAoIGJ1dHRvbiApID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWxzKCk7XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgfSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmluZCBtb2RhbCBjbG9zaW5nIGhhbmRsZXIgdG8gRVNDIGtleS5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCAoIGV2ZW50ICkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgICAgIGlmICggZS5rZXlDb2RlID09PSAyNyApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWxzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhbmRsZXMgb3BlbmluZyB0aGUgbW9kYWwgdGhhdCB3YXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgICogdGhlIGNsaWNrZWQgbW9kYWwgb3BlbmluZyBidXR0b24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG1vZGFsIFRoZSBtb2RhbCB0aGF0IGlzIG9wZW5lZC5cbiAgICAgKi9cbiAgICBvcGVuTW9kYWwoIG1vZGFsICkge1xuICAgICAgICB0aGlzLnJvb3RFbC5jbGFzc0xpc3QuYWRkKCAnaXMtY2xpcHBlZCcgKTtcbiAgICAgICAgbW9kYWwuY2xhc3NMaXN0LmFkZCggJ2lzLWFjdGl2ZScgKTtcbiAgICAgICAgbW9kYWwuaXNPcGVuZWQgPSAxO1xuXG4gICAgICAgIC8vIENvbGxlY3QgZWFjaCBmb2N1c2FibGUgZWxlbWVudCBpbnNpZGUgdGhlIG1vZGFsLlxuICAgICAgICBjb25zdCBmb2N1c2FibGVFbGVtZW50cyA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3JBbGwoICdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgW3RhYmluZGV4PVwiMFwiXScgKTtcblxuICAgICAgICAvLyBTZXQgZmlyc3QgYW5kIGxhc3QgZm9jdXNhYmxlIGVsZW1lbnQgYXMgY2xhc3MgcGFyYW1ldGVycy5cbiAgICAgICAgLy8gU2V0IGZvY3VzIHRvIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudC5cbiAgICAgICAgaWYgKCBmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggKSB7XG4gICAgICAgICAgICBtb2RhbC5mb2N1c2FibGVFbGVtZW50cyA9IGZvY3VzYWJsZUVsZW1lbnRzO1xuICAgICAgICAgICAgbW9kYWwuZm9jdXNhYmxlRWxlbWVudHMuZmlyc3QgPSBmb2N1c2FibGVFbGVtZW50c1sgMCBdO1xuICAgICAgICAgICAgbW9kYWwuZm9jdXNhYmxlRWxlbWVudHMubGFzdCA9IGZvY3VzYWJsZUVsZW1lbnRzWyBmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggLSAxIF07XG4gICAgICAgICAgICBtb2RhbC5mb2N1c2FibGVFbGVtZW50cy5maXJzdC5mb2N1cygpO1xuXG4gICAgICAgICAgICAvLyBCaW5kIG1vZGFsIGZvY3VzIGxvb3AgaGFuZGxlciB0byBkb2N1bWVudCB3aGVuIG1vZGFsIGlzIG9wZW5lZC5cbiAgICAgICAgICAgIC8vIElmIHByZXNzZWQga2V5IHdhcyAnVGFiJywgY2FsbCB0YWIgaGFuZGxpbmcgbWV0aG9kLlxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCAoIGV2ZW50ICkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKCBlLmtleUNvZGUgPT09IDkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTW9kYWxUYWJiaW5nKCBlLCBtb2RhbCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgY2xvc2VzIGFsbCBtb2RhbHMgYW5kIHNldHMgZm9jdXMgYmFjayB0byB0aGUgZWxlbWVudCB0aGF0IHdhcyB1c2VkXG4gICAgICogdG8gb3BlbiB0aGUgY3VycmVudCB2aXNpYmxlIG1vZGFsLlxuICAgICAqL1xuICAgIGNsb3NlTW9kYWxzKCkge1xuICAgICAgICB0aGlzLnJvb3RFbC5jbGFzc0xpc3QucmVtb3ZlKCAnaXMtY2xpcHBlZCcgKTtcbiAgICAgICAgdGhpcy4kbW9kYWxzLmZvckVhY2goICggbW9kYWwgKSA9PiB7XG4gICAgICAgICAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCAnaXMtYWN0aXZlJyApO1xuICAgICAgICAgICAgaWYgKCBtb2RhbC5pc09wZW5lZCApIHtcbiAgICAgICAgICAgICAgICBtb2RhbC5vcGVuaW5nQnV0dG9uLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVBcmlhRXhwYW5kZWQoIG1vZGFsLm9wZW5pbmdCdXR0b24gKTtcbiAgICAgICAgICAgICAgICBtb2RhbC5pc09wZW5lZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhbmRsZXMgVGFiIGtleSBwcmVzc2VzIGFuZCBsb29wcyBmb2N1cyBiYWNrIHRvIHRoZSBmaXJzdFxuICAgICAqIGZvY3VzYWJsZSBlbGVtZW50IGluc2lkZSB0aGUgbW9kYWwuIElmIGEgdXNlciBuYXZpZ2F0ZXMgYmFja3dhcmRzXG4gICAgICogdXNpbmcgc2hpZnQgKyB0YWIsIHRoZSBsb29wIGlzIGhhbmRsZWQgcHJvcGVybHkgdG8gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZXZlbnR9IGUgS2V5IHByZXNzIGV2ZW50LlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbW9kYWwgVGhlIG1vZGFsIHRoYXQgaXMgY3VycmVudGx5IHZpc2libGUuXG4gICAgICovXG4gICAgaGFuZGxlTW9kYWxUYWJiaW5nKCBlLCBtb2RhbCApIHtcbiAgICAgICAgLy8gSWYgc2hpZnQgKyB0YWIgcHVzaGVkLlxuICAgICAgICBpZiAoIGUuc2hpZnRLZXkgKSB7XG4gICAgICAgICAgICAvLyBGb2N1cyB0aGUgbGFzdCBlbGVtZW50IGlmIGZvY3VzIHdhcyBvbiB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgICAgIGlmICggbW9kYWwuZm9jdXNhYmxlRWxlbWVudHMuZmlyc3QgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIG1vZGFsLmZvY3VzYWJsZUVsZW1lbnRzLmxhc3QuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICggbW9kYWwuZm9jdXNhYmxlRWxlbWVudHMubGFzdCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCApIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIG1vZGFsLmZvY3VzYWJsZUVsZW1lbnRzLmZpcnN0LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRvZ2dsZXIncyBhcmlhLWV4cGFuZGVkIGN1cnJlbnQgc3RhdGUgYW5kIHNldCBhIG5ldyBvcHBvc2l0ZSBzdGF0ZSB0byBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRvZ2dsZXIgVGhlIHRvZ2dsZXIgZWxlbWVudC5cbiAgICAgKi9cbiAgICB0b2dnbGVBcmlhRXhwYW5kZWQoIHRvZ2dsZXIgKSB7XG4gICAgICAgIGNvbnN0IGFyaWFFeHBhbmRlZFN0YXRlID0gdG9nZ2xlci5nZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJyApID09PSAnZmFsc2UnID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB0b2dnbGVyLnNldEF0dHJpYnV0ZSggJ2FyaWEtZXhwYW5kZWQnLCBhcmlhRXhwYW5kZWRTdGF0ZSApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1biB3aGVuIHRoZSBkb2N1bWVudCBpcyByZWFkeS5cbiAgICAgKi9cbiAgICBkb2NSZWFkeSgpIHtcbiAgICAgICAgdGhpcy5jYWNoZSgpO1xuICAgICAgICB0aGlzLmV2ZW50cygpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogTWVzc2FnZSBKUyBjb250cm9sbGVyLlxuICovXG5cbi8qKlxuICogQ2xhc3MgTWVzc2FnZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNzYWdlIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgdGhlIGNvbXBvbmVudCBoYW5kbGVyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBUaGlzIG11c3QgYmUgc2V0IGZvciBlYWNoIGNvbXBvbmVudC5cbiAgICAgICAgdGhpcy5kb2N1bWVudGF0aW9uID0gcmVxdWlyZSggJy4vbWVzc2FnZS5tZCcgKTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdE1lc3NhZ2VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCBhbGwgbWVzc2FnZSBlbGVtZW50cyBhbmQgaW5pdGFsaXplIHRoZWlyIGNsb3NpbmcgZnVuY3Rpb25hbGl0eS5cbiAgICAgKi9cbiAgICBpbml0TWVzc2FnZXMoKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5idWxtYWxseS1tZXNzYWdlJyApO1xuXG4gICAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgTWVzc2FnZS5pbml0TWVzc2FnZSggbWVzc2FnZXNbIGkgXSApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgY2xvc2luZyBmdW5jdGlvbmFsaXRpZXMgZm9yIGEgbWVzc2FnZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbWVzc2FnZUVsZW1lbnQgQSBtZXNzYWdlIGVsZW1lbnQuXG4gICAgICovXG4gICAgc3RhdGljIGluaXRNZXNzYWdlKCBtZXNzYWdlRWxlbWVudCApIHtcbiAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9uID0gbWVzc2FnZUVsZW1lbnQucXVlcnlTZWxlY3RvciggJy5kZWxldGUnICk7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5tZXNzYWdlID0gbWVzc2FnZUVsZW1lbnQ7XG5cbiAgICAgICAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIE1lc3NhZ2UuZGVsZXRlICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgY2xpY2sgZXZlbnQgb2YgYSBkZWxldGUgYnV0dG9uIGFuZCBkZWxldGVzIHRoZSBtZXNzYWdlLlxuICAgICAqIEZvY3VzIGlzIHNldCBvbiB0aGUgbmV4dCBlbGVtZW50IGJlZm9yZSBkZWxldGluZyB0aGUgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEFuIGV2ZW50IG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGVsZXRlKCBldmVudCApIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGV2ZW50LnRhcmdldC5tZXNzYWdlO1xuICAgICAgICBsZXQgZm9jdXNUbyA9IG1lc3NhZ2UubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgICAgIGlmICggISBmb2N1c1RvICkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBzaWJsaW5nIGZvciB0aGUgbWVzc2FnZSxcbiAgICAgICAgICAgIC8vIG1vdmUgZm9jdXMgdG8gdGhlIHBhcmVudCBub2RlLlxuICAgICAgICAgICAgZm9jdXNUbyA9IG1lc3NhZ2UucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvcmNlIGFiaWxpdHkgdG8gZ2l2ZSBmb2N1cyBvbiB0aGUgc2libGluZy5cbiAgICAgICAgaWYgKCBmb2N1c1RvLnRhYkluZGV4ICE9PSAwICkge1xuICAgICAgICAgICAgZm9jdXNUby5zZXRBdHRyaWJ1dGUoICd0YWJpbmRleCcsIC0xICk7XG4gICAgICAgIH1cbiAgICAgICAgZm9jdXNUby5mb2N1cygpO1xuXG4gICAgICAgIG1lc3NhZ2UucmVtb3ZlKCk7XG4gICAgfVxufVxuIiwiLy8gVGhpcyBhZGRzIGZ1bmN0aW9uYWxpdGllcyB0byBhZGQgaGlnbGlnaHRlZCBtYXJrZG93biBzdXBwb3J0ZWQgZG9jdW1lbnRhdGlvblxuLy8gZm9yIEJ1bG1hbGx5IGNvbXBvbnRlbnRzLlxuXG5pbXBvcnQgaGxqcyBmcm9tICdoaWdobGlnaHQuanMvbGliL2hpZ2hsaWdodCc7XG5pbXBvcnQgamF2YXNjcmlwdCBmcm9tICdoaWdobGlnaHQuanMvbGliL2xhbmd1YWdlcy9qYXZhc2NyaXB0JztcbmltcG9ydCBzY3NzIGZyb20gJ2hpZ2hsaWdodC5qcy9saWIvbGFuZ3VhZ2VzL3Njc3MnO1xuXG5obGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoICdqYXZhc2NyaXB0JywgamF2YXNjcmlwdCApO1xuaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCAnc2NzcycsIHNjc3MgKTtcblxuY2xhc3MgRG9jdW1lbnRhdGlvbiB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZm9yIGRvY3VtZW50YXRpb24gaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50cyBUaGUgY29tcG9uZW50IG9iamVjdHMgbWFwLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCBjb21wb25lbnRzICkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAnRE9NQ29udGVudExvYWRlZCcsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0RG9jdW1lbnRhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBtYXJrZG93biBkb2N1bWVudGF0aW9uIGlmIG9uIGFcbiAgICAgKi9cbiAgICBpbml0RG9jdW1lbnRhdGlvbigpIHtcbiAgICAgICAgY29uc3QgcGF0aG5hbWUgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG5cbiAgICAgICAgZm9yICggY29uc3Qgc2x1ZyBpbiB0aGlzLmNvbXBvbmVudHMgKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbIHNsdWcgXTtcblxuICAgICAgICAgICAgaWYgKCAhIHBhdGhuYW1lLmluY2x1ZGVzKCBzbHVnICkgfHwgISBjb21wb25lbnQuZG9jdW1lbnRhdGlvbiApIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4sIGlmIHRoaXMgY29tcG9uZW50IGlzIG5vdCBjdXJyZW50bHkgdmlld2VkXG4gICAgICAgICAgICAgICAgLy8gb3IgdGhlIGNvbXBvbmVudCBkb2VzIG5vdCBjb250YWluIGRvY3VtZW50YXRpb24uXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgY29udGFpbmVyIGZvciB0aGUgbWFya2Rvd24gZG9jdW1lbnQuXG4gICAgICAgICAgICBjb25zdCBkb2NDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ2pzLW1hcmtkb3duJyApO1xuXG4gICAgICAgICAgICBpZiAoICEgZG9jQ29udGFpbmVyICkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgZG9jdW1lbnRhdGlvbiB0byB0aGUgY29udGFpbmVyLlxuICAgICAgICAgICAgZG9jQ29udGFpbmVyLmlubmVySFRNTCA9IGNvbXBvbmVudC5kb2N1bWVudGF0aW9uO1xuXG4gICAgICAgICAgICAvLyBIaWdobGlnaHQgY29kZSBibG9ja3MuXG4gICAgICAgICAgICBkb2NDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCggJ2NvZGUnICkuZm9yRWFjaCggKCBibG9jayApID0+IHtcbiAgICAgICAgICAgICAgICAvLyBXcmFwIGFsbCBjb2RlIGJsb2NrcyB3aXRoIGEgcHJlIHRhZy5cbiAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3ByZScgKTtcbiAgICAgICAgICAgICAgICBibG9jay5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggd3JhcHBlciwgYmxvY2sgKTtcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKCBibG9jayApO1xuXG4gICAgICAgICAgICAgICAgaGxqcy5oaWdobGlnaHRCbG9jayggYmxvY2sgKTtcbiAgICAgICAgICAgIH0gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRG9jdW1lbnRhdGlvbjtcbiIsIi8vIEltcG9ydCBtYWluIHN0eWxlIGZpbGUgaGVyZS5cbmltcG9ydCAnLi4vc2Nzcy9hcHAuc2Nzcyc7XG5cbi8vIEltcG9ydCBpbmRpdmlkdWFsIGNvbXBvbmVudCBjbGFzc2VzIGhlcmUuXG5pbXBvcnQgQm9pbGVyUGxhdGUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9ib2lsZXJwbGF0ZS9ib2lsZXJwbGF0ZSc7XG5pbXBvcnQgTmF2YmFyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhcic7XG5pbXBvcnQgQWNjb3JkaW9uIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbic7XG5pbXBvcnQgVGFicyBmcm9tICcuLi8uLi9jb21wb25lbnRzL3RhYnMvdGFicyc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9tb2RhbC9tb2RhbCc7XG5pbXBvcnQgTWVzc2FnZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL21lc3NhZ2UvbWVzc2FnZSc7XG5cbi8vIFJ1biBjb21wb25lbnRzIGFuZCBhZGQgdGhlbSB0byB0aGUgbWFwXG4vLyB0aGUgY29tcG9uZW50IHNsdWcgYmVpbmcgdGhlIGtleS5cbmNvbnN0IGNvbXBvbmVudHMgPSB7XG4gICAgYm9pbGVycGxhdGU6IG5ldyBCb2lsZXJQbGF0ZSgpLFxuICAgIG5hdmJhcjogbmV3IE5hdmJhcigpLFxuICAgIGFjY29yZGlvbjogbmV3IEFjY29yZGlvbigpLFxuICAgIHRhYnM6IG5ldyBUYWJzKCksXG4gICAgbW9kYWw6IG5ldyBNb2RhbCgpLFxuICAgIG1lc3NhZ2U6IG5ldyBNZXNzYWdlKCksXG59O1xuXG4vLyBJbml0aWFsaXplIGRvY3VtZW50YXRpb24gZnVuY3Rpb25hbGl0aWVzLlxuaW1wb3J0IERvY3VtZW50YXRpb24gZnJvbSAnLi9kb2N1bWVudGF0aW9uJztcbm5ldyBEb2N1bWVudGF0aW9uKCBjb21wb25lbnRzICk7XG4iXSwic291cmNlUm9vdCI6IiJ9