!function(t){function e(e){for(var a,s,l=e[0],r=e[1],d=e[2],u=0,h=[];u<l.length;u++)s=l[u],Object.prototype.hasOwnProperty.call(i,s)&&i[s]&&h.push(i[s][0]),i[s]=0;for(a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);for(c&&c(e);h.length;)h.shift()();return o.push.apply(o,d||[]),n()}function n(){for(var t,e=0;e<o.length;e++){for(var n=o[e],a=!0,l=1;l<n.length;l++){var r=n[l];0!==i[r]&&(a=!1)}a&&(o.splice(e--,1),t=s(s.s=n[0]))}return t}var a={},i={0:0},o=[];function s(e){if(a[e])return a[e].exports;var n=a[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=a,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)s.d(n,a,function(e){return t[e]}.bind(null,a));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="";var l=window.webpackJsonp=window.webpackJsonp||[],r=l.push.bind(l);l.push=e,l=l.slice();for(var d=0;d<l.length;d++)e(l[d]);var c=r;o.push([3,1]),n()}([,,,function(t,e,n){t.exports=n(11)},function(t,e,n){},function(t,e){t.exports='<h2 id="component-documentation">Component documentation</h2>\n<p><em>Add component specific documentation here.</em></p>\n<h3 id="tests-and-accessibility-status">Tests and accessibility status</h3>\n<p>The accessibility-ready status of this component is: untested.</p>\n<ul>\n<li><input disabled="" type="checkbox"> Keyboard-only</li>\n<li><input disabled="" type="checkbox"> VoiceOver &amp; Safari (macOS)</li>\n<li><input disabled="" type="checkbox"> VoiceOver &amp; Safari (iOS)</li>\n<li><input disabled="" type="checkbox"> VoiceOver &amp; Safari (iPadOS)</li>\n<li><input disabled="" type="checkbox"> Talkback &amp; Chrome (Android)</li>\n<li><input disabled="" type="checkbox"> Narrator &amp; Edge (Windows)</li>\n<li><input disabled="" type="checkbox"> NVDA &amp; Firefox (Windows)</li>\n<li><input disabled="" type="checkbox"> Windows High Contrast mode</li>\n</ul>\n<h3 id="html">HTML</h3>\n<p><em>Document HTML  markup here and add the code block for easy copy-pasting.</em></p>\n<pre><code>&lt;button class=&quot;button button--boilerplate&quot;&gt;Boilerplate&lt;/button&gt;</code></pre><h3 id="javascript">JavaScript</h3>\n<p><em>Document JavaScript markup here and add the code block for easy copy-pasting.</em></p>\n<pre><code>const something = 123;</code></pre><h3 id="scss">SCSS</h3>\n<p><em>Document SCSS markup here and add the code block for easy copy-pasting.</em></p>\n<pre><code>.button--boilerplate {\n    background-color: #000;\n}</code></pre>'},function(t,e){t.exports='<h2 id="navbar-component">Navbar component</h2>\n<p>This component provides a fully functional navbar implementation for the Bulma navbar component.</p>\n<h3 id="tests-and-accessibility-status">Tests and accessibility status</h3>\n<p>The accessibility-ready status of this component is: untested.</p>\n<ul>\n<li><input checked="" disabled="" type="checkbox"> Keyboard-only</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (macOS)</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (iOS)</li>\n<li><input disabled="" type="checkbox"> VoiceOver &amp; Safari (iPadOS)</li>\n<li><input disabled="" type="checkbox"> Talkback &amp; Chrome (Android)</li>\n<li><input disabled="" type="checkbox"> Narrator &amp; Edge (Windows)</li>\n<li><input disabled="" type="checkbox"> NVDA &amp; Firefox (Windows)</li>\n<li><input disabled="" type="checkbox"> Windows High Contrast mode</li>\n</ul>\n<h3 id="html">HTML</h3>\n<p>The Bulmally navbar follows the Bulma navbar markup with some exceptions. Hoverable dropdowns are not accessible, that is why we do not support them. Instead, we provide an accessible markup for controlling a dropdown menu within the navbar.</p>\n<p>The Bulma documentation uses a link as the dropdown toggler. This is bad practice, it should be a button. Bulmally dropdown toggler can be an actual link itself. This is done by adding a container that holds the link and a button for toggling the dropdown menu. This makes the link accessible and uses semantic HTML element for the toggler: a button. The button has a screen reader only text and a down arrow for sighted usage.</p>\n<pre><code>&lt;nav class=&quot;navbar bulmally-navbar&quot; role=&quot;navigation&quot; aria-label=&quot;main navigation&quot;&gt;\n    &lt;div class=&quot;navbar-brand&quot;&gt;\n        &lt;a class=&quot;navbar-item&quot; href=&quot;#&quot;&gt;\n            &lt;span class=&quot;is-sr-only&quot;&gt;Home&lt;/span&gt;\n            &lt;img src=&quot;https://bulma.io/images/bulma-logo.png&quot; width=&quot;112&quot; height=&quot;28&quot; aria-hidden=true&gt;\n        &lt;/a&gt;\n\n        &lt;button\n            id=&quot;js-navbar-burger&quot;\n            class=&quot;navbar-burger burger&quot;\n            aria-expanded=&quot;false&quot;\n            aria-label=&quot;Open menu&quot;\n            aria-expanded=&quot;false&quot;\n            aria-controls=&quot;js-menu&quot;&gt;\n            &lt;span aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n            &lt;span aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n            &lt;span aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n        &lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=&quot;js-navbar-menu&quot; class=&quot;navbar-menu&quot;&gt;\n        &lt;div class=&quot;navbar-start&quot;&gt;\n            &lt;a class=&quot;navbar-item&quot; href=&quot;#&quot;&gt;\n                Home\n            &lt;/a&gt;\n\n            &lt;a class=&quot;navbar-item&quot; href=&quot;#&quot;&gt;\n                Documentation\n            &lt;/a&gt;\n\n            &lt;div class=&quot;navbar-item has-dropdown level&quot;&gt;\n                &lt;div class=&quot;navbar-dropdown-control&quot;&gt;\n                    &lt;!-- The link is clickable. --&gt;\n                    &lt;a class=&quot;navbar-link is-arrowless&quot; href=&quot;#&quot;&gt;\n                        More\n                    &lt;/a&gt;\n                    &lt;!-- This button implements the dropdown toggler. --&gt;\n                    &lt;button class=&quot;dropdown-toggler icon&quot; aria-expanded=false aria-controls=&quot;js-navbar-dropdown-1&quot;&gt;\n                        &lt;span class=&quot;is-sr-only&quot;&gt;Open menu&lt;/span&gt;\n                        &lt;i class=&quot;arrow&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n                    &lt;/button&gt;\n                &lt;/div&gt;\n\n                &lt;!--\n                    Bulma does not hide dropdown menu on touch.\n                    We hide it here with the modifier class.\n                    Toggling is handled with JS.\n                --&gt;\n                &lt;div class=&quot;navbar-dropdown is-hidden-touch&quot; id=&quot;js-navbar-dropdown-1&quot;&gt;\n                    &lt;a class=&quot;navbar-item&quot; href=&quot;#&quot;&gt;\n                        About\n                    &lt;/a&gt;\n                    &lt;a class=&quot;navbar-item&quot; href=&quot;#&quot;&gt;\n                        Jobs\n                    &lt;/a&gt;\n                    &lt;a class=&quot;navbar-item&quot; href=&quot;#&quot;&gt;\n                        Contact\n                    &lt;/a&gt;\n                    &lt;hr class=&quot;navbar-divider&quot;&gt;\n                    &lt;a class=&quot;navbar-item&quot; href=&quot;#&quot;&gt;\n                        Report an issue\n                    &lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=&quot;navbar-end&quot;&gt;\n            &lt;div class=&quot;navbar-item&quot;&gt;\n                &lt;div class=&quot;buttons&quot;&gt;\n                    &lt;a class=&quot;button is-primary&quot; href=&quot;#&quot;&gt;\n                        &lt;strong&gt;Sign up&lt;/strong&gt;\n                    &lt;/a&gt;\n                    &lt;a class=&quot;button is-light&quot; href=&quot;#&quot;&gt;\n                        Log in\n                    &lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;</code></pre><h3 id="javascript">JavaScript</h3>\n<p>This JS implementation is written in ES6 and uses VanillaJS to control the states in the DOM. You may use it as it is and use <a href="https://babeljs.io/">Babel</a> to make it backwards compatible with older browsers. If you do not have Babel in your environment, it should be pretty straightforward to copy the required parts of this code.</p>\n<pre><code>/**\n * Class Navbar\n */\nexport default class Navbar {\n    /**\n     * This method is run automatically when the module is imported,\n     * because it exports a new instance of itself.\n     */\n    constructor() {\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.docReady();\n            }\n        );\n    }\n\n    /**\n     * Cache dom elements for use in the class&#39;s methods\n     */\n    cache() {\n        this.navbarBurger = document.getElementById( &#39;js-navbar-burger&#39; );\n        this.navbarMenu = document.getElementById( &#39;js-navbar-menu&#39; );\n        if ( this.navbarMenu ) {\n            this.dropdownTogglers = this.navbarMenu.querySelectorAll( &#39;.dropdown-toggler&#39; );\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    events() {\n        if ( this.navbarBurger ) {\n            this.navbarBurger.addEventListener( &#39;click&#39;, () =&gt; this.toggleMenu() );\n        }\n\n        if ( this.dropdownTogglers ) {\n            for ( let i = 0; i &lt; this.dropdownTogglers.length; i++ ) {\n                this.dropdownTogglers[ i ].addEventListener( &#39;click&#39;, ( event ) =&gt; this.toggleDropdown( event ) );\n            }\n        }\n    }\n\n    /**\n     * Handle menu toggling when the navbar burger is clicked.\n     */\n    toggleMenu() {\n        this.navbarBurger.classList.toggle( &#39;is-active&#39; );\n        this.navbarMenu.classList.toggle( &#39;is-active&#39; );\n        this.toggleAriaExpanded( this.navbarBurger );\n    }\n\n    /**\n     * Toggles a dropdown menu visibility.\n     *\n     * @param {Event} event A click event.\n     */\n    toggleDropdown( event ) {\n        const target = event.target;\n        const containerId = target.getAttribute( &#39;aria-controls&#39; );\n        const dropdownMenu = this.navbarMenu.querySelector( `#${ containerId }` );\n\n        this.toggleAriaExpanded( target );\n        dropdownMenu.classList.toggle( &#39;is-hidden-touch&#39; );\n        this.toggleAncestorActiveState( target, &#39;has-dropdown&#39; );\n    }\n\n    /**\n     * Set the &#39;is-active&#39; state for an ancestor of an element\n     * with the matching class name.\n     *\n     * @param {HTMLElement} child A child element to start the search from.\n     * @param {HTMLElement} className A target class name for the ancestor.\n     */\n    toggleAncestorActiveState( child, className ) {\n        let ancestor = child.parentNode;\n        while ( ancestor ) {\n            if ( ancestor.classList.contains( className ) ) {\n                ancestor.classList.toggle( &#39;is-active&#39; );\n                return;\n            }\n            ancestor = ancestor.parentNode ? ancestor.parentNode : false;\n        }\n    }\n\n    /**\n     * Get the toggler&#39;s aria-expanded current state and set a new opposite state to it.\n     * Also set the opened container&#39;s aria-hidden state to the new value&#39;s opposite.\n     *\n     * @param {HTMLElement} toggler The toggler element.\n     */\n    toggleAriaExpanded( toggler ) {\n        const ariaExpandedState = toggler.getAttribute( &#39;aria-expanded&#39; ) === &#39;false&#39; ? true : false;\n        toggler.setAttribute( &#39;aria-expanded&#39;, ariaExpandedState );\n    }\n\n    /**\n     * Run when the document is ready.\n     */\n    docReady() {\n        this.cache();\n        this.events();\n    }\n}</code></pre><h3 id="scss">SCSS</h3>\n<p>We use the component class name as the CSS scope for our modifications for the basic Bulma CSS code. We keep the changes to a minimum and most of this code is applied to separate the dropdown toggler from the menu link containing a dropdown menu.</p>\n<pre><code>// This file contains styles for the navbar component.\n.bulmally-navbar {\n\n    // Reset all buttons inside a navbar.\n    button {\n        background: none;\n        border: 0;\n    }\n\n    .navbar-burger {\n        &amp;:hover {\n            background: $navbar-dropdown-item-hover-background-color;\n        }\n    }\n\n    .navbar-dropdown-control {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        .navbar-link {\n            flex: 1 1 auto;\n            padding-right: 1rem;\n\n            &amp;:hover {\n                // The link background is controlled on the &#39;.has-dropdown&#39; level.\n                background: none;\n            }\n        }\n    }\n\n    .navbar-item {\n        &amp;.has-dropdown {\n            &amp;:hover,\n            &amp;.is-active {\n                background-color: $navbar-item-hover-background-color;\n            }\n        }\n    }\n\n    .dropdown-toggler {\n        position: relative; // Make the arrow stick to the button.\n        flex: 0 0 auto;\n        margin-right: .75rem;\n        transition: transform $speed $easing;\n\n        &amp;[aria-expanded=&quot;true&quot;] {\n            transform: rotate(180deg);\n        }\n\n        .arrow {\n            @extend %arrow;\n            width: .75rem;\n            height: .75rem;\n            margin-top: -.5rem;\n            border-color: $navbar-dropdown-arrow;\n        }\n    }\n}</code></pre>'},function(t,e){t.exports='<h2 id="accordion-component">Accordion component</h2>\n<p>This component provides an accordion functionality with added accessible JS implementation.</p>\n<h3 id="tests-and-accessibility-status">Tests and accessibility status</h3>\n<p>The accessibility-ready status of this component is: untested.</p>\n<ul>\n<li><input checked="" disabled="" type="checkbox"> Keyboard-only</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (macOS)</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (iOS)</li>\n<li><input disabled="" type="checkbox"> VoiceOver &amp; Safari (iPadOS)</li>\n<li><input disabled="" type="checkbox"> Talkback &amp; Chrome (Android)</li>\n<li><input disabled="" type="checkbox"> Narrator &amp; Edge (Windows)</li>\n<li><input disabled="" type="checkbox"> NVDA &amp; Firefox (Windows)</li>\n<li><input disabled="" type="checkbox"> Windows High Contrast mode</li>\n</ul>\n<h3 id="html">HTML</h3>\n<p>The Bulmally accordion&#39;s titles are inside a button so that they are focusable and clickable.</p>\n<pre><code>&lt;div id=&quot;js-bulmally-accordion&quot; class=&quot;bulmally-accordion&quot;&gt;\n    &lt;div class=&quot;columns is-multiline&quot;&gt;\n\n        &lt;div class=&quot;column is-10-tablet is-offset-1-tablet is-8-desktop is-offset-2-desktop&quot;&gt;\n            &lt;div class=&quot;accordion-row box&quot;&gt;\n                &lt;h3 class=&quot;h4 accordion-title&quot;&gt;\n                    &lt;!-- This controls the section. Toggling the state is done with JS --&gt;\n                    &lt;button\n                        id=&quot;accordion-title-button-1&quot;\n                        class=&quot;accordion-title-button&quot;\n                        aria-expanded=&quot;false&quot;\n                        aria-controls=&quot;accordion-content-1&quot;&gt;\n\n                        &lt;div class=&quot;level is-mobile&quot;&gt;\n                            &lt;div class=&quot;level-left can-shrink&quot;&gt;\n                                &lt;span class=&quot;level-item can-shrink accordion-title-text&quot;&gt;\n                                    This heading is clickable\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div class=&quot;level-right&quot;&gt;\n                                &lt;span class=&quot;level-item icon accordion-title-icon&quot;&gt;\n                                    &lt;i class=&quot;fas fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/button&gt;\n                &lt;/h3&gt;\n\n                &lt;!-- The ID of this element has to be dynamically added. --&gt;\n                &lt;div id=&quot;accordion-content-1&quot; class=&quot;accordion-content&quot;&gt;\n                    &lt;div class=&quot;content is-small&quot;&gt;\n                        &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n\n                        &lt;h3&gt;Lorem ipsum dolor sit amet consectetur&lt;/h3&gt;\n\n                        &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Next accordion row --&gt;\n\n        &lt;div class=&quot;column is-10-tablet is-offset-1-tablet is-8-desktop is-offset-2-desktop&quot;&gt;\n            &lt;div class=&quot;accordion-row box&quot;&gt;\n                &lt;h3 class=&quot;h4 accordion-title&quot;&gt;\n                    &lt;!-- This controls the section. Toggling the state is done with JS --&gt;\n                    &lt;button\n                        id=&quot;accordion-title-button-1&quot;\n                        class=&quot;accordion-title-button&quot;\n                        aria-expanded=&quot;false&quot;\n                        aria-controls=&quot;accordion-content-1&quot;&gt;\n\n                        &lt;div class=&quot;level is-mobile&quot;&gt;\n                            &lt;div class=&quot;level-left can-shrink&quot;&gt;\n                                &lt;span class=&quot;level-item can-shrink accordion-title-text&quot;&gt;\n                                    This heading is clickable\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div class=&quot;level-right&quot;&gt;\n                                &lt;span class=&quot;level-item icon accordion-title-icon&quot;&gt;\n                                    &lt;i class=&quot;fas fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/button&gt;\n                &lt;/h3&gt;\n\n                &lt;!-- The ID of this element has to be dynamically added. --&gt;\n                &lt;div id=&quot;accordion-content-1&quot; class=&quot;accordion-content&quot;&gt;\n                    &lt;div class=&quot;content is-small&quot;&gt;\n                        &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n\n                        &lt;h3&gt;Lorem ipsum dolor sit amet consectetur&lt;/h3&gt;\n\n                        &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre><h3 id="javascript">JavaScript</h3>\n<p>This JS implementation is written in ES6 and uses VanillaJS to control the states in the DOM. You may use it as it is and use <a href="https://babeljs.io/">Babel</a> to make it backwards compatible with older browsers. If you do not have Babel in your environment, it should be pretty straightforward to copy the required parts of this code.</p>\n<pre><code>/**\n * Accordion JS controller.\n */\n\n/**\n * Class Accordion\n */\nexport default class Accordion {\n    /**\n     * This method is run when a new instance of the class is created.\n     */\n    constructor() {\n        // This must be set for each component.\n        this.documentation = require( &#39;./accordion.md&#39; );\n\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.docReady();\n            }\n        );\n    }\n\n    /**\n     * Cache dom elements for use in the class&#39;s methods\n     */\n    cache() {\n        this.mainContainer = document.getElementById( &#39;js-bulmally-accordion&#39; );\n\n        if ( this.mainContainer ) {\n            this.dropdownTogglers = this.mainContainer.querySelectorAll( &#39;.accordion-title-button&#39; );\n            this.dropdowns = this.mainContainer.querySelectorAll( &#39;.accordion-content&#39; );\n        }\n\n        // Hide all toggleable elements with JS.\n        for ( let i = 0; i &lt; this.dropdowns.length; i++ ) {\n            this.dropdowns[ i ].classList.add( &#39;is-hidden&#39; );\n        }\n    }\n\n    /**\n     * Add event listeners.\n     */\n    events() {\n        if ( this.dropdownTogglers ) {\n            for ( let i = 0; i &lt; this.dropdownTogglers.length; i++ ) {\n                this.dropdownTogglers[ i ].addEventListener( &#39;click&#39;, () =&gt; this.toggleDropdown( this.dropdownTogglers[ i ] ) );\n            }\n        }\n    }\n\n    /**\n     * Toggles a dropdown content visibility.\n     *\n     * @param {HTMLButtonElement} clickedToggler The toggler button that was clicked.\n     */\n    toggleDropdown( clickedToggler ) {\n        const containerId = clickedToggler.getAttribute( &#39;aria-controls&#39; );\n        const dropDownContent = this.mainContainer.querySelector( `#${ containerId }` );\n\n        this.toggleAriaExpanded( clickedToggler );\n        dropDownContent.classList.toggle( &#39;is-hidden&#39; );\n    }\n\n    /**\n     * Get the toggler&#39;s aria-expanded current state and set a new opposite state to it.\n     * Also set the opened container&#39;s aria-hidden state to the new value&#39;s opposite.\n     *\n     * @param {HTMLElement} toggler The toggler element.\n     */\n    toggleAriaExpanded( toggler ) {\n        const ariaExpandedState = toggler.getAttribute( &#39;aria-expanded&#39; ) === &#39;false&#39; ? true : false;\n        toggler.setAttribute( &#39;aria-expanded&#39;, ariaExpandedState );\n    }\n\n    /**\n     * Run when the document is ready.\n     */\n    docReady() {\n        this.cache();\n        this.events();\n    }\n}</code></pre><h3 id="scss">SCSS</h3>\n<p>We use the component class name as the CSS scope for our modifications to the basic Bulma CSS code.</p>\n<pre><code>// This file contains all styles for the accordion element.\n.bulmally-accordion {\n\n    .accordion-title-button {\n        appearance: none;\n\n        background-color: $white;\n        border: 0;\n        box-shadow: none;\n        width: 100%;\n\n        &amp;[aria-expanded=&quot;true&quot;] {\n            .icon {\n                transform: rotate(-180deg);\n            }\n        }\n    }\n\n    .accordion-title-icon {\n        transition: transform .2s ease;\n    }\n\n    .accordion-content {\n        margin-top: 1.25rem;\n        padding-top: 1.25rem;\n        border-top: .0625rem solid $grey-lighter;\n    }\n\n    .can-shrink {\n        flex-shrink: 1;\n    }\n}</code></pre>'},function(t,e){t.exports='<h2 id="tabs-component">Tabs component</h2>\n<p>This component provides the needed JavaScript functionalities for the <a href="https://bulma.io/documentation/components/tabs/">Bulma tabs</a>. Accessibility is implemented with JavaScript making the DOM as simple as possible. There are two tab elements on this page to demonstrate that you can have multiple tabs on the same page. All Bulma tab styles are supported.</p>\n<h3 id="tests-and-accessibility-status">Tests and accessibility status</h3>\n<p>The accessibility-ready status of this component is: untested.</p>\n<ul>\n<li><input checked="" disabled="" type="checkbox"> Keyboard-only</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (macOS)</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (iOS)</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (iPadOS)</li>\n<li><input disabled="" type="checkbox"> Talkback &amp; Chrome (Android)</li>\n<li><input disabled="" type="checkbox"> Narrator &amp; Edge (Windows)</li>\n<li><input disabled="" type="checkbox"> NVDA &amp; Firefox (Windows)</li>\n<li><input disabled="" type="checkbox"> Windows High Contrast mode</li>\n</ul>\n<h3 id="known-issues">Known issues</h3>\n<h3 id="html">HTML</h3>\n<p>Bulma uses buttons as tabs. We use anchor links instead. This makes tabs accessible even if JavaScript is not available. Each tab is an anchor link taking the user to the corresponding tab panel. If JavaScript is successfully loaded, all tab containers are queried from the DOM and their functionalities are initialized on the document ready event.</p>\n<h3 id="requirements">Requirements</h3>\n<ul>\n<li>Add a container for the tabs and the panels with a class named <em>&quot;bulmally-tabs&quot;</em>.</li>\n<li>The <em>href</em> attribute of the link must be the id of the tab panel. This enables linking the tab to the panel.</li>\n<li>The tab panels should be placed directly after the tabs to create a logical tab order.</li>\n</ul>\n<pre><code>&lt;div class=&quot;bulmally-tabs&quot;&gt;\n    &lt;div class=&quot;tabs&quot;&gt;\n        &lt;ul aria-label=&quot;Add a description for the tabs here&quot;&gt;\n            &lt;li class=&quot;is-active&quot;&gt;&lt;a href=&quot;#first&quot;&gt;First&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=&quot;#second&quot;&gt;Second&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=&quot;#third&quot;&gt;Third&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=&quot;#fourth&quot;&gt;Fourth&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n        &lt;div id=&quot;first&quot;&gt;\n            &lt;h2&gt;First&lt;/h2&gt;\n        &lt;/div&gt;\n        &lt;div id=&quot;second&quot;&gt;\n            &lt;h2&gt;Second&lt;/h2&gt;\n        &lt;/div&gt;\n        &lt;div id=&quot;third&quot;&gt;\n            &lt;h2&gt;Third&lt;/h2&gt;\n        &lt;/div&gt;\n        &lt;div id=&quot;fourth&quot;&gt;\n            &lt;h2&gt;Fourth&lt;/h2&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;</code></pre><h3 id="scss">SCSS</h3>\n<p>The only styling required is the hidden state of the panels. This is done by using the <em>&quot;hidden&quot;</em> attribute as the CSS selector.</p>\n<pre><code>.bulmally-tabs {\n\n    &amp;-panel[hidden] {\n        display: none;\n    }\n\n}</code></pre><h3 id="javascript">JavaScript</h3>\n<p>Bulmally tabs implements the WAI-ARIA <a href="https://www.w3.org/TR/wai-aria-practices/#tabpanel">tabs design pattern</a>. JavaScript code is based on the WAI-ARIA example for <a href="(https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html)">manually activated tabs</a>. The implementation provides the following features:</p>\n<ul>\n<li>Tab navigation with arrow keys.</li>\n<li>Tab panel activation by pressing enter or space on the focused tab.</li>\n<li>Tab panel activation on mouse click event.</li>\n<li>Focus handling for all interactions.</li>\n</ul>\n<p>We extended the WAI-ARIA example with the ability to have multiple tab elements on the same page. If you create tabs dynamically <em>(after the document ready event)</em>, you can initialize their accessibility features by passing the Bulmally tabs element container for the <em>init()</em> method. You can find an example of this in the <em>initAllTabs()</em> method that finds and initializes all Bulmally tab elements on the document ready event.</p>\n<pre><code>/**\n * Tabs JS controller.\n */\n\n// For easy reference\nconst keys = {\n    end: 35,\n    home: 36,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    enter: 13,\n    space: 32,\n};\n\n// Add or subtract depending on key pressed\nconst direction = {\n    37: -1,\n    38: -1,\n    39: 1,\n    40: 1,\n};\n\n/**\n * Class Tabs\n */\nexport default class Tabs {\n    /**\n     * This method is run automatically when the module is imported,\n     * because it exports a new instance of itself.\n     */\n    constructor() {\n        // This must be set for each component.\n        this.documentation = require( &#39;./readme.md&#39; );\n\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.initAllTabs();\n            }\n        );\n    }\n\n    /**\n     * Find all tab elements and initialize their functionalities.\n     * This method should be run on document ready to initialize all\n     * tabs in the DOM after the page is loaded.\n     */\n    initAllTabs() {\n        this.allTabs = document.querySelectorAll( &#39;.bulmally-tabs&#39; );\n\n        if ( ! this.allTabs ) {\n            // No tabs found.\n            return;\n        }\n\n        for ( let i = 0; i &lt; this.allTabs.length; i++ ) {\n            this.init( this.allTabs[ i ] );\n        }\n    }\n\n    /**\n     * Initalize a single tabs element.\n     *\n     * @param {HTMLElement} tabsElement Bulmally tabs container.\n     */\n    init( tabsElement ) {\n        const tabsContainer = tabsElement.querySelector( &#39;.tabs&#39; );\n        const tablist = tabsContainer.querySelector( &#39;ul&#39; );\n        const tabs = tablist.querySelectorAll( &#39;a&#39; );\n        const tabListItems = tablist.querySelectorAll( &#39;li&#39; );\n\n        // Store references to the first and the last tab for focus manipulations.\n        // Initialize an array for storing references to all tabs.\n        tablist.firstTab = tabs[ 0 ];\n        tablist.lastTab = tabs[ tabs.length - 1 ];\n        tablist.tabs = [];\n        tablist.panels = [];\n\n        // Set tablist role\n        tablist.setAttribute( &#39;role&#39;, &#39;tablist&#39; );\n\n        // Initialize tabs.\n        for ( let i = 0; i &lt; tabs.length; i++ ) {\n            this.initTab( tabs[ i ], tablist, i );\n        }\n\n        for ( let i = 0; i &lt; tabListItems.length; i++ ) {\n            // All &lt;li&gt; elements must have a role of presentation.\n            tabListItems[ i ].setAttribute( &#39;role&#39;, &#39;presentation&#39; );\n        }\n\n        // Activate the first tab\n        this.activateTab( tablist.firstTab );\n    }\n\n    /**\n     * Initialize functionalities for a tab element.\n     *\n     * @param {HTMLElement} tab A tab link.\n     * @param {HTMLElement} tablist The tablist element for the tab.\n     * @param {number} index The current element index in the tab list.\n     */\n    initTab( tab, tablist, index ) {\n        const panelId = tab.hash.slice( 1 );\n\n        // Create a unique id using the tab link&#39;s hash\n        tab.id = `tab-${ panelId }`;\n\n        // Make a two-way reference of the tab and its tablist.\n        tab.tablist = tablist;\n        tablist.tabs[ index ] = tab;\n\n        // Store the index.\n        tab.index = index;\n\n        // Initialize the corresponding panel.\n        tab.panel = document.getElementById( panelId );\n        this.initPanel( tab.panel, tab, tablist, index );\n\n        tab.setAttribute( &#39;role&#39;, &#39;tab&#39; );\n        tab.setAttribute( &#39;aria-selected&#39;, &#39;false&#39; );\n        tab.setAttribute( &#39;aria-controls&#39;, panelId );\n        tab.setAttribute( &#39;tabindex&#39;, &#39;-1&#39; );\n\n        tab.addEventListener( &#39;click&#39;, ( event ) =&gt; this.clickEventListener( event ) );\n        tab.addEventListener( &#39;keydown&#39;, ( event ) =&gt; this.keydownEventListener( event ) );\n        tab.addEventListener( &#39;keyup&#39;, ( event ) =&gt; this.keyupEventListener( event ) );\n    }\n\n    /**\n     * Initalize panel functionalities.\n     *\n     * @param {HTMLElement} panel The panel element.\n     * @param {HTMLElement} tab The corresponding tab element.\n     * @param {HTMLElement} tablist The tablist element for the tab.\n     * @param {number} index The index in panels.\n     */\n    initPanel( panel, tab, tablist, index ) {\n        if ( index !== 0 ) {\n            // Hide all but the first tab.\n            panel.hidden = true;\n        }\n\n        panel.setAttribute( &#39;tabindex&#39;, &#39;0&#39; );\n        panel.setAttribute( &#39;role&#39;, &#39;tabpanel&#39; );\n        panel.setAttribute( &#39;aria-labelledby&#39;, tab.id );\n\n        // Store a reference for the tablist.\n        tablist.panels.push( panel );\n    }\n\n    /**\n     * When a tab is clicked, activateTab is fired to activate it\n     *\n     * @param {Event} event Event object.\n     */\n    clickEventListener( event ) {\n        // Prevent the default click event.\n        event.preventDefault();\n\n        const tab = event.target;\n        this.activateTab( tab, false );\n    }\n\n    /**\n     * Handle keydown on tabs\n     *\n     * @param {Event} event Event object.\n     */\n    keydownEventListener( event ) {\n        const key = event.keyCode;\n        const tablist = event.target.tablist;\n\n        switch ( key ) {\n        case keys.end:\n            event.preventDefault();\n            // Activate last tab\n            this.focusLastTab( tablist );\n            break;\n        case keys.home:\n            event.preventDefault();\n            // Activate first tab\n            this.focusFirstTab( tablist );\n            break;\n\n        // Up and down are in keydown to prevent page scroll.\n        case keys.up:\n        case keys.down:\n            this.determineOrientation( event );\n            break;\n        case keys.enter:\n        case keys.space:\n            event.preventDefault();\n            this.activateTab( event.target, false );\n            break;\n        }\n    }\n\n    /**\n     * Handle keyup on tabs\n     *\n     * @param {Event} event Event object.\n     */\n    keyupEventListener( event ) {\n        const key = event.keyCode;\n\n        switch ( key ) {\n        case keys.left:\n        case keys.right:\n            this.determineOrientation( event );\n            break;\n        }\n    }\n\n    /**\n     * When a tablist&#39;s aria-orientation is set to vertical,\n     * only up and down arrow should function.\n     * only up and down arrow should function.\n     *\n     * @param {Event} event The event object.\n     */\n    determineOrientation( event ) {\n        const key = event.keyCode;\n        const vertical = event.target.tablist.getAttribute( &#39;aria-orientation&#39; ) === &#39;vertical&#39;;\n        let proceed = false;\n\n        if ( vertical ) {\n            if ( key === keys.up || key === keys.down ) {\n                event.preventDefault();\n                proceed = true;\n            }\n        } else if ( key === keys.left || key === keys.right ) {\n            proceed = true;\n        }\n\n        if ( proceed ) {\n            this.switchTabOnArrowPress( event );\n        }\n    }\n\n    /**\n     * Either focus the next, previous, first, or last tab\n     * depending on the key pressed.\n     *\n     * @param {Event} event Event object.\n     */\n    switchTabOnArrowPress( event ) {\n        const pressed = event.keyCode;\n\n        if ( direction[ pressed ] ) {\n            const target = event.target;\n            const tablist = target.tablist;\n            const tabs = tablist.tabs;\n            if ( target.index !== undefined ) {\n                if ( tabs[ target.index + direction[ pressed ] ] ) {\n                    tabs[ target.index + direction[ pressed ] ].focus();\n                } else if ( pressed === keys.left || pressed === keys.up ) {\n                    this.focusLastTab( tablist );\n                } else if ( pressed === keys.right || pressed === keys.down ) {\n                    this.focusFirstTab( tablist );\n                }\n            }\n        }\n    }\n\n    /**\n     * Activates any given tab panel\n     *\n     * @param {HTMLElement} tab A tab element.\n     * @param {boolean} setFocus Whether to set focus.\n     */\n    activateTab( tab, setFocus ) {\n        // Deactivate all other tabs\n        this.deactivateTabs( tab.tablist );\n\n        // Remove tabindex attribute.\n        tab.removeAttribute( &#39;tabindex&#39; );\n\n        // Set the tab as selected.\n        tab.setAttribute( &#39;aria-selected&#39;, &#39;true&#39; );\n\n        // Set Bulma class.\n        tab.parentNode.classList.add( &#39;is-active&#39; );\n\n        // Remove hidden attribute from tab panel to make it visible.\n        tab.panel.removeAttribute( &#39;hidden&#39; );\n\n        // Set focus when required.\n        if ( setFocus ) {\n            tab.panel.focus();\n        }\n    }\n\n    /**\n     * Deactivate all tabs and tab panels\n     *\n     * @param {HTMLElement} tablist The tablist element.\n     */\n    deactivateTabs( tablist ) {\n        for ( let t = 0; t &lt; tablist.tabs.length; t++ ) {\n            tablist.tabs[ t ].parentNode.classList.remove( &#39;is-active&#39; );\n            tablist.tabs[ t ].setAttribute( &#39;tabindex&#39;, &#39;-1&#39; );\n            tablist.tabs[ t ].setAttribute( &#39;aria-selected&#39;, &#39;false&#39; );\n        }\n\n        for ( let p = 0; p &lt; tablist.panels.length; p++ ) {\n            tablist.panels[ p ].setAttribute( &#39;hidden&#39;, &#39;hidden&#39; );\n        }\n    }\n\n    /**\n     * Focus on the first tab in the tablist of the given tab.\n     *\n     * @param {HTMLElement} tablist A tablist element.\n     */\n    focusFirstTab( tablist ) {\n        tablist.firstTab.focus();\n    }\n\n    /**\n     * Focus on the last tab in the tablist of the given tab.\n     *\n     * @param {HTMLElement} tablist A tablist element.\n     */\n    focusLastTab( tablist ) {\n        tablist.lastTab.focus();\n    }\n}\n</code></pre>'},function(t,e){t.exports='<h2 id="modal-component">Modal component</h2>\n<p>This component provides the needed JavaScript functionalities for the <a href="https://bulma.io/documentation/components/modal/">Bulma modal</a>. Accessibility is implemented with JavaScript making the DOM as simple as possible. There are two modal elements on this page to demonstrate that you can have multiple modals on the same page. All Bulma modal styles are supported.</p>\n<h3 id="tests-and-accessibility-status">Tests and accessibility status</h3>\n<p>The accessibility-ready status of this component is: untested.</p>\n<ul>\n<li><input checked="" disabled="" type="checkbox"> Keyboard-only</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (macOS)</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (iOS)</li>\n<li><input disabled="" type="checkbox"> VoiceOver &amp; Safari (iPadOS)</li>\n<li><input disabled="" type="checkbox"> Talkback &amp; Chrome (Android)</li>\n<li><input disabled="" type="checkbox"> Narrator &amp; Edge (Windows)</li>\n<li><input disabled="" type="checkbox"> NVDA &amp; Firefox (Windows)</li>\n<li><input disabled="" type="checkbox"> Windows High Contrast mode</li>\n</ul>\n<h3 id="html">HTML</h3>\n<p>The HTML markup is fairly simple. You need to have a button that controls a corresponding modal. In the modal overlay you may want to have a closing button although it is not necessary. Modals can also be closed with ESC and buttons inside them with <strong>modal-close-button</strong> classes.</p>\n<h3 id="requirements">Requirements</h3>\n<p>The modal containers should be placed at the bottom of your page markup so that their <strong>aria-role=&quot;modal&quot;</strong> attribute works properly.</p>\n<pre><code>&lt;!-- A button that controls opening the first modal --&gt;\n\n&lt;button\n    class=&quot;modal-button button is-large is-info&quot;\n    aria-expanded=&quot;false&quot;\n    aria-controls=&quot;js-bulmally-modal-1&quot;&gt;\n        Open modal\n&lt;/button&gt;\n\n&lt;!-- Markup of the first modal --&gt;\n\n&lt;div role=&quot;dialog&quot;\n    id=&quot;js-bulmally-modal-1&quot;\n    class=&quot;modal&quot;\n    aria-modal=&quot;true&quot;\n    aria-labelledby=&quot;js-bulmally-modal-1-title&quot;&gt;\n\n    &lt;div class=&quot;modal-background&quot;&gt;&lt;/div&gt;\n\n    &lt;div class=&quot;modal-content has-background-white&quot;&gt;\n\n        &lt;section class=&quot;section&quot;&gt;\n\n            &lt;h3 id=&quot;js-bulmally-modal-1-title&quot; class=&quot;h4 title&quot; tabindex=&quot;0&quot;&gt;Modal heading&lt;/h3&gt;\n\n            &lt;div class=&quot;content&quot;&gt;\n\n                &lt;p&gt;Lorem ipsum dolor sit amet consectetur &lt;a href=&quot;&quot;&gt;adipisicing elit&lt;/a&gt;. Aspernatur, quisquam molestias. Quaerat molestiae nam, explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil &lt;a href=&quot;&quot;&gt;odio nisi iusto&lt;/a&gt; ipsa laborum neque fugit.&lt;/p&gt;\n\n                &lt;h3&gt;Lorem ipsum dolor sit amet consectetur&lt;/h3&gt;\n\n                &lt;figure class=&quot;image is-marginless-horizontally&quot;&gt;\n                    &lt;img src=&quot;https://via.placeholder.com/1600x900.png?text=A+sample+image&quot; alt=&quot;&quot;&gt;\n                &lt;/figure&gt;\n\n                &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur, quisquam molestias. Quaerat molestiae nam, &lt;a href=&quot;&quot;&gt;explicabo quo nisi corporis! Blanditiis quam quibusdam, facilis nihil&lt;/a&gt; odio nisi iusto ipsa laborum neque fugit.&lt;/p&gt;\n\n                &lt;button class=&quot;button modal-close-button is-danger is-large&quot;\n                    aria-controls=&quot;js-bulmally-modal-1&quot;&gt;\n                    Close modal\n                &lt;/button&gt;\n            &lt;/div&gt;\n\n        &lt;/section&gt;\n\n    &lt;/div&gt;\n\n    &lt;button class=&quot;modal-close is-large&quot;\n        aria-label=&quot;close modal&quot;\n        aria-controls=&quot;js-bulmally-modal-1&quot;&gt;&lt;/button&gt;\n\n&lt;/div&gt;</code></pre><h3 id="scss">SCSS</h3>\n<p>The only styling changes are made to the focus style of the outer modal closing button.</p>\n<pre><code>.modal-close {\n    &amp;:focus {\n        outline: $white dotted .125rem;\n    }\n}\n</code></pre><h3 id="javascript">JavaScript</h3>\n<p>Bulmally tabs implements the WAI-ARIA <a href="https://www.w3.org/TR/wai-aria-practices/#dialog_modal">modal design pattern</a>. JavaScript code is based on the WAI-ARIA example for <a href="https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html">a modal dialog</a>. The implementation provides the following features:</p>\n<ul>\n<li>Modal navigation by pressing the tab key.</li>\n<li>Focusing the first element inside each opened modal.</li>\n<li>Focus looping, so that focusable elements inside the modal can be easily navigated.</li>\n<li>Returning focus back to the original element that opened the modal.</li>\n</ul>\n<p>We extended the WAI-ARIA example with the ability to have multiple modal elements on the same page. If you want to have many modals on one page, you need to make sure that each modal gets a unique id and its opening and closing buttons match the modal id in their <strong>aria-controls</strong> attributes.</p>\n<pre><code>/**\n * Modal JS controller.\n */\n\n/**\n * Class Modal\n */\nexport default class Modal {\n    /**\n     * This method is run when a new instance of the class is created.\n     */\n    constructor() {\n        // This must be set for each component.\n        this.documentation = require( &#39;./modal.md&#39; );\n\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.docReady();\n            }\n        );\n    }\n\n    /**\n     * Cache dom elements for use in the class&#39;s methods\n     */\n    cache() {\n        this.rootEl = document.documentElement;\n        this.$modals = [];\n        this.$modalButtons = document.querySelectorAll( &#39;.modal-button&#39; );\n        this.$modalCloses = document.querySelectorAll( &#39;.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button, .modal-close-button&#39; );\n    }\n\n    /**\n     * Add event listeners.\n     */\n    events() {\n        // Bind handlers to each modal open button.\n        if ( this.$modalButtons.length &gt; 0 ) {\n            this.$modalButtons.forEach( ( button ) =&gt; {\n                const modal = document.getElementById( button.getAttribute( &#39;aria-controls&#39; ) );\n                modal.openingButton = button;\n                modal.isOpened = 0;\n                this.$modals.push( modal );\n                button.addEventListener( &#39;click&#39;, () =&gt; {\n                    this.openModal( modal );\n                    this.toggleAriaExpanded( button );\n                } );\n            } );\n        }\n\n        // Bind handlers to each modal close button.\n        if ( this.$modalCloses.length &gt; 0 ) {\n            this.$modalCloses.forEach( ( button ) =&gt; {\n                button.addEventListener( &#39;click&#39;, () =&gt; {\n                    this.closeModals();\n                } );\n            } );\n        }\n\n        // Bind modal closing handler to ESC key.\n        document.addEventListener( &#39;keydown&#39;, ( event ) =&gt; {\n            const e = event || window.event;\n            if ( e.keyCode === 27 ) {\n                this.closeModals();\n            }\n        } );\n    }\n\n    /**\n     * This handles opening the modal that was associated with\n     * the clicked modal opening button.\n     *\n     * @param {Element} modal The modal that is opened.\n     */\n    openModal( modal ) {\n        this.rootEl.classList.add( &#39;is-clipped&#39; );\n        modal.classList.add( &#39;is-active&#39; );\n        modal.isOpened = 1;\n\n        // Collect each focusable element inside the modal.\n        const focusableElements = modal.querySelectorAll( &#39;a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex=&quot;0&quot;]&#39; );\n\n        // Set first and last focusable element as class parameters.\n        // Set focus to the first focusable element.\n        if ( focusableElements.length ) {\n            modal.focusableElements = focusableElements;\n            modal.focusableElements.first = focusableElements[ 0 ];\n            modal.focusableElements.last = focusableElements[ focusableElements.length - 1 ];\n            modal.focusableElements.first.focus();\n\n            // Bind modal focus loop handler to document when modal is opened.\n            // If pressed key was &#39;Tab&#39;, call tab handling method.\n            document.addEventListener( &#39;keydown&#39;, ( event ) =&gt; {\n                const e = event || window.event;\n                if ( e.keyCode === 9 ) {\n                    this.handleModalTabbing( e, modal );\n                }\n            } );\n        }\n    }\n\n    /**\n     * This closes all modals and sets focus back to the element that was used\n     * to open the current visible modal.\n     */\n    closeModals() {\n        this.rootEl.classList.remove( &#39;is-clipped&#39; );\n        this.$modals.forEach( ( modal ) =&gt; {\n            modal.classList.remove( &#39;is-active&#39; );\n            if ( modal.isOpened ) {\n                modal.openingButton.focus();\n                this.toggleAriaExpanded( modal.openingButton );\n                modal.isOpened = 0;\n            }\n        } );\n    }\n\n    /**\n     * This handles Tab key presses and loops focus back to the first\n     * focusable element inside the modal. If a user navigates backwards\n     * using shift + tab, the loop is handled properly to the opposite direction.\n     *\n     * @param {event} e Key press event.\n     * @param {Element} modal The modal that is currently visible.\n     */\n    handleModalTabbing( e, modal ) {\n        // If shift + tab pushed.\n        if ( e.shiftKey ) {\n            // Focus the last element if focus was on the first element.\n            if ( modal.focusableElements.first === document.activeElement ) {\n                e.preventDefault();\n                modal.focusableElements.last.focus();\n            }\n        } else if ( modal.focusableElements.last === document.activeElement ) {\n            e.preventDefault();\n            modal.focusableElements.first.focus();\n        }\n    }\n\n    /**\n     * Get the toggler&#39;s aria-expanded current state and set a new opposite state to it.\n     *\n     * @param {HTMLElement} toggler The toggler element.\n     */\n    toggleAriaExpanded( toggler ) {\n        const ariaExpandedState = toggler.getAttribute( &#39;aria-expanded&#39; ) === &#39;false&#39; ? true : false;\n        toggler.setAttribute( &#39;aria-expanded&#39;, ariaExpandedState );\n    }\n\n    /**\n     * Run when the document is ready.\n     */\n    docReady() {\n        this.cache();\n        this.events();\n    }\n}</code></pre>'},function(t,e){t.exports='<h2 id="message-component">Message component</h2>\n<p>Bulma describes the <a href="https://bulma.io/documentation/components/message/">message component</a> as a colored message block, to emphasize part of your page. Bulmally implements the closing functionality for it. We also modify the message HTML markup a little to make it semantically better.</p>\n<h3 id="tests-and-accessibility-status">Tests and accessibility status</h3>\n<p>The accessibility-ready status of this component is: untested.</p>\n<ul>\n<li><input checked="" disabled="" type="checkbox"> Keyboard-only</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (macOS)</li>\n<li><input checked="" disabled="" type="checkbox"> VoiceOver &amp; Safari (iOS)</li>\n<li><input disabled="" type="checkbox"> VoiceOver &amp; Safari (iPadOS)</li>\n<li><input disabled="" type="checkbox"> Talkback &amp; Chrome (Android)</li>\n<li><input disabled="" type="checkbox"> Narrator &amp; Edge (Windows)</li>\n<li><input disabled="" type="checkbox"> NVDA &amp; Firefox (Windows)</li>\n<li><input disabled="" type="checkbox"> Windows High Contrast mode</li>\n</ul>\n<h3 id="html">HTML</h3>\n<p>Instead of an article, we encourage to use a section tag for the message container. Heading should be inside a header element and the heading should have a heading tag with a level following the structure of your page. As an example, we use <em>h2</em> since the element probably does not contain the main heading of a page. Inside the delete button, you should add a descriptive text inside the span element targeted for screen readers. Using a span element instead of <em>aria-label</em> we support language translators that do not translate HTML attributes <em>(e.g. Google Translate)</em>.</p>\n<pre><code>&lt;section class=&quot;bulmally-message message&quot;&gt;\n    &lt;header class=&quot;message-header&quot;&gt;\n        &lt;h2&gt;Hello World&lt;/h2&gt;\n        &lt;button class=&quot;delete&quot;&gt;\n            &lt;span class=&quot;is-sr-only&quot;&gt;Close message&lt;/span&gt;\n        &lt;/button&gt;\n    &lt;/header&gt;\n    &lt;div class=&quot;message-body&quot;&gt;\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. &lt;strong&gt;Pellentesque risus mi&lt;/strong&gt;, tempus quis placerat ut, porta nec nulla. Vestibulum rhoncus ac ex sit amet fringilla. Nullam gravida purus diam, et dictum &lt;a&gt;felis venenatis&lt;/a&gt; efficitur. Aenean ac &lt;em&gt;eleifend lacus&lt;/em&gt;, in mollis lectus. Donec sodales, arcu et sollicitudin porttitor, tortor urna tempor ligula, id porttitor mi magna a neque. Donec dui urna, vehicula et sem eget, facilisis sodales sem.\n    &lt;/div&gt;\n&lt;/section&gt;</code></pre><h3 id="javascript">JavaScript</h3>\n<p>JavaScript handles removing the element and moving focus to the next sibling of the message element. If the message element has no siblings, focus is moved to the parent element. We encourage placing the message element so that is has a text element next to it. This makes the focus change logical for a screen reader to announce it after the previously focused delete button and the whole message element is removed from the DOM.</p>\n<p>If you create messages dynamically, the <em>Message</em> class has static methods for initalizing new message components. The <em>initMessages()</em> method has an example of how to initalize a single message component.</p>\n<pre><code>/**\n * Class Message\n */\nexport default class Message {\n    /**\n     * Construct the component handler.\n     */\n    constructor() {\n        document.addEventListener(\n            &#39;DOMContentLoaded&#39;,\n            () =&gt; {\n                this.initMessages();\n            }\n        );\n    }\n\n    /**\n     * Find all message elements and initalize their closing functionality.\n     */\n    initMessages() {\n        const messages = document.querySelectorAll( &#39;.bulmally-message&#39; );\n\n        for ( let i = 0; i &lt; messages.length; i++ ) {\n            Message.initMessage( messages[ i ] );\n        }\n    }\n\n    /**\n     * Initializes closing functionalities for a message element.\n     *\n     * @param {HTMLElement} messageElement A message element.\n     */\n    static initMessage( messageElement ) {\n        const deleteButton = messageElement.querySelector( &#39;.delete&#39; );\n        deleteButton.message = messageElement;\n\n        deleteButton.addEventListener( &#39;click&#39;, Message.delete );\n    }\n\n    /**\n     * Handles the click event of a delete button and deletes the message.\n     * Focus is set on the next element before deleting the element.\n     *\n     * @param {Event} event An event object.\n     */\n    static delete( event ) {\n        const message = event.target.message;\n        let focusTo = message.nextElementSibling;\n\n        if ( ! focusTo ) {\n            // If there&#39;s no sibling for the message,\n            // move focus to the parent node.\n            focusTo = message.parentNode;\n        }\n\n        // Force ability to give focus on the sibling.\n        if ( focusTo.tabIndex !== 0 ) {\n            focusTo.setAttribute( &#39;tabindex&#39;, -1 );\n        }\n        focusTo.focus();\n\n        message.remove();\n    }\n}</code></pre><h3 id="scss">SCSS</h3>\n<p>The heading of the message element should be inside a heading tag. Bulma styles headings without any weight by default. We set the correct weight with this simple override.</p>\n<pre><code>.bulmally-message {\n\n    .message-header {\n        h1, h2, h3, h4, h5, h6 {\n            // Override heading weight.\n            font-weight: $message-header-weight;\n        }\n    }\n\n}</code></pre>'},function(t,e,n){"use strict";n.r(e);n(4);function a(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var i=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.cache(),this.documentation=n(5),document.addEventListener("DOMContentLoaded",function(){e.docReady()})}var e,i,o;return e=t,(i=[{key:"cache",value:function(){}},{key:"events",value:function(){}},{key:"docReady",value:function(){this.cache(),this.events()}}])&&a(e.prototype,i),o&&a(e,o),t}();function o(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var s=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(6),document.addEventListener("DOMContentLoaded",function(){e.docReady()})}var e,a,i;return e=t,(a=[{key:"cache",value:function(){this.navbarBurger=document.getElementById("js-navbar-burger"),this.navbarMenu=document.getElementById("js-navbar-menu"),this.navbarMenu&&(this.dropdownTogglers=this.navbarMenu.querySelectorAll(".dropdown-toggler"))}},{key:"events",value:function(){var t=this;if(this.navbarBurger&&this.navbarBurger.addEventListener("click",function(){return t.toggleMenu()}),this.dropdownTogglers)for(var e=0;e<this.dropdownTogglers.length;e++)this.dropdownTogglers[e].addEventListener("click",function(e){return t.toggleDropdown(e)})}},{key:"toggleMenu",value:function(){this.navbarBurger.classList.toggle("is-active"),this.navbarMenu.classList.toggle("is-active"),this.toggleAriaExpanded(this.navbarBurger)}},{key:"toggleDropdown",value:function(t){var e=t.target,n=e.getAttribute("aria-controls"),a=this.navbarMenu.querySelector("#".concat(n));this.toggleAriaExpanded(e),a.classList.toggle("is-hidden-touch"),this.toggleAncestorActiveState(e,"has-dropdown")}},{key:"toggleAncestorActiveState",value:function(t,e){for(var n=t.parentNode;n;){if(n.classList.contains(e))return void n.classList.toggle("is-active");n=!!n.parentNode&&n.parentNode}}},{key:"toggleAriaExpanded",value:function(t){var e="false"===t.getAttribute("aria-expanded");t.setAttribute("aria-expanded",e)}},{key:"docReady",value:function(){this.cache(),this.events()}}])&&o(e.prototype,a),i&&o(e,i),t}();function l(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var r=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(7),document.addEventListener("DOMContentLoaded",function(){e.docReady()})}var e,a,i;return e=t,(a=[{key:"cache",value:function(){if(this.mainContainer=document.getElementById("js-bulmally-accordion"),this.mainContainer){this.dropdownTogglers=this.mainContainer.querySelectorAll(".accordion-title-button"),this.dropdowns=this.mainContainer.querySelectorAll(".accordion-content");for(var t=0;t<this.dropdowns.length;t++)this.dropdowns[t].classList.add("is-hidden")}}},{key:"events",value:function(){var t=this;if(this.dropdownTogglers)for(var e=function(e){t.dropdownTogglers[e].addEventListener("click",function(){return t.toggleDropdown(t.dropdownTogglers[e])})},n=0;n<this.dropdownTogglers.length;n++)e(n)}},{key:"toggleDropdown",value:function(t){var e=t.getAttribute("aria-controls"),n=this.mainContainer.querySelector("#".concat(e));this.toggleAriaExpanded(t),n.classList.toggle("is-hidden")}},{key:"toggleAriaExpanded",value:function(t){var e="false"===t.getAttribute("aria-expanded");t.setAttribute("aria-expanded",e)}},{key:"docReady",value:function(){this.cache(),this.events()}}])&&l(e.prototype,a),i&&l(e,i),t}();function d(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var c=35,u=36,h=37,p=38,m=39,b=40,g=13,f=32,v={37:-1,38:-1,39:1,40:1},y=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(8),document.addEventListener("DOMContentLoaded",function(){e.initAllTabs()})}var e,a,i;return e=t,(a=[{key:"initAllTabs",value:function(){if(this.allTabs=document.querySelectorAll(".bulmally-tabs"),this.allTabs)for(var t=0;t<this.allTabs.length;t++)this.init(this.allTabs[t])}},{key:"init",value:function(t){var e=t.querySelector(".tabs").querySelector("ul"),n=e.querySelectorAll("a"),a=e.querySelectorAll("li");e.firstTab=n[0],e.lastTab=n[n.length-1],e.tabs=[],e.panels=[],e.setAttribute("role","tablist");for(var i=0;i<n.length;i++)this.initTab(n[i],e,i);for(var o=0;o<a.length;o++)a[o].setAttribute("role","presentation");this.activateTab(e.firstTab)}},{key:"initTab",value:function(t,e,n){var a=this,i=t.hash.slice(1);t.id="tab-".concat(i),t.tablist=e,e.tabs[n]=t,t.index=n,t.panel=document.getElementById(i),this.initPanel(t.panel,t,e,n),t.setAttribute("role","tab"),t.setAttribute("aria-selected","false"),t.setAttribute("aria-controls",i),t.setAttribute("tabindex","-1"),t.addEventListener("click",function(t){return a.clickEventListener(t)}),t.addEventListener("keydown",function(t){return a.keydownEventListener(t)}),t.addEventListener("keyup",function(t){return a.keyupEventListener(t)})}},{key:"initPanel",value:function(t,e,n,a){0!==a&&(t.hidden=!0),t.setAttribute("tabindex","0"),t.setAttribute("role","tabpanel"),t.setAttribute("aria-labelledby",e.id),n.panels.push(t)}},{key:"clickEventListener",value:function(t){t.preventDefault();var e=t.target;this.activateTab(e,!1)}},{key:"keydownEventListener",value:function(t){var e=t.keyCode,n=t.target.tablist;switch(e){case c:t.preventDefault(),this.focusLastTab(n);break;case u:t.preventDefault(),this.focusFirstTab(n);break;case p:case b:this.determineOrientation(t);break;case g:case f:t.preventDefault(),this.activateTab(t.target,!1)}}},{key:"keyupEventListener",value:function(t){switch(t.keyCode){case h:case m:this.determineOrientation(t)}}},{key:"determineOrientation",value:function(t){var e=t.keyCode,n=!1;"vertical"===t.target.tablist.getAttribute("aria-orientation")?e!==p&&e!==b||(t.preventDefault(),n=!0):e!==h&&e!==m||(n=!0),n&&this.switchTabOnArrowPress(t)}},{key:"switchTabOnArrowPress",value:function(t){var e=t.keyCode;if(v[e]){var n=t.target,a=n.tablist,i=a.tabs;void 0!==n.index&&(i[n.index+v[e]]?i[n.index+v[e]].focus():e===h||e===p?this.focusLastTab(a):e!==m&&e!==b||this.focusFirstTab(a))}}},{key:"activateTab",value:function(t,e){this.deactivateTabs(t.tablist),t.removeAttribute("tabindex"),t.setAttribute("aria-selected","true"),t.parentNode.classList.add("is-active"),t.panel.removeAttribute("hidden"),e&&t.panel.focus()}},{key:"deactivateTabs",value:function(t){for(var e=0;e<t.tabs.length;e++)t.tabs[e].parentNode.classList.remove("is-active"),t.tabs[e].setAttribute("tabindex","-1"),t.tabs[e].setAttribute("aria-selected","false");for(var n=0;n<t.panels.length;n++)t.panels[n].setAttribute("hidden","hidden")}},{key:"focusFirstTab",value:function(t){t.firstTab.focus()}},{key:"focusLastTab",value:function(t){t.lastTab.focus()}}])&&d(e.prototype,a),i&&d(e,i),t}();function q(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var k=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(9),document.addEventListener("DOMContentLoaded",function(){e.docReady()})}var e,a,i;return e=t,(a=[{key:"cache",value:function(){this.rootEl=document.documentElement,this.$modals=[],this.$modalButtons=document.querySelectorAll(".modal-button"),this.$modalCloses=document.querySelectorAll(".modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button, .modal-close-button")}},{key:"events",value:function(){var t=this;this.$modalButtons.length>0&&this.$modalButtons.forEach(function(e){var n=document.getElementById(e.getAttribute("aria-controls"));n.openingButton=e,n.isOpened=0,t.$modals.push(n),e.addEventListener("click",function(){t.openModal(n),t.toggleAriaExpanded(e)})}),this.$modalCloses.length>0&&this.$modalCloses.forEach(function(e){e.addEventListener("click",function(){t.closeModals()})}),document.addEventListener("keydown",function(e){27===(e||window.event).keyCode&&t.closeModals()})}},{key:"openModal",value:function(t){var e=this;this.rootEl.classList.add("is-clipped"),t.classList.add("is-active"),t.isOpened=1;var n=t.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex="0"]');n.length&&(t.focusableElements=n,t.focusableElements.first=n[0],t.focusableElements.last=n[n.length-1],t.focusableElements.first.focus(),document.addEventListener("keydown",function(n){var a=n||window.event;9===a.keyCode&&e.handleModalTabbing(a,t)}))}},{key:"closeModals",value:function(){var t=this;this.rootEl.classList.remove("is-clipped"),this.$modals.forEach(function(e){e.classList.remove("is-active"),e.isOpened&&(e.openingButton.focus(),t.toggleAriaExpanded(e.openingButton),e.isOpened=0)})}},{key:"handleModalTabbing",value:function(t,e){t.shiftKey?e.focusableElements.first===document.activeElement&&(t.preventDefault(),e.focusableElements.last.focus()):e.focusableElements.last===document.activeElement&&(t.preventDefault(),e.focusableElements.first.focus())}},{key:"toggleAriaExpanded",value:function(t){var e="false"===t.getAttribute("aria-expanded");t.setAttribute("aria-expanded",e)}},{key:"docReady",value:function(){this.cache(),this.events()}}])&&q(e.prototype,a),i&&q(e,i),t}();function w(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var T=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.documentation=n(10),document.addEventListener("DOMContentLoaded",function(){e.initMessages()})}var e,a,i;return e=t,i=[{key:"initMessage",value:function(e){var n=e.querySelector(".delete");n.message=e,n.addEventListener("click",t.delete)}},{key:"delete",value:function(t){var e=t.target.message,n=e.nextElementSibling;n||(n=e.parentNode),0!==n.tabIndex&&n.setAttribute("tabindex",-1),n.focus(),e.remove()}}],(a=[{key:"initMessages",value:function(){for(var e=document.querySelectorAll(".bulmally-message"),n=0;n<e.length;n++)t.initMessage(e[n])}}])&&w(e.prototype,a),i&&w(e,i),t}(),x=n(0),E=n.n(x),A=n(1),S=n.n(A),L=n(2),M=n.n(L);function O(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}E.a.registerLanguage("javascript",S.a),E.a.registerLanguage("scss",M.a),new(function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.components=e,document.addEventListener("DOMContentLoaded",function(){n.initDocumentation()})}var e,n,a;return e=t,(n=[{key:"initDocumentation",value:function(){var t=window.location.pathname;for(var e in this.components){var n=this.components[e];if(t.includes(e)&&n.documentation){var a=document.getElementById("js-markdown");a&&(a.innerHTML=n.documentation,a.querySelectorAll("code").forEach(function(t){var e=document.createElement("pre");t.parentNode.insertBefore(e,t),e.appendChild(t),E.a.highlightBlock(t)}))}}}}])&&O(e.prototype,n),a&&O(e,a),t}())({boilerplate:new i,navbar:new s,accordion:new r,tabs:new y,modal:new k,message:new T})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,