(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(e,n,t){var r,a,i;a=function(e){var n,t=[],r=Object.keys,a={},i={},o=/^(no-?highlight|plain|text)$/i,s=/\blang(?:uage)?-([\w-]+)\b/i,l=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,c="</span>",d={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0};function u(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function g(e){return e.nodeName.toLowerCase()}function b(e,n){var t=e&&e.exec(n);return t&&0===t.index}function f(e){return o.test(e)}function p(e){var n,t={},r=Array.prototype.slice.call(arguments,1);for(n in e)t[n]=e[n];return r.forEach(function(e){for(n in e)t[n]=e[n]}),t}function m(e){var n=[];return function e(t,r){for(var a=t.firstChild;a;a=a.nextSibling)3===a.nodeType?r+=a.nodeValue.length:1===a.nodeType&&(n.push({event:"start",offset:r,node:a}),r=e(a,r),g(a).match(/br|hr|img|input/)||n.push({event:"stop",offset:r,node:a}));return r}(e,0),n}function h(e){if(n&&!e.langApiRestored){for(var t in e.langApiRestored=!0,n)e[t]&&(e[n[t]]=e[t]);(e.contains||[]).concat(e.variants||[]).forEach(h)}}function E(e){function n(e){return e&&e.source||e}function t(t,r){return new RegExp(n(t),"m"+(e.case_insensitive?"i":"")+(r?"g":""))}!function a(i,o){if(!i.compiled){if(i.compiled=!0,i.keywords=i.keywords||i.beginKeywords,i.keywords){var s={},l=function(n,t){e.case_insensitive&&(t=t.toLowerCase()),t.split(" ").forEach(function(e){var t=e.split("|");s[t[0]]=[n,t[1]?Number(t[1]):1]})};"string"==typeof i.keywords?l("keyword",i.keywords):r(i.keywords).forEach(function(e){l(e,i.keywords[e])}),i.keywords=s}i.lexemesRe=t(i.lexemes||/\w+/,!0),o&&(i.beginKeywords&&(i.begin="\\b("+i.beginKeywords.split(" ").join("|")+")\\b"),i.begin||(i.begin=/\B|\b/),i.beginRe=t(i.begin),i.endSameAsBegin&&(i.end=i.begin),i.end||i.endsWithParent||(i.end=/\B|\b/),i.end&&(i.endRe=t(i.end)),i.terminator_end=n(i.end)||"",i.endsWithParent&&o.terminator_end&&(i.terminator_end+=(i.end?"|":"")+o.terminator_end)),i.illegal&&(i.illegalRe=t(i.illegal)),null==i.relevance&&(i.relevance=1),i.contains||(i.contains=[]),i.contains=Array.prototype.concat.apply([],i.contains.map(function(e){return function(e){return e.variants&&!e.cached_variants&&(e.cached_variants=e.variants.map(function(n){return p(e,{variants:null},n)})),e.cached_variants||e.endsWithParent&&[p(e)]||[e]}("self"===e?i:e)})),i.contains.forEach(function(e){a(e,i)}),i.starts&&a(i.starts,o);var c=i.contains.map(function(e){return e.beginKeywords?"\\.?(?:"+e.begin+")\\.?":e.begin}).concat([i.terminator_end,i.illegal]).map(n).filter(Boolean);i.terminators=c.length?t(function(e,t){for(var r=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./,a=0,i="",o=0;o<e.length;o++){var s=a,l=n(e[o]);for(o>0&&(i+=t);l.length>0;){var c=r.exec(l);if(null==c){i+=l;break}i+=l.substring(0,c.index),l=l.substring(c.index+c[0].length),"\\"==c[0][0]&&c[1]?i+="\\"+String(Number(c[1])+s):(i+=c[0],"("==c[0]&&a++)}}return i}(c,"|"),!0):{exec:function(){return null}}}}(e)}function v(e,n,t,r){function i(e){return new RegExp(e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),"m")}function o(e,n){var t=p.case_insensitive?n[0].toLowerCase():n[0];return e.keywords.hasOwnProperty(t)&&e.keywords[t]}function s(e,n,t,r){var a='<span class="'+(r?"":d.classPrefix);return e?(a+=e+'">')+n+(t?"":c):n}function l(){N+=null!=h.subLanguage?function(){var e="string"==typeof h.subLanguage;if(e&&!a[h.subLanguage])return u(y);var n=e?v(h.subLanguage,y,!0,w[h.subLanguage]):_(y,h.subLanguage.length?h.subLanguage:void 0);return h.relevance>0&&(x+=n.relevance),e&&(w[h.subLanguage]=n.top),s(n.language,n.value,!1,!0)}():function(){var e,n,t,r;if(!h.keywords)return u(y);for(r="",n=0,h.lexemesRe.lastIndex=0,t=h.lexemesRe.exec(y);t;)r+=u(y.substring(n,t.index)),(e=o(h,t))?(x+=e[1],r+=s(e[0],u(t[0]))):r+=u(t[0]),n=h.lexemesRe.lastIndex,t=h.lexemesRe.exec(y);return r+u(y.substr(n))}(),y=""}function g(e){N+=e.className?s(e.className,"",!0):"",h=Object.create(e,{parent:{value:h}})}function f(e,n){if(y+=e,null==n)return l(),0;var r=function(e,n){var t,r;for(t=0,r=n.contains.length;t<r;t++)if(b(n.contains[t].beginRe,e))return n.contains[t].endSameAsBegin&&(n.contains[t].endRe=i(n.contains[t].beginRe.exec(e)[0])),n.contains[t]}(n,h);if(r)return r.skip?y+=n:(r.excludeBegin&&(y+=n),l(),r.returnBegin||r.excludeBegin||(y=n)),g(r),r.returnBegin?0:n.length;var a=function e(n,t){if(b(n.endRe,t)){for(;n.endsParent&&n.parent;)n=n.parent;return n}if(n.endsWithParent)return e(n.parent,t)}(h,n);if(a){var o=h;o.skip?y+=n:(o.returnEnd||o.excludeEnd||(y+=n),l(),o.excludeEnd&&(y=n));do{h.className&&(N+=c),h.skip||h.subLanguage||(x+=h.relevance),h=h.parent}while(h!==a.parent);return a.starts&&(a.endSameAsBegin&&(a.starts.endRe=a.endRe),g(a.starts)),o.returnEnd?0:n.length}if(function(e,n){return!t&&b(n.illegalRe,e)}(n,h))throw new Error('Illegal lexeme "'+n+'" for mode "'+(h.className||"<unnamed>")+'"');return y+=n,n.length||1}var p=R(e);if(!p)throw new Error('Unknown language: "'+e+'"');E(p);var m,h=r||p,w={},N="";for(m=h;m!==p;m=m.parent)m.className&&(N=s(m.className,"",!0)+N);var y="",x=0;try{for(var M,O,A=0;h.terminators.lastIndex=A,M=h.terminators.exec(n);)O=f(n.substring(A,M.index),M[0]),A=M.index+O;for(f(n.substr(A)),m=h;m.parent;m=m.parent)m.className&&(N+=c);return{relevance:x,value:N,language:e,top:h}}catch(e){if(e.message&&-1!==e.message.indexOf("Illegal"))return{relevance:0,value:u(n)};throw e}}function _(e,n){n=n||d.languages||r(a);var t={relevance:0,value:u(e)},i=t;return n.filter(R).filter(x).forEach(function(n){var r=v(n,e,!1);r.language=n,r.relevance>i.relevance&&(i=r),r.relevance>t.relevance&&(i=t,t=r)}),i.language&&(t.second_best=i),t}function w(e){return d.tabReplace||d.useBR?e.replace(l,function(e,n){return d.useBR&&"\n"===e?"<br>":d.tabReplace?n.replace(/\t/g,d.tabReplace):""}):e}function N(e){var n,r,a,o,l,c=function(e){var n,t,r,a,i=e.className+" ";if(i+=e.parentNode?e.parentNode.className:"",t=s.exec(i))return R(t[1])?t[1]:"no-highlight";for(n=0,r=(i=i.split(/\s+/)).length;n<r;n++)if(f(a=i[n])||R(a))return a}(e);f(c)||(d.useBR?(n=document.createElementNS("http://www.w3.org/1999/xhtml","div")).innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n"):n=e,l=n.textContent,a=c?v(c,l,!0):_(l),(r=m(n)).length&&((o=document.createElementNS("http://www.w3.org/1999/xhtml","div")).innerHTML=a.value,a.value=function(e,n,r){var a=0,i="",o=[];function s(){return e.length&&n.length?e[0].offset!==n[0].offset?e[0].offset<n[0].offset?e:n:"start"===n[0].event?e:n:e.length?e:n}function l(e){i+="<"+g(e)+t.map.call(e.attributes,function(e){return" "+e.nodeName+'="'+u(e.value).replace('"',"&quot;")+'"'}).join("")+">"}function c(e){i+="</"+g(e)+">"}function d(e){("start"===e.event?l:c)(e.node)}for(;e.length||n.length;){var b=s();if(i+=u(r.substring(a,b[0].offset)),a=b[0].offset,b===e){o.reverse().forEach(c);do{d(b.splice(0,1)[0]),b=s()}while(b===e&&b.length&&b[0].offset===a);o.reverse().forEach(l)}else"start"===b[0].event?o.push(b[0].node):o.pop(),d(b.splice(0,1)[0])}return i+u(r.substr(a))}(r,m(o),l)),a.value=w(a.value),e.innerHTML=a.value,e.className=function(e,n,t){var r=n?i[n]:t,a=[e.trim()];return e.match(/\bhljs\b/)||a.push("hljs"),-1===e.indexOf(r)&&a.push(r),a.join(" ").trim()}(e.className,c,a.language),e.result={language:a.language,re:a.relevance},a.second_best&&(e.second_best={language:a.second_best.language,re:a.second_best.relevance}))}function y(){if(!y.called){y.called=!0;var e=document.querySelectorAll("pre code");t.forEach.call(e,N)}}function R(e){return e=(e||"").toLowerCase(),a[e]||a[i[e]]}function x(e){var n=R(e);return n&&!n.disableAutodetect}return e.highlight=v,e.highlightAuto=_,e.fixMarkup=w,e.highlightBlock=N,e.configure=function(e){d=p(d,e)},e.initHighlighting=y,e.initHighlightingOnLoad=function(){addEventListener("DOMContentLoaded",y,!1),addEventListener("load",y,!1)},e.registerLanguage=function(n,t){var r=a[n]=t(e);h(r),r.aliases&&r.aliases.forEach(function(e){i[e]=n})},e.listLanguages=function(){return r(a)},e.getLanguage=R,e.autoDetection=x,e.inherit=p,e.IDENT_RE="[a-zA-Z]\\w*",e.UNDERSCORE_IDENT_RE="[a-zA-Z_]\\w*",e.NUMBER_RE="\\b\\d+(\\.\\d+)?",e.C_NUMBER_RE="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BINARY_NUMBER_RE="\\b(0b[01]+)",e.RE_STARTERS_RE="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BACKSLASH_ESCAPE={begin:"\\\\[\\s\\S]",relevance:0},e.APOS_STRING_MODE={className:"string",begin:"'",end:"'",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.QUOTE_STRING_MODE={className:"string",begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.PHRASAL_WORDS_MODE={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},e.COMMENT=function(n,t,r){var a=e.inherit({className:"comment",begin:n,end:t,contains:[]},r||{});return a.contains.push(e.PHRASAL_WORDS_MODE),a.contains.push({className:"doctag",begin:"(?:TODO|FIXME|NOTE|BUG|XXX):",relevance:0}),a},e.C_LINE_COMMENT_MODE=e.COMMENT("//","$"),e.C_BLOCK_COMMENT_MODE=e.COMMENT("/\\*","\\*/"),e.HASH_COMMENT_MODE=e.COMMENT("#","$"),e.NUMBER_MODE={className:"number",begin:e.NUMBER_RE,relevance:0},e.C_NUMBER_MODE={className:"number",begin:e.C_NUMBER_RE,relevance:0},e.BINARY_NUMBER_MODE={className:"number",begin:e.BINARY_NUMBER_RE,relevance:0},e.CSS_NUMBER_MODE={className:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},e.REGEXP_MODE={className:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,{begin:/\[/,end:/\]/,relevance:0,contains:[e.BACKSLASH_ESCAPE]}]},e.TITLE_MODE={className:"title",begin:e.IDENT_RE,relevance:0},e.UNDERSCORE_TITLE_MODE={className:"title",begin:e.UNDERSCORE_IDENT_RE,relevance:0},e.METHOD_GUARD={begin:"\\.\\s*"+e.UNDERSCORE_IDENT_RE,relevance:0},e},i="object"==typeof window&&window||"object"==typeof self&&self,n.nodeType?i&&(i.hljs=a({}),void 0===(r=function(){return i.hljs}.apply(n,[]))||(e.exports=r)):a(n)},function(e,n){e.exports=function(e){var n="[A-Za-z$_][0-9A-Za-z$_]*",t={keyword:"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"},r={className:"number",variants:[{begin:"\\b(0[bB][01]+)"},{begin:"\\b(0[oO][0-7]+)"},{begin:e.C_NUMBER_RE}],relevance:0},a={className:"subst",begin:"\\$\\{",end:"\\}",keywords:t,contains:[]},i={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,a],subLanguage:"xml"}},o={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,a],subLanguage:"css"}},s={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,a]};a.contains=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,o,s,r,e.REGEXP_MODE];var l=a.contains.concat([e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]);return{aliases:["js","jsx"],keywords:t,contains:[{className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},{className:"meta",begin:/^#!/,end:/$/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,o,s,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,r,{begin:/[{,]\s*/,relevance:0,contains:[{begin:n+"\\s*:",returnBegin:!0,relevance:0,contains:[{className:"attr",begin:n,relevance:0}]}]},{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{className:"function",begin:"(\\(.*?\\)|"+n+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:n},{begin:/\(\s*\)/},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:t,contains:l}]}]},{className:"",begin:/\s/,end:/\s*/,skip:!0},{begin:/</,end:/(\/[A-Za-z0-9\\._:-]+|[A-Za-z0-9\\._:-]+\/)>/,subLanguage:"xml",contains:[{begin:/<[A-Za-z0-9\\._:-]+\s*\/>/,skip:!0},{begin:/<[A-Za-z0-9\\._:-]+/,end:/(\/[A-Za-z0-9\\._:-]+|[A-Za-z0-9\\._:-]+\/)>/,skip:!0,contains:[{begin:/<[A-Za-z0-9\\._:-]+\s*\/>/,skip:!0},"self"]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/\{/,excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:n}),{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,contains:l}],illegal:/\[|%/},{begin:/\$[(.]/},e.METHOD_GUARD,{className:"class",beginKeywords:"class",end:/[{;=]/,excludeEnd:!0,illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"constructor get set",end:/\{/,excludeEnd:!0}],illegal:/#(?!!)/}}},function(e,n){e.exports=function(e){var n={className:"variable",begin:"(\\$[a-zA-Z-][a-zA-Z0-9_-]*)\\b"},t={className:"number",begin:"#[0-9A-Fa-f]+"};e.CSS_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_BLOCK_COMMENT_MODE;return{case_insensitive:!0,illegal:"[=/|']",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"selector-id",begin:"\\#[A-Za-z0-9_-]+",relevance:0},{className:"selector-class",begin:"\\.[A-Za-z0-9_-]+",relevance:0},{className:"selector-attr",begin:"\\[",end:"\\]",illegal:"$"},{className:"selector-tag",begin:"\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b",relevance:0},{begin:":(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)"},{begin:"::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)"},n,{className:"attribute",begin:"\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b",illegal:"[^\\s]"},{begin:"\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b"},{begin:":",end:";",contains:[n,t,e.CSS_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{className:"meta",begin:"!important"}]},{begin:"@",end:"[{;]",keywords:"mixin include extend for if else each while charset import debug media page content font-face namespace warn",contains:[n,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,t,e.CSS_NUMBER_MODE,{begin:"\\s[A-Za-z0-9_.-]+",relevance:0}]}]}}}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2xpYi9oaWdobGlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9saWIvbGFuZ3VhZ2VzL2phdmFzY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9saWIvbGFuZ3VhZ2VzL3Njc3MuanMiXSwibmFtZXMiOlsiZmFjdG9yeSIsImdsb2JhbE9iamVjdCIsImhsanMiLCJBUElfUkVQTEFDRVMiLCJBcnJheVByb3RvIiwib2JqZWN0S2V5cyIsIk9iamVjdCIsImtleXMiLCJsYW5ndWFnZXMiLCJhbGlhc2VzIiwibm9IaWdobGlnaHRSZSIsImxhbmd1YWdlUHJlZml4UmUiLCJmaXhNYXJrdXBSZSIsInNwYW5FbmRUYWciLCJvcHRpb25zIiwiY2xhc3NQcmVmaXgiLCJ0YWJSZXBsYWNlIiwidXNlQlIiLCJ1bmRlZmluZWQiLCJlc2NhcGUiLCJ2YWx1ZSIsInJlcGxhY2UiLCJ0YWciLCJub2RlIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsInRlc3RSZSIsInJlIiwibGV4ZW1lIiwibWF0Y2giLCJleGVjIiwiaW5kZXgiLCJpc05vdEhpZ2hsaWdodGVkIiwibGFuZ3VhZ2UiLCJ0ZXN0IiwiaW5oZXJpdCIsInBhcmVudCIsImtleSIsInJlc3VsdCIsIm9iamVjdHMiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImZvckVhY2giLCJvYmoiLCJub2RlU3RyZWFtIiwiX25vZGVTdHJlYW0iLCJvZmZzZXQiLCJjaGlsZCIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwibGVuZ3RoIiwicHVzaCIsImV2ZW50IiwicmVzdG9yZUxhbmd1YWdlQXBpIiwibGFuZ0FwaVJlc3RvcmVkIiwiY29udGFpbnMiLCJjb25jYXQiLCJ2YXJpYW50cyIsImNvbXBpbGVMYW5ndWFnZSIsInJlU3RyIiwic291cmNlIiwibGFuZ1JlIiwiZ2xvYmFsIiwiUmVnRXhwIiwiY2FzZV9pbnNlbnNpdGl2ZSIsImNvbXBpbGVNb2RlIiwibW9kZSIsImNvbXBpbGVkIiwia2V5d29yZHMiLCJiZWdpbktleXdvcmRzIiwiY29tcGlsZWRfa2V5d29yZHMiLCJmbGF0dGVuIiwiY2xhc3NOYW1lIiwic3RyIiwic3BsaXQiLCJrdyIsInBhaXIiLCJOdW1iZXIiLCJsZXhlbWVzUmUiLCJsZXhlbWVzIiwiYmVnaW4iLCJqb2luIiwiYmVnaW5SZSIsImVuZFNhbWVBc0JlZ2luIiwiZW5kIiwiZW5kc1dpdGhQYXJlbnQiLCJlbmRSZSIsInRlcm1pbmF0b3JfZW5kIiwiaWxsZWdhbCIsImlsbGVnYWxSZSIsInJlbGV2YW5jZSIsImFwcGx5IiwibWFwIiwiYyIsImNhY2hlZF92YXJpYW50cyIsInZhcmlhbnQiLCJleHBhbmRfbW9kZSIsInN0YXJ0cyIsInRlcm1pbmF0b3JzIiwiZmlsdGVyIiwiQm9vbGVhbiIsInJlZ2V4cHMiLCJzZXBhcmF0b3IiLCJiYWNrcmVmZXJlbmNlUmUiLCJudW1DYXB0dXJlcyIsInJldCIsImkiLCJzdWJzdHJpbmciLCJTdHJpbmciLCJqb2luUmUiLCJoaWdobGlnaHQiLCJuYW1lIiwiaWdub3JlX2lsbGVnYWxzIiwiY29udGludWF0aW9uIiwiZXNjYXBlUmUiLCJrZXl3b3JkTWF0Y2giLCJtYXRjaF9zdHIiLCJoYXNPd25Qcm9wZXJ0eSIsImJ1aWxkU3BhbiIsImNsYXNzbmFtZSIsImluc2lkZVNwYW4iLCJsZWF2ZU9wZW4iLCJub1ByZWZpeCIsIm9wZW5TcGFuIiwicHJvY2Vzc0J1ZmZlciIsInRvcCIsInN1Ykxhbmd1YWdlIiwiZXhwbGljaXQiLCJtb2RlX2J1ZmZlciIsImNvbnRpbnVhdGlvbnMiLCJoaWdobGlnaHRBdXRvIiwicHJvY2Vzc1N1Ykxhbmd1YWdlIiwia2V5d29yZF9tYXRjaCIsImxhc3RfaW5kZXgiLCJsYXN0SW5kZXgiLCJzdWJzdHIiLCJwcm9jZXNzS2V5d29yZHMiLCJzdGFydE5ld01vZGUiLCJjcmVhdGUiLCJwcm9jZXNzTGV4ZW1lIiwiYnVmZmVyIiwibmV3X21vZGUiLCJzdWJNb2RlIiwic2tpcCIsImV4Y2x1ZGVCZWdpbiIsInJldHVybkJlZ2luIiwiZW5kX21vZGUiLCJlbmRPZk1vZGUiLCJlbmRzUGFyZW50Iiwib3JpZ2luIiwicmV0dXJuRW5kIiwiZXhjbHVkZUVuZCIsImlzSWxsZWdhbCIsIkVycm9yIiwiZ2V0TGFuZ3VhZ2UiLCJjdXJyZW50IiwiY291bnQiLCJlIiwibWVzc2FnZSIsImluZGV4T2YiLCJ0ZXh0IiwibGFuZ3VhZ2VTdWJzZXQiLCJzZWNvbmRfYmVzdCIsImF1dG9EZXRlY3Rpb24iLCJmaXhNYXJrdXAiLCJwMSIsImhpZ2hsaWdodEJsb2NrIiwiYmxvY2siLCJvcmlnaW5hbFN0cmVhbSIsInJlc3VsdE5vZGUiLCJfY2xhc3MiLCJjbGFzc2VzIiwicGFyZW50Tm9kZSIsImJsb2NrTGFuZ3VhZ2UiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImlubmVySFRNTCIsInRleHRDb250ZW50Iiwib3JpZ2luYWwiLCJoaWdobGlnaHRlZCIsInByb2Nlc3NlZCIsIm5vZGVTdGFjayIsInNlbGVjdFN0cmVhbSIsIm9wZW4iLCJhdHRyaWJ1dGVzIiwiYSIsImNsb3NlIiwicmVuZGVyIiwic3RyZWFtIiwicmV2ZXJzZSIsInNwbGljZSIsInBvcCIsIm1lcmdlU3RyZWFtcyIsInByZXZDbGFzc05hbWUiLCJjdXJyZW50TGFuZyIsInJlc3VsdExhbmciLCJ0cmltIiwiYnVpbGRDbGFzc05hbWUiLCJpbml0SGlnaGxpZ2h0aW5nIiwiY2FsbGVkIiwiYmxvY2tzIiwicXVlcnlTZWxlY3RvckFsbCIsImxhbmciLCJkaXNhYmxlQXV0b2RldGVjdCIsImNvbmZpZ3VyZSIsInVzZXJfb3B0aW9ucyIsImluaXRIaWdobGlnaHRpbmdPbkxvYWQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVnaXN0ZXJMYW5ndWFnZSIsImFsaWFzIiwibGlzdExhbmd1YWdlcyIsIklERU5UX1JFIiwiVU5ERVJTQ09SRV9JREVOVF9SRSIsIk5VTUJFUl9SRSIsIkNfTlVNQkVSX1JFIiwiQklOQVJZX05VTUJFUl9SRSIsIlJFX1NUQVJURVJTX1JFIiwiQkFDS1NMQVNIX0VTQ0FQRSIsIkFQT1NfU1RSSU5HX01PREUiLCJRVU9URV9TVFJJTkdfTU9ERSIsIlBIUkFTQUxfV09SRFNfTU9ERSIsIkNPTU1FTlQiLCJpbmhlcml0cyIsIkNfTElORV9DT01NRU5UX01PREUiLCJDX0JMT0NLX0NPTU1FTlRfTU9ERSIsIkhBU0hfQ09NTUVOVF9NT0RFIiwiTlVNQkVSX01PREUiLCJDX05VTUJFUl9NT0RFIiwiQklOQVJZX05VTUJFUl9NT0RFIiwiQ1NTX05VTUJFUl9NT0RFIiwiUkVHRVhQX01PREUiLCJUSVRMRV9NT0RFIiwiVU5ERVJTQ09SRV9USVRMRV9NT0RFIiwiTUVUSE9EX0dVQVJEIiwid2luZG93Iiwic2VsZiIsImV4cG9ydHMiLCJtb2R1bGUiLCJLRVlXT1JEUyIsImtleXdvcmQiLCJsaXRlcmFsIiwiYnVpbHRfaW4iLCJOVU1CRVIiLCJTVUJTVCIsIkhUTUxfVEVNUExBVEUiLCJDU1NfVEVNUExBVEUiLCJURU1QTEFURV9TVFJJTkciLCJQQVJBTVNfQ09OVEFJTlMiLCJWQVJJQUJMRSIsIkhFWENPTE9SIl0sIm1hcHBpbmdzIjoieUVBQUEsTUFLVUEsRUFHSkMsRUFISUQsRUF3QlIsU0FBU0UsR0FFVCxJQWNJQyxFQWRBQyxFQUFhLEdBQ2JDLEVBQWFDLE9BQU9DLEtBR3BCQyxFQUFZLEdBQ1pDLEVBQVksR0FHWkMsRUFBbUIsZ0NBQ25CQyxFQUFtQiw4QkFDbkJDLEVBQW1CLCtCQU1uQkMsRUFBYSxVQUliQyxFQUFVLENBQ1pDLFlBQWEsUUFDYkMsV0FBWSxLQUNaQyxPQUFPLEVBQ1BULGVBQVdVLEdBTWIsU0FBU0MsRUFBT0MsR0FDZCxPQUFPQSxFQUFNQyxRQUFRLEtBQU0sU0FBU0EsUUFBUSxLQUFNLFFBQVFBLFFBQVEsS0FBTSxRQUcxRSxTQUFT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cENVLFVBQVcsR0FFYixDQUNFbEIsVUFBVyxnQkFBaUJRLE1BQU8sTUFBT0ksSUFBSyxNQUMvQ0ksUUFBUyxLQUVYLENBQ0VoQixVQUFXLGVBQ1hRLE1BQU8saWtCQUNQVSxVQUFXLEdBRWIsQ0FDRVYsTUFBTyx1V0FFVCxDQUNFQSxNQUFPLDZGQUVUd0ssRUFDQSxDQUNFaEwsVUFBVyxZQUNYUSxNQUFPLHN1RkFDUFEsUUFBUyxVQUVYLENBQ0VSLE1BQU8sOG9DQUVULENBQ0VBLE1BQU8sSUFBS0ksSUFBSyxJQUNqQjdCLFNBQVUsQ0FDUmlNLEVBQ0FDLEVBQ0E1UCxFQUFLd08sZ0JBQ0x4TyxFQUFLOE4sa0JBQ0w5TixFQUFLNk4saUJBQ0wsQ0FDRWxKLFVBQVcsT0FBUVEsTUFBTyxnQkFJaEMsQ0FDRUEsTUFBTyxJQUFLSSxJQUFLLE9BQ2pCaEIsU0FBVSwrR0FDVmIsU0FBVSxDQUNSaU0sRUFDQTNQLEVBQUs4TixrQkFDTDlOLEVBQUs2TixpQkFDTCtCLEVBQ0E1UCxFQUFLd08sZ0JBQ0wsQ0FDRXJKLE1BQU8scUJBQ1BVLFVBQVciLCJmaWxlIjoidmVuZG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblN5bnRheCBoaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBhdXRvZGV0ZWN0aW9uLlxuaHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcvXG4qL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuXG4gIC8vIEZpbmQgdGhlIGdsb2JhbCBvYmplY3QgZm9yIGV4cG9ydCB0byBib3RoIHRoZSBicm93c2VyIGFuZCB3ZWIgd29ya2Vycy5cbiAgdmFyIGdsb2JhbE9iamVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdyB8fFxuICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnICYmIHNlbGY7XG5cbiAgLy8gU2V0dXAgaGlnaGxpZ2h0LmpzIGZvciBkaWZmZXJlbnQgZW52aXJvbm1lbnRzLiBGaXJzdCBpcyBOb2RlLmpzIG9yXG4gIC8vIENvbW1vbkpTLlxuICAvLyBgbm9kZVR5cGVgIGlzIGNoZWNrZWQgdG8gZW5zdXJlIHRoYXQgYGV4cG9ydHNgIGlzIG5vdCBhIEhUTUwgZWxlbWVudC5cbiAgaWYodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnICYmICFleHBvcnRzLm5vZGVUeXBlKSB7XG4gICAgZmFjdG9yeShleHBvcnRzKTtcbiAgfSBlbHNlIGlmKGdsb2JhbE9iamVjdCkge1xuICAgIC8vIEV4cG9ydCBobGpzIGdsb2JhbGx5IGV2ZW4gd2hlbiB1c2luZyBBTUQgZm9yIGNhc2VzIHdoZW4gdGhpcyBzY3JpcHRcbiAgICAvLyBpcyBsb2FkZWQgd2l0aCBvdGhlcnMgdGhhdCBtYXkgc3RpbGwgZXhwZWN0IGEgZ2xvYmFsIGhsanMuXG4gICAgZ2xvYmFsT2JqZWN0LmhsanMgPSBmYWN0b3J5KHt9KTtcblxuICAgIC8vIEZpbmFsbHkgcmVnaXN0ZXIgdGhlIGdsb2JhbCBobGpzIHdpdGggQU1ELlxuICAgIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbE9iamVjdC5obGpzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn0oZnVuY3Rpb24oaGxqcykge1xuICAvLyBDb252ZW5pZW5jZSB2YXJpYWJsZXMgZm9yIGJ1aWxkLWluIG9iamVjdHNcbiAgdmFyIEFycmF5UHJvdG8gPSBbXSxcbiAgICAgIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cztcblxuICAvLyBHbG9iYWwgaW50ZXJuYWwgdmFyaWFibGVzIHVzZWQgd2l0aGluIHRoZSBoaWdobGlnaHQuanMgbGlicmFyeS5cbiAgdmFyIGxhbmd1YWdlcyA9IHt9LFxuICAgICAgYWxpYXNlcyAgID0ge307XG5cbiAgLy8gUmVndWxhciBleHByZXNzaW9ucyB1c2VkIHRocm91Z2hvdXQgdGhlIGhpZ2hsaWdodC5qcyBsaWJyYXJ5LlxuICB2YXIgbm9IaWdobGlnaHRSZSAgICA9IC9eKG5vLT9oaWdobGlnaHR8cGxhaW58dGV4dCkkL2ksXG4gICAgICBsYW5ndWFnZVByZWZpeFJlID0gL1xcYmxhbmcoPzp1YWdlKT8tKFtcXHctXSspXFxiL2ksXG4gICAgICBmaXhNYXJrdXBSZSAgICAgID0gLygoXig8W14+XSs+fFxcdHwpK3woPzpcXG4pKSkvZ207XG5cbiAgLy8gVGhlIG9iamVjdCB3aWxsIGJlIGFzc2lnbmVkIGJ5IHRoZSBidWlsZCB0b29sLiBJdCB1c2VkIHRvIHN5bmNocm9uaXplIEFQSSBcbiAgLy8gb2YgZXh0ZXJuYWwgbGFuZ3VhZ2UgZmlsZXMgd2l0aCBtaW5pZmllZCB2ZXJzaW9uIG9mIHRoZSBoaWdobGlnaHQuanMgbGlicmFyeS5cbiAgdmFyIEFQSV9SRVBMQUNFUztcblxuICB2YXIgc3BhbkVuZFRhZyA9ICc8L3NwYW4+JztcblxuICAvLyBHbG9iYWwgb3B0aW9ucyB1c2VkIHdoZW4gd2l0aGluIGV4dGVybmFsIEFQSXMuIFRoaXMgaXMgbW9kaWZpZWQgd2hlblxuICAvLyBjYWxsaW5nIHRoZSBgaGxqcy5jb25maWd1cmVgIGZ1bmN0aW9uLlxuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBjbGFzc1ByZWZpeDogJ2hsanMtJyxcbiAgICB0YWJSZXBsYWNlOiBudWxsLFxuICAgIHVzZUJSOiBmYWxzZSxcbiAgICBsYW5ndWFnZXM6IHVuZGVmaW5lZFxuICB9O1xuXG5cbiAgLyogVXRpbGl0eSBmdW5jdGlvbnMgKi9cblxuICBmdW5jdGlvbiBlc2NhcGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFnKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGVzdFJlKHJlLCBsZXhlbWUpIHtcbiAgICB2YXIgbWF0Y2ggPSByZSAmJiByZS5leGVjKGxleGVtZSk7XG4gICAgcmV0dXJuIG1hdGNoICYmIG1hdGNoLmluZGV4ID09PSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOb3RIaWdobGlnaHRlZChsYW5ndWFnZSkge1xuICAgIHJldHVybiBub0hpZ2hsaWdodFJlLnRlc3QobGFuZ3VhZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2tMYW5ndWFnZShibG9jaykge1xuICAgIHZhciBpLCBtYXRjaCwgbGVuZ3RoLCBfY2xhc3M7XG4gICAgdmFyIGNsYXNzZXMgPSBibG9jay5jbGFzc05hbWUgKyAnICc7XG5cbiAgICBjbGFzc2VzICs9IGJsb2NrLnBhcmVudE5vZGUgPyBibG9jay5wYXJlbnROb2RlLmNsYXNzTmFtZSA6ICcnO1xuXG4gICAgLy8gbGFuZ3VhZ2UtKiB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgbm9uLXByZWZpeGVkIGNsYXNzIG5hbWVzLlxuICAgIG1hdGNoID0gbGFuZ3VhZ2VQcmVmaXhSZS5leGVjKGNsYXNzZXMpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmV0dXJuIGdldExhbmd1YWdlKG1hdGNoWzFdKSA/IG1hdGNoWzFdIDogJ25vLWhpZ2hsaWdodCc7XG4gICAgfVxuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoL1xccysvKTtcblxuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGNsYXNzZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIF9jbGFzcyA9IGNsYXNzZXNbaV07XG5cbiAgICAgIGlmIChpc05vdEhpZ2hsaWdodGVkKF9jbGFzcykgfHwgZ2V0TGFuZ3VhZ2UoX2NsYXNzKSkge1xuICAgICAgICByZXR1cm4gX2NsYXNzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaGVyaXQocGFyZW50KSB7ICAvLyBpbmhlcml0KHBhcmVudCwgb3ZlcnJpZGVfb2JqLCBvdmVycmlkZV9vYmosIC4uLilcbiAgICB2YXIga2V5O1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgb2JqZWN0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICBmb3IgKGtleSBpbiBwYXJlbnQpXG4gICAgICByZXN1bHRba2V5XSA9IHBhcmVudFtrZXldO1xuICAgIG9iamVjdHMuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAgICAgIGZvciAoa2V5IGluIG9iailcbiAgICAgICAgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyogU3RyZWFtIG1lcmdpbmcgKi9cblxuICBmdW5jdGlvbiBub2RlU3RyZWFtKG5vZGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgKGZ1bmN0aW9uIF9ub2RlU3RyZWFtKG5vZGUsIG9mZnNldCkge1xuICAgICAgZm9yICh2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMylcbiAgICAgICAgICBvZmZzZXQgKz0gY2hpbGQubm9kZVZhbHVlLmxlbmd0aDtcbiAgICAgICAgZWxzZSBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICBldmVudDogJ3N0YXJ0JyxcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgbm9kZTogY2hpbGRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvZmZzZXQgPSBfbm9kZVN0cmVhbShjaGlsZCwgb2Zmc2V0KTtcbiAgICAgICAgICAvLyBQcmV2ZW50IHZvaWQgZWxlbWVudHMgZnJvbSBoYXZpbmcgYW4gZW5kIHRhZyB0aGF0IHdvdWxkIGFjdHVhbGx5XG4gICAgICAgICAgLy8gZG91YmxlIHRoZW0gaW4gdGhlIG91dHB1dC4gVGhlcmUgYXJlIG1vcmUgdm9pZCBlbGVtZW50cyBpbiBIVE1MXG4gICAgICAgICAgLy8gYnV0IHdlIGxpc3Qgb25seSB0aG9zZSByZWFsaXN0aWNhbGx5IGV4cGVjdGVkIGluIGNvZGUgZGlzcGxheS5cbiAgICAgICAgICBpZiAoIXRhZyhjaGlsZCkubWF0Y2goL2JyfGhyfGltZ3xpbnB1dC8pKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiAnc3RvcCcsXG4gICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICBub2RlOiBjaGlsZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH0pKG5vZGUsIDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZVN0cmVhbXMob3JpZ2luYWwsIGhpZ2hsaWdodGVkLCB2YWx1ZSkge1xuICAgIHZhciBwcm9jZXNzZWQgPSAwO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgbm9kZVN0YWNrID0gW107XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RTdHJlYW0oKSB7XG4gICAgICBpZiAoIW9yaWdpbmFsLmxlbmd0aCB8fCAhaGlnaGxpZ2h0ZWQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5sZW5ndGggPyBvcmlnaW5hbCA6IGhpZ2hsaWdodGVkO1xuICAgICAgfVxuICAgICAgaWYgKG9yaWdpbmFsWzBdLm9mZnNldCAhPT0gaGlnaGxpZ2h0ZWRbMF0ub2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiAob3JpZ2luYWxbMF0ub2Zmc2V0IDwgaGlnaGxpZ2h0ZWRbMF0ub2Zmc2V0KSA/IG9yaWdpbmFsIDogaGlnaGxpZ2h0ZWQ7XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICBUbyBhdm9pZCBzdGFydGluZyB0aGUgc3RyZWFtIGp1c3QgYmVmb3JlIGl0IHNob3VsZCBzdG9wIHRoZSBvcmRlciBpc1xuICAgICAgZW5zdXJlZCB0aGF0IG9yaWdpbmFsIGFsd2F5cyBzdGFydHMgZmlyc3QgYW5kIGNsb3NlcyBsYXN0OlxuXG4gICAgICBpZiAoZXZlbnQxID09ICdzdGFydCcgJiYgZXZlbnQyID09ICdzdGFydCcpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICAgIGlmIChldmVudDEgPT0gJ3N0YXJ0JyAmJiBldmVudDIgPT0gJ3N0b3AnKVxuICAgICAgICByZXR1cm4gaGlnaGxpZ2h0ZWQ7XG4gICAgICBpZiAoZXZlbnQxID09ICdzdG9wJyAmJiBldmVudDIgPT0gJ3N0YXJ0JylcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICAgICAgaWYgKGV2ZW50MSA9PSAnc3RvcCcgJiYgZXZlbnQyID09ICdzdG9wJylcbiAgICAgICAgcmV0dXJuIGhpZ2hsaWdodGVkO1xuXG4gICAgICAuLi4gd2hpY2ggaXMgY29sbGFwc2VkIHRvOlxuICAgICAgKi9cbiAgICAgIHJldHVybiBoaWdobGlnaHRlZFswXS5ldmVudCA9PT0gJ3N0YXJ0JyA/IG9yaWdpbmFsIDogaGlnaGxpZ2h0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb3Blbihub2RlKSB7XG4gICAgICBmdW5jdGlvbiBhdHRyX3N0cihhKSB7cmV0dXJuICcgJyArIGEubm9kZU5hbWUgKyAnPVwiJyArIGVzY2FwZShhLnZhbHVlKS5yZXBsYWNlKCdcIicsICcmcXVvdDsnKSArICdcIic7fVxuICAgICAgcmVzdWx0ICs9ICc8JyArIHRhZyhub2RlKSArIEFycmF5UHJvdG8ubWFwLmNhbGwobm9kZS5hdHRyaWJ1dGVzLCBhdHRyX3N0cikuam9pbignJykgKyAnPic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2Uobm9kZSkge1xuICAgICAgcmVzdWx0ICs9ICc8LycgKyB0YWcobm9kZSkgKyAnPic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyKGV2ZW50KSB7XG4gICAgICAoZXZlbnQuZXZlbnQgPT09ICdzdGFydCcgPyBvcGVuIDogY2xvc2UpKGV2ZW50Lm5vZGUpO1xuICAgIH1cblxuICAgIHdoaWxlIChvcmlnaW5hbC5sZW5ndGggfHwgaGlnaGxpZ2h0ZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgc3RyZWFtID0gc2VsZWN0U3RyZWFtKCk7XG4gICAgICByZXN1bHQgKz0gZXNjYXBlKHZhbHVlLnN1YnN0cmluZyhwcm9jZXNzZWQsIHN0cmVhbVswXS5vZmZzZXQpKTtcbiAgICAgIHByb2Nlc3NlZCA9IHN0cmVhbVswXS5vZmZzZXQ7XG4gICAgICBpZiAoc3RyZWFtID09PSBvcmlnaW5hbCkge1xuICAgICAgICAvKlxuICAgICAgICBPbiBhbnkgb3BlbmluZyBvciBjbG9zaW5nIHRhZyBvZiB0aGUgb3JpZ2luYWwgbWFya3VwIHdlIGZpcnN0IGNsb3NlXG4gICAgICAgIHRoZSBlbnRpcmUgaGlnaGxpZ2h0ZWQgbm9kZSBzdGFjaywgdGhlbiByZW5kZXIgdGhlIG9yaWdpbmFsIHRhZyBhbG9uZ1xuICAgICAgICB3aXRoIGFsbCB0aGUgZm9sbG93aW5nIG9yaWdpbmFsIHRhZ3MgYXQgdGhlIHNhbWUgb2Zmc2V0IGFuZCB0aGVuXG4gICAgICAgIHJlb3BlbiBhbGwgdGhlIHRhZ3Mgb24gdGhlIGhpZ2hsaWdodGVkIHN0YWNrLlxuICAgICAgICAqL1xuICAgICAgICBub2RlU3RhY2sucmV2ZXJzZSgpLmZvckVhY2goY2xvc2UpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgcmVuZGVyKHN0cmVhbS5zcGxpY2UoMCwgMSlbMF0pO1xuICAgICAgICAgIHN0cmVhbSA9IHNlbGVjdFN0cmVhbSgpO1xuICAgICAgICB9IHdoaWxlIChzdHJlYW0gPT09IG9yaWdpbmFsICYmIHN0cmVhbS5sZW5ndGggJiYgc3RyZWFtWzBdLm9mZnNldCA9PT0gcHJvY2Vzc2VkKTtcbiAgICAgICAgbm9kZVN0YWNrLnJldmVyc2UoKS5mb3JFYWNoKG9wZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0cmVhbVswXS5ldmVudCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgIG5vZGVTdGFjay5wdXNoKHN0cmVhbVswXS5ub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlU3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyKHN0cmVhbS5zcGxpY2UoMCwgMSlbMF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0ICsgZXNjYXBlKHZhbHVlLnN1YnN0cihwcm9jZXNzZWQpKTtcbiAgfVxuXG4gIC8qIEluaXRpYWxpemF0aW9uICovXG5cbiAgZnVuY3Rpb24gZXhwYW5kX21vZGUobW9kZSkge1xuICAgIGlmIChtb2RlLnZhcmlhbnRzICYmICFtb2RlLmNhY2hlZF92YXJpYW50cykge1xuICAgICAgbW9kZS5jYWNoZWRfdmFyaWFudHMgPSBtb2RlLnZhcmlhbnRzLm1hcChmdW5jdGlvbih2YXJpYW50KSB7XG4gICAgICAgIHJldHVybiBpbmhlcml0KG1vZGUsIHt2YXJpYW50czogbnVsbH0sIHZhcmlhbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtb2RlLmNhY2hlZF92YXJpYW50cyB8fCAobW9kZS5lbmRzV2l0aFBhcmVudCAmJiBbaW5oZXJpdChtb2RlKV0pIHx8IFttb2RlXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3RvcmVMYW5ndWFnZUFwaShvYmopIHtcbiAgICBpZihBUElfUkVQTEFDRVMgJiYgIW9iai5sYW5nQXBpUmVzdG9yZWQpIHtcbiAgICAgIG9iai5sYW5nQXBpUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgZm9yKHZhciBrZXkgaW4gQVBJX1JFUExBQ0VTKVxuICAgICAgICBvYmpba2V5XSAmJiAob2JqW0FQSV9SRVBMQUNFU1trZXldXSA9IG9ialtrZXldKTtcbiAgICAgIChvYmouY29udGFpbnMgfHwgW10pLmNvbmNhdChvYmoudmFyaWFudHMgfHwgW10pLmZvckVhY2gocmVzdG9yZUxhbmd1YWdlQXBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21waWxlTGFuZ3VhZ2UobGFuZ3VhZ2UpIHtcblxuICAgIGZ1bmN0aW9uIHJlU3RyKHJlKSB7XG4gICAgICAgIHJldHVybiAocmUgJiYgcmUuc291cmNlKSB8fCByZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsYW5nUmUodmFsdWUsIGdsb2JhbCkge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXG4gICAgICAgIHJlU3RyKHZhbHVlKSxcbiAgICAgICAgJ20nICsgKGxhbmd1YWdlLmNhc2VfaW5zZW5zaXRpdmUgPyAnaScgOiAnJykgKyAoZ2xvYmFsID8gJ2cnIDogJycpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGpvaW5SZSBsb2dpY2FsbHkgY29tcHV0ZXMgcmVnZXhwcy5qb2luKHNlcGFyYXRvciksIGJ1dCBmaXhlcyB0aGVcbiAgICAvLyBiYWNrcmVmZXJlbmNlcyBzbyB0aGV5IGNvbnRpbnVlIHRvIG1hdGNoLlxuICAgIGZ1bmN0aW9uIGpvaW5SZShyZWdleHBzLCBzZXBhcmF0b3IpIHtcbiAgICAgIC8vIGJhY2tyZWZlcmVuY2VSZSBtYXRjaGVzIGFuIG9wZW4gcGFyZW50aGVzaXMgb3IgYmFja3JlZmVyZW5jZS4gVG8gYXZvaWRcbiAgICAgIC8vIGFuIGluY29ycmVjdCBwYXJzZSwgaXQgYWRkaXRpb25hbGx5IG1hdGNoZXMgdGhlIGZvbGxvd2luZzpcbiAgICAgIC8vIC0gWy4uLl0gZWxlbWVudHMsIHdoZXJlIHRoZSBtZWFuaW5nIG9mIHBhcmVudGhlc2VzIGFuZCBlc2NhcGVzIGNoYW5nZVxuICAgICAgLy8gLSBvdGhlciBlc2NhcGUgc2VxdWVuY2VzLCBzbyB3ZSBkbyBub3QgbWlzcGFyc2UgZXNjYXBlIHNlcXVlbmNlcyBhc1xuICAgICAgLy8gICBpbnRlcmVzdGluZyBlbGVtZW50c1xuICAgICAgLy8gLSBub24tbWF0Y2hpbmcgb3IgbG9va2FoZWFkIHBhcmVudGhlc2VzLCB3aGljaCBkbyBub3QgY2FwdHVyZS4gVGhlc2VcbiAgICAgIC8vICAgZm9sbG93IHRoZSAnKCcgd2l0aCBhICc/Jy5cbiAgICAgIHZhciBiYWNrcmVmZXJlbmNlUmUgPSAvXFxbKD86W15cXFxcXFxdXXxcXFxcLikqXFxdfFxcKFxcPz98XFxcXChbMS05XVswLTldKil8XFxcXC4vO1xuICAgICAgdmFyIG51bUNhcHR1cmVzID0gMDtcbiAgICAgIHZhciByZXQgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnZXhwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gbnVtQ2FwdHVyZXM7XG4gICAgICAgIHZhciByZSA9IHJlU3RyKHJlZ2V4cHNbaV0pO1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICByZXQgKz0gc2VwYXJhdG9yO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChyZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gYmFja3JlZmVyZW5jZVJlLmV4ZWMocmUpO1xuICAgICAgICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXQgKz0gcmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0ICs9IHJlLnN1YnN0cmluZygwLCBtYXRjaC5pbmRleCk7XG4gICAgICAgICAgcmUgPSByZS5zdWJzdHJpbmcobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGlmIChtYXRjaFswXVswXSA9PSAnXFxcXCcgJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgICAgIC8vIEFkanVzdCB0aGUgYmFja3JlZmVyZW5jZS5cbiAgICAgICAgICAgIHJldCArPSAnXFxcXCcgKyBTdHJpbmcoTnVtYmVyKG1hdGNoWzFdKSArIG9mZnNldCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgIGlmIChtYXRjaFswXSA9PSAnKCcpIHtcbiAgICAgICAgICAgICAgbnVtQ2FwdHVyZXMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGlsZU1vZGUobW9kZSwgcGFyZW50KSB7XG4gICAgICBpZiAobW9kZS5jb21waWxlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgbW9kZS5jb21waWxlZCA9IHRydWU7XG5cbiAgICAgIG1vZGUua2V5d29yZHMgPSBtb2RlLmtleXdvcmRzIHx8IG1vZGUuYmVnaW5LZXl3b3JkcztcbiAgICAgIGlmIChtb2RlLmtleXdvcmRzKSB7XG4gICAgICAgIHZhciBjb21waWxlZF9rZXl3b3JkcyA9IHt9O1xuXG4gICAgICAgIHZhciBmbGF0dGVuID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBzdHIpIHtcbiAgICAgICAgICBpZiAobGFuZ3VhZ2UuY2FzZV9pbnNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0ci5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24oa3cpIHtcbiAgICAgICAgICAgIHZhciBwYWlyID0ga3cuc3BsaXQoJ3wnKTtcbiAgICAgICAgICAgIGNvbXBpbGVkX2tleXdvcmRzW3BhaXJbMF1dID0gW2NsYXNzTmFtZSwgcGFpclsxXSA/IE51bWJlcihwYWlyWzFdKSA6IDFdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgbW9kZS5rZXl3b3JkcyA9PT0gJ3N0cmluZycpIHsgLy8gc3RyaW5nXG4gICAgICAgICAgZmxhdHRlbigna2V5d29yZCcsIG1vZGUua2V5d29yZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9iamVjdEtleXMobW9kZS5rZXl3b3JkcykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBmbGF0dGVuKGNsYXNzTmFtZSwgbW9kZS5rZXl3b3Jkc1tjbGFzc05hbWVdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlLmtleXdvcmRzID0gY29tcGlsZWRfa2V5d29yZHM7XG4gICAgICB9XG4gICAgICBtb2RlLmxleGVtZXNSZSA9IGxhbmdSZShtb2RlLmxleGVtZXMgfHwgL1xcdysvLCB0cnVlKTtcblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBpZiAobW9kZS5iZWdpbktleXdvcmRzKSB7XG4gICAgICAgICAgbW9kZS5iZWdpbiA9ICdcXFxcYignICsgbW9kZS5iZWdpbktleXdvcmRzLnNwbGl0KCcgJykuam9pbignfCcpICsgJylcXFxcYic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb2RlLmJlZ2luKVxuICAgICAgICAgIG1vZGUuYmVnaW4gPSAvXFxCfFxcYi87XG4gICAgICAgIG1vZGUuYmVnaW5SZSA9IGxhbmdSZShtb2RlLmJlZ2luKTtcbiAgICAgICAgaWYgKG1vZGUuZW5kU2FtZUFzQmVnaW4pXG4gICAgICAgICAgbW9kZS5lbmQgPSBtb2RlLmJlZ2luO1xuICAgICAgICBpZiAoIW1vZGUuZW5kICYmICFtb2RlLmVuZHNXaXRoUGFyZW50KVxuICAgICAgICAgIG1vZGUuZW5kID0gL1xcQnxcXGIvO1xuICAgICAgICBpZiAobW9kZS5lbmQpXG4gICAgICAgICAgbW9kZS5lbmRSZSA9IGxhbmdSZShtb2RlLmVuZCk7XG4gICAgICAgIG1vZGUudGVybWluYXRvcl9lbmQgPSByZVN0cihtb2RlLmVuZCkgfHwgJyc7XG4gICAgICAgIGlmIChtb2RlLmVuZHNXaXRoUGFyZW50ICYmIHBhcmVudC50ZXJtaW5hdG9yX2VuZClcbiAgICAgICAgICBtb2RlLnRlcm1pbmF0b3JfZW5kICs9IChtb2RlLmVuZCA/ICd8JyA6ICcnKSArIHBhcmVudC50ZXJtaW5hdG9yX2VuZDtcbiAgICAgIH1cbiAgICAgIGlmIChtb2RlLmlsbGVnYWwpXG4gICAgICAgIG1vZGUuaWxsZWdhbFJlID0gbGFuZ1JlKG1vZGUuaWxsZWdhbCk7XG4gICAgICBpZiAobW9kZS5yZWxldmFuY2UgPT0gbnVsbClcbiAgICAgICAgbW9kZS5yZWxldmFuY2UgPSAxO1xuICAgICAgaWYgKCFtb2RlLmNvbnRhaW5zKSB7XG4gICAgICAgIG1vZGUuY29udGFpbnMgPSBbXTtcbiAgICAgIH1cbiAgICAgIG1vZGUuY29udGFpbnMgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBtb2RlLmNvbnRhaW5zLm1hcChmdW5jdGlvbihjKSB7XG4gICAgICAgIHJldHVybiBleHBhbmRfbW9kZShjID09PSAnc2VsZicgPyBtb2RlIDogYyk7XG4gICAgICB9KSk7XG4gICAgICBtb2RlLmNvbnRhaW5zLmZvckVhY2goZnVuY3Rpb24oYykge2NvbXBpbGVNb2RlKGMsIG1vZGUpO30pO1xuXG4gICAgICBpZiAobW9kZS5zdGFydHMpIHtcbiAgICAgICAgY29tcGlsZU1vZGUobW9kZS5zdGFydHMsIHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXJtaW5hdG9ycyA9XG4gICAgICAgIG1vZGUuY29udGFpbnMubWFwKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICByZXR1cm4gYy5iZWdpbktleXdvcmRzID8gJ1xcXFwuPyg/OicgKyBjLmJlZ2luICsgJylcXFxcLj8nIDogYy5iZWdpbjtcbiAgICAgICAgfSlcbiAgICAgICAgLmNvbmNhdChbbW9kZS50ZXJtaW5hdG9yX2VuZCwgbW9kZS5pbGxlZ2FsXSlcbiAgICAgICAgLm1hcChyZVN0cilcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIG1vZGUudGVybWluYXRvcnMgPSB0ZXJtaW5hdG9ycy5sZW5ndGggPyBsYW5nUmUoam9pblJlKHRlcm1pbmF0b3JzLCAnfCcpLCB0cnVlKSA6IHtleGVjOiBmdW5jdGlvbigvKnMqLykge3JldHVybiBudWxsO319O1xuICAgIH1cbiAgICBcbiAgICBjb21waWxlTW9kZShsYW5ndWFnZSk7XG4gIH1cblxuICAvKlxuICBDb3JlIGhpZ2hsaWdodGluZyBmdW5jdGlvbi4gQWNjZXB0cyBhIGxhbmd1YWdlIG5hbWUsIG9yIGFuIGFsaWFzLCBhbmQgYVxuICBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBoaWdobGlnaHQuIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZ1xuICBwcm9wZXJ0aWVzOlxuXG4gIC0gcmVsZXZhbmNlIChpbnQpXG4gIC0gdmFsdWUgKGFuIEhUTUwgc3RyaW5nIHdpdGggaGlnaGxpZ2h0aW5nIG1hcmt1cClcblxuICAqL1xuICBmdW5jdGlvbiBoaWdobGlnaHQobmFtZSwgdmFsdWUsIGlnbm9yZV9pbGxlZ2FscywgY29udGludWF0aW9uKSB7XG5cbiAgICBmdW5jdGlvbiBlc2NhcGVSZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodmFsdWUucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyksICdtJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ViTW9kZShsZXhlbWUsIG1vZGUpIHtcbiAgICAgIHZhciBpLCBsZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG1vZGUuY29udGFpbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRlc3RSZShtb2RlLmNvbnRhaW5zW2ldLmJlZ2luUmUsIGxleGVtZSkpIHtcbiAgICAgICAgICBpZiAobW9kZS5jb250YWluc1tpXS5lbmRTYW1lQXNCZWdpbikge1xuICAgICAgICAgICAgbW9kZS5jb250YWluc1tpXS5lbmRSZSA9IGVzY2FwZVJlKCBtb2RlLmNvbnRhaW5zW2ldLmJlZ2luUmUuZXhlYyhsZXhlbWUpWzBdICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtb2RlLmNvbnRhaW5zW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2ZNb2RlKG1vZGUsIGxleGVtZSkge1xuICAgICAgaWYgKHRlc3RSZShtb2RlLmVuZFJlLCBsZXhlbWUpKSB7XG4gICAgICAgIHdoaWxlIChtb2RlLmVuZHNQYXJlbnQgJiYgbW9kZS5wYXJlbnQpIHtcbiAgICAgICAgICBtb2RlID0gbW9kZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGU7XG4gICAgICB9XG4gICAgICBpZiAobW9kZS5lbmRzV2l0aFBhcmVudCkge1xuICAgICAgICByZXR1cm4gZW5kT2ZNb2RlKG1vZGUucGFyZW50LCBsZXhlbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWxsZWdhbChsZXhlbWUsIG1vZGUpIHtcbiAgICAgIHJldHVybiAhaWdub3JlX2lsbGVnYWxzICYmIHRlc3RSZShtb2RlLmlsbGVnYWxSZSwgbGV4ZW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl3b3JkTWF0Y2gobW9kZSwgbWF0Y2gpIHtcbiAgICAgIHZhciBtYXRjaF9zdHIgPSBsYW5ndWFnZS5jYXNlX2luc2Vuc2l0aXZlID8gbWF0Y2hbMF0udG9Mb3dlckNhc2UoKSA6IG1hdGNoWzBdO1xuICAgICAgcmV0dXJuIG1vZGUua2V5d29yZHMuaGFzT3duUHJvcGVydHkobWF0Y2hfc3RyKSAmJiBtb2RlLmtleXdvcmRzW21hdGNoX3N0cl07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnVpbGRTcGFuKGNsYXNzbmFtZSwgaW5zaWRlU3BhbiwgbGVhdmVPcGVuLCBub1ByZWZpeCkge1xuICAgICAgdmFyIGNsYXNzUHJlZml4ID0gbm9QcmVmaXggPyAnJyA6IG9wdGlvbnMuY2xhc3NQcmVmaXgsXG4gICAgICAgICAgb3BlblNwYW4gICAgPSAnPHNwYW4gY2xhc3M9XCInICsgY2xhc3NQcmVmaXgsXG4gICAgICAgICAgY2xvc2VTcGFuICAgPSBsZWF2ZU9wZW4gPyAnJyA6IHNwYW5FbmRUYWc7XG5cbiAgICAgIG9wZW5TcGFuICs9IGNsYXNzbmFtZSArICdcIj4nO1xuXG4gICAgICBpZiAoIWNsYXNzbmFtZSkgcmV0dXJuIGluc2lkZVNwYW47XG4gICAgICByZXR1cm4gb3BlblNwYW4gKyBpbnNpZGVTcGFuICsgY2xvc2VTcGFuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NLZXl3b3JkcygpIHtcbiAgICAgIHZhciBrZXl3b3JkX21hdGNoLCBsYXN0X2luZGV4LCBtYXRjaCwgcmVzdWx0O1xuXG4gICAgICBpZiAoIXRvcC5rZXl3b3JkcylcbiAgICAgICAgcmV0dXJuIGVzY2FwZShtb2RlX2J1ZmZlcik7XG5cbiAgICAgIHJlc3VsdCA9ICcnO1xuICAgICAgbGFzdF9pbmRleCA9IDA7XG4gICAgICB0b3AubGV4ZW1lc1JlLmxhc3RJbmRleCA9IDA7XG4gICAgICBtYXRjaCA9IHRvcC5sZXhlbWVzUmUuZXhlYyhtb2RlX2J1ZmZlcik7XG5cbiAgICAgIHdoaWxlIChtYXRjaCkge1xuICAgICAgICByZXN1bHQgKz0gZXNjYXBlKG1vZGVfYnVmZmVyLnN1YnN0cmluZyhsYXN0X2luZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICBrZXl3b3JkX21hdGNoID0ga2V5d29yZE1hdGNoKHRvcCwgbWF0Y2gpO1xuICAgICAgICBpZiAoa2V5d29yZF9tYXRjaCkge1xuICAgICAgICAgIHJlbGV2YW5jZSArPSBrZXl3b3JkX21hdGNoWzFdO1xuICAgICAgICAgIHJlc3VsdCArPSBidWlsZFNwYW4oa2V5d29yZF9tYXRjaFswXSwgZXNjYXBlKG1hdGNoWzBdKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ICs9IGVzY2FwZShtYXRjaFswXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdF9pbmRleCA9IHRvcC5sZXhlbWVzUmUubGFzdEluZGV4O1xuICAgICAgICBtYXRjaCA9IHRvcC5sZXhlbWVzUmUuZXhlYyhtb2RlX2J1ZmZlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgZXNjYXBlKG1vZGVfYnVmZmVyLnN1YnN0cihsYXN0X2luZGV4KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1N1Ykxhbmd1YWdlKCkge1xuICAgICAgdmFyIGV4cGxpY2l0ID0gdHlwZW9mIHRvcC5zdWJMYW5ndWFnZSA9PT0gJ3N0cmluZyc7XG4gICAgICBpZiAoZXhwbGljaXQgJiYgIWxhbmd1YWdlc1t0b3Auc3ViTGFuZ3VhZ2VdKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGUobW9kZV9idWZmZXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gZXhwbGljaXQgP1xuICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodCh0b3Auc3ViTGFuZ3VhZ2UsIG1vZGVfYnVmZmVyLCB0cnVlLCBjb250aW51YXRpb25zW3RvcC5zdWJMYW5ndWFnZV0pIDpcbiAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRBdXRvKG1vZGVfYnVmZmVyLCB0b3Auc3ViTGFuZ3VhZ2UubGVuZ3RoID8gdG9wLnN1Ykxhbmd1YWdlIDogdW5kZWZpbmVkKTtcblxuICAgICAgLy8gQ291bnRpbmcgZW1iZWRkZWQgbGFuZ3VhZ2Ugc2NvcmUgdG93YXJkcyB0aGUgaG9zdCBsYW5ndWFnZSBtYXkgYmUgZGlzYWJsZWRcbiAgICAgIC8vIHdpdGggemVyb2luZyB0aGUgY29udGFpbmluZyBtb2RlIHJlbGV2YW5jZS4gVXNlY2FzZSBpbiBwb2ludCBpcyBNYXJrZG93biB0aGF0XG4gICAgICAvLyBhbGxvd3MgWE1MIGV2ZXJ5d2hlcmUgYW5kIG1ha2VzIGV2ZXJ5IFhNTCBzbmlwcGV0IHRvIGhhdmUgYSBtdWNoIGxhcmdlciBNYXJrZG93blxuICAgICAgLy8gc2NvcmUuXG4gICAgICBpZiAodG9wLnJlbGV2YW5jZSA+IDApIHtcbiAgICAgICAgcmVsZXZhbmNlICs9IHJlc3VsdC5yZWxldmFuY2U7XG4gICAgICB9XG4gICAgICBpZiAoZXhwbGljaXQpIHtcbiAgICAgICAgY29udGludWF0aW9uc1t0b3Auc3ViTGFuZ3VhZ2VdID0gcmVzdWx0LnRvcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWlsZFNwYW4ocmVzdWx0Lmxhbmd1YWdlLCByZXN1bHQudmFsdWUsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQnVmZmVyKCkge1xuICAgICAgcmVzdWx0ICs9ICh0b3Auc3ViTGFuZ3VhZ2UgIT0gbnVsbCA/IHByb2Nlc3NTdWJMYW5ndWFnZSgpIDogcHJvY2Vzc0tleXdvcmRzKCkpO1xuICAgICAgbW9kZV9idWZmZXIgPSAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE5ld01vZGUobW9kZSkge1xuICAgICAgcmVzdWx0ICs9IG1vZGUuY2xhc3NOYW1lPyBidWlsZFNwYW4obW9kZS5jbGFzc05hbWUsICcnLCB0cnVlKTogJyc7XG4gICAgICB0b3AgPSBPYmplY3QuY3JlYXRlKG1vZGUsIHtwYXJlbnQ6IHt2YWx1ZTogdG9wfX0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NMZXhlbWUoYnVmZmVyLCBsZXhlbWUpIHtcblxuICAgICAgbW9kZV9idWZmZXIgKz0gYnVmZmVyO1xuXG4gICAgICBpZiAobGV4ZW1lID09IG51bGwpIHtcbiAgICAgICAgcHJvY2Vzc0J1ZmZlcigpO1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld19tb2RlID0gc3ViTW9kZShsZXhlbWUsIHRvcCk7XG4gICAgICBpZiAobmV3X21vZGUpIHtcbiAgICAgICAgaWYgKG5ld19tb2RlLnNraXApIHtcbiAgICAgICAgICBtb2RlX2J1ZmZlciArPSBsZXhlbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5ld19tb2RlLmV4Y2x1ZGVCZWdpbikge1xuICAgICAgICAgICAgbW9kZV9idWZmZXIgKz0gbGV4ZW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9jZXNzQnVmZmVyKCk7XG4gICAgICAgICAgaWYgKCFuZXdfbW9kZS5yZXR1cm5CZWdpbiAmJiAhbmV3X21vZGUuZXhjbHVkZUJlZ2luKSB7XG4gICAgICAgICAgICBtb2RlX2J1ZmZlciA9IGxleGVtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnROZXdNb2RlKG5ld19tb2RlLCBsZXhlbWUpO1xuICAgICAgICByZXR1cm4gbmV3X21vZGUucmV0dXJuQmVnaW4gPyAwIDogbGV4ZW1lLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgdmFyIGVuZF9tb2RlID0gZW5kT2ZNb2RlKHRvcCwgbGV4ZW1lKTtcbiAgICAgIGlmIChlbmRfbW9kZSkge1xuICAgICAgICB2YXIgb3JpZ2luID0gdG9wO1xuICAgICAgICBpZiAob3JpZ2luLnNraXApIHtcbiAgICAgICAgICBtb2RlX2J1ZmZlciArPSBsZXhlbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCEob3JpZ2luLnJldHVybkVuZCB8fCBvcmlnaW4uZXhjbHVkZUVuZCkpIHtcbiAgICAgICAgICAgIG1vZGVfYnVmZmVyICs9IGxleGVtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvY2Vzc0J1ZmZlcigpO1xuICAgICAgICAgIGlmIChvcmlnaW4uZXhjbHVkZUVuZCkge1xuICAgICAgICAgICAgbW9kZV9idWZmZXIgPSBsZXhlbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAodG9wLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHNwYW5FbmRUYWc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdG9wLnNraXAgJiYgIXRvcC5zdWJMYW5ndWFnZSkge1xuICAgICAgICAgICAgcmVsZXZhbmNlICs9IHRvcC5yZWxldmFuY2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRvcCA9IHRvcC5wYXJlbnQ7XG4gICAgICAgIH0gd2hpbGUgKHRvcCAhPT0gZW5kX21vZGUucGFyZW50KTtcbiAgICAgICAgaWYgKGVuZF9tb2RlLnN0YXJ0cykge1xuICAgICAgICAgIGlmIChlbmRfbW9kZS5lbmRTYW1lQXNCZWdpbikge1xuICAgICAgICAgICAgZW5kX21vZGUuc3RhcnRzLmVuZFJlID0gZW5kX21vZGUuZW5kUmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXJ0TmV3TW9kZShlbmRfbW9kZS5zdGFydHMsICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3JpZ2luLnJldHVybkVuZCA/IDAgOiBsZXhlbWUubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNJbGxlZ2FsKGxleGVtZSwgdG9wKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGxleGVtZSBcIicgKyBsZXhlbWUgKyAnXCIgZm9yIG1vZGUgXCInICsgKHRvcC5jbGFzc05hbWUgfHwgJzx1bm5hbWVkPicpICsgJ1wiJyk7XG5cbiAgICAgIC8qXG4gICAgICBQYXJzZXIgc2hvdWxkIG5vdCByZWFjaCB0aGlzIHBvaW50IGFzIGFsbCB0eXBlcyBvZiBsZXhlbWVzIHNob3VsZCBiZSBjYXVnaHRcbiAgICAgIGVhcmxpZXIsIGJ1dCBpZiBpdCBkb2VzIGR1ZSB0byBzb21lIGJ1ZyBtYWtlIHN1cmUgaXQgYWR2YW5jZXMgYXQgbGVhc3Qgb25lXG4gICAgICBjaGFyYWN0ZXIgZm9yd2FyZCB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BpbmcuXG4gICAgICAqL1xuICAgICAgbW9kZV9idWZmZXIgKz0gbGV4ZW1lO1xuICAgICAgcmV0dXJuIGxleGVtZS5sZW5ndGggfHwgMTtcbiAgICB9XG5cbiAgICB2YXIgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZShuYW1lKTtcbiAgICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbGFuZ3VhZ2U6IFwiJyArIG5hbWUgKyAnXCInKTtcbiAgICB9XG5cbiAgICBjb21waWxlTGFuZ3VhZ2UobGFuZ3VhZ2UpO1xuICAgIHZhciB0b3AgPSBjb250aW51YXRpb24gfHwgbGFuZ3VhZ2U7XG4gICAgdmFyIGNvbnRpbnVhdGlvbnMgPSB7fTsgLy8ga2VlcCBjb250aW51YXRpb25zIGZvciBzdWItbGFuZ3VhZ2VzXG4gICAgdmFyIHJlc3VsdCA9ICcnLCBjdXJyZW50O1xuICAgIGZvcihjdXJyZW50ID0gdG9wOyBjdXJyZW50ICE9PSBsYW5ndWFnZTsgY3VycmVudCA9IGN1cnJlbnQucGFyZW50KSB7XG4gICAgICBpZiAoY3VycmVudC5jbGFzc05hbWUpIHtcbiAgICAgICAgcmVzdWx0ID0gYnVpbGRTcGFuKGN1cnJlbnQuY2xhc3NOYW1lLCAnJywgdHJ1ZSkgKyByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtb2RlX2J1ZmZlciA9ICcnO1xuICAgIHZhciByZWxldmFuY2UgPSAwO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbWF0Y2gsIGNvdW50LCBpbmRleCA9IDA7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB0b3AudGVybWluYXRvcnMubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgIG1hdGNoID0gdG9wLnRlcm1pbmF0b3JzLmV4ZWModmFsdWUpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjb3VudCA9IHByb2Nlc3NMZXhlbWUodmFsdWUuc3Vic3RyaW5nKGluZGV4LCBtYXRjaC5pbmRleCksIG1hdGNoWzBdKTtcbiAgICAgICAgaW5kZXggPSBtYXRjaC5pbmRleCArIGNvdW50O1xuICAgICAgfVxuICAgICAgcHJvY2Vzc0xleGVtZSh2YWx1ZS5zdWJzdHIoaW5kZXgpKTtcbiAgICAgIGZvcihjdXJyZW50ID0gdG9wOyBjdXJyZW50LnBhcmVudDsgY3VycmVudCA9IGN1cnJlbnQucGFyZW50KSB7IC8vIGNsb3NlIGRhbmdsaW5nIG1vZGVzXG4gICAgICAgIGlmIChjdXJyZW50LmNsYXNzTmFtZSkge1xuICAgICAgICAgIHJlc3VsdCArPSBzcGFuRW5kVGFnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWxldmFuY2U6IHJlbGV2YW5jZSxcbiAgICAgICAgdmFsdWU6IHJlc3VsdCxcbiAgICAgICAgbGFuZ3VhZ2U6IG5hbWUsXG4gICAgICAgIHRvcDogdG9wXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5tZXNzYWdlLmluZGV4T2YoJ0lsbGVnYWwnKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZWxldmFuY2U6IDAsXG4gICAgICAgICAgdmFsdWU6IGVzY2FwZSh2YWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLypcbiAgSGlnaGxpZ2h0aW5nIHdpdGggbGFuZ3VhZ2UgZGV0ZWN0aW9uLiBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG9cbiAgaGlnaGxpZ2h0LiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcblxuICAtIGxhbmd1YWdlIChkZXRlY3RlZCBsYW5ndWFnZSlcbiAgLSByZWxldmFuY2UgKGludClcbiAgLSB2YWx1ZSAoYW4gSFRNTCBzdHJpbmcgd2l0aCBoaWdobGlnaHRpbmcgbWFya3VwKVxuICAtIHNlY29uZF9iZXN0IChvYmplY3Qgd2l0aCB0aGUgc2FtZSBzdHJ1Y3R1cmUgZm9yIHNlY29uZC1iZXN0IGhldXJpc3RpY2FsbHlcbiAgICBkZXRlY3RlZCBsYW5ndWFnZSwgbWF5IGJlIGFic2VudClcblxuICAqL1xuICBmdW5jdGlvbiBoaWdobGlnaHRBdXRvKHRleHQsIGxhbmd1YWdlU3Vic2V0KSB7XG4gICAgbGFuZ3VhZ2VTdWJzZXQgPSBsYW5ndWFnZVN1YnNldCB8fCBvcHRpb25zLmxhbmd1YWdlcyB8fCBvYmplY3RLZXlzKGxhbmd1YWdlcyk7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgIHZhbHVlOiBlc2NhcGUodGV4dClcbiAgICB9O1xuICAgIHZhciBzZWNvbmRfYmVzdCA9IHJlc3VsdDtcbiAgICBsYW5ndWFnZVN1YnNldC5maWx0ZXIoZ2V0TGFuZ3VhZ2UpLmZpbHRlcihhdXRvRGV0ZWN0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaGlnaGxpZ2h0KG5hbWUsIHRleHQsIGZhbHNlKTtcbiAgICAgIGN1cnJlbnQubGFuZ3VhZ2UgPSBuYW1lO1xuICAgICAgaWYgKGN1cnJlbnQucmVsZXZhbmNlID4gc2Vjb25kX2Jlc3QucmVsZXZhbmNlKSB7XG4gICAgICAgIHNlY29uZF9iZXN0ID0gY3VycmVudDtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50LnJlbGV2YW5jZSA+IHJlc3VsdC5yZWxldmFuY2UpIHtcbiAgICAgICAgc2Vjb25kX2Jlc3QgPSByZXN1bHQ7XG4gICAgICAgIHJlc3VsdCA9IGN1cnJlbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHNlY29uZF9iZXN0Lmxhbmd1YWdlKSB7XG4gICAgICByZXN1bHQuc2Vjb25kX2Jlc3QgPSBzZWNvbmRfYmVzdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qXG4gIFBvc3QtcHJvY2Vzc2luZyBvZiB0aGUgaGlnaGxpZ2h0ZWQgbWFya3VwOlxuXG4gIC0gcmVwbGFjZSBUQUJzIHdpdGggc29tZXRoaW5nIG1vcmUgdXNlZnVsXG4gIC0gcmVwbGFjZSByZWFsIGxpbmUtYnJlYWtzIHdpdGggJzxicj4nIGZvciBub24tcHJlIGNvbnRhaW5lcnNcblxuICAqL1xuICBmdW5jdGlvbiBmaXhNYXJrdXAodmFsdWUpIHtcbiAgICByZXR1cm4gIShvcHRpb25zLnRhYlJlcGxhY2UgfHwgb3B0aW9ucy51c2VCUilcbiAgICAgID8gdmFsdWVcbiAgICAgIDogdmFsdWUucmVwbGFjZShmaXhNYXJrdXBSZSwgZnVuY3Rpb24obWF0Y2gsIHAxKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMudXNlQlIgJiYgbWF0Y2ggPT09ICdcXG4nKSB7XG4gICAgICAgICAgICByZXR1cm4gJzxicj4nO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy50YWJSZXBsYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcDEucmVwbGFjZSgvXFx0L2csIG9wdGlvbnMudGFiUmVwbGFjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRDbGFzc05hbWUocHJldkNsYXNzTmFtZSwgY3VycmVudExhbmcsIHJlc3VsdExhbmcpIHtcbiAgICB2YXIgbGFuZ3VhZ2UgPSBjdXJyZW50TGFuZyA/IGFsaWFzZXNbY3VycmVudExhbmddIDogcmVzdWx0TGFuZyxcbiAgICAgICAgcmVzdWx0ICAgPSBbcHJldkNsYXNzTmFtZS50cmltKCldO1xuXG4gICAgaWYgKCFwcmV2Q2xhc3NOYW1lLm1hdGNoKC9cXGJobGpzXFxiLykpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdobGpzJyk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZDbGFzc05hbWUuaW5kZXhPZihsYW5ndWFnZSkgPT09IC0xKSB7XG4gICAgICByZXN1bHQucHVzaChsYW5ndWFnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcgJykudHJpbSgpO1xuICB9XG5cbiAgLypcbiAgQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYSBET00gbm9kZSBjb250YWluaW5nIGNvZGUuIEFjY2VwdHMgYSBET00gbm9kZSBhbmRcbiAgdHdvIG9wdGlvbmFsIHBhcmFtZXRlcnMgZm9yIGZpeE1hcmt1cC5cbiAgKi9cbiAgZnVuY3Rpb24gaGlnaGxpZ2h0QmxvY2soYmxvY2spIHtcbiAgICB2YXIgbm9kZSwgb3JpZ2luYWxTdHJlYW0sIHJlc3VsdCwgcmVzdWx0Tm9kZSwgdGV4dDtcbiAgICB2YXIgbGFuZ3VhZ2UgPSBibG9ja0xhbmd1YWdlKGJsb2NrKTtcblxuICAgIGlmIChpc05vdEhpZ2hsaWdodGVkKGxhbmd1YWdlKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKG9wdGlvbnMudXNlQlIpIHtcbiAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnZGl2Jyk7XG4gICAgICBub2RlLmlubmVySFRNTCA9IGJsb2NrLmlubmVySFRNTC5yZXBsYWNlKC9cXG4vZywgJycpLnJlcGxhY2UoLzxiclsgXFwvXSo+L2csICdcXG4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IGJsb2NrO1xuICAgIH1cbiAgICB0ZXh0ID0gbm9kZS50ZXh0Q29udGVudDtcbiAgICByZXN1bHQgPSBsYW5ndWFnZSA/IGhpZ2hsaWdodChsYW5ndWFnZSwgdGV4dCwgdHJ1ZSkgOiBoaWdobGlnaHRBdXRvKHRleHQpO1xuXG4gICAgb3JpZ2luYWxTdHJlYW0gPSBub2RlU3RyZWFtKG5vZGUpO1xuICAgIGlmIChvcmlnaW5hbFN0cmVhbS5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnZGl2Jyk7XG4gICAgICByZXN1bHROb2RlLmlubmVySFRNTCA9IHJlc3VsdC52YWx1ZTtcbiAgICAgIHJlc3VsdC52YWx1ZSA9IG1lcmdlU3RyZWFtcyhvcmlnaW5hbFN0cmVhbSwgbm9kZVN0cmVhbShyZXN1bHROb2RlKSwgdGV4dCk7XG4gICAgfVxuICAgIHJlc3VsdC52YWx1ZSA9IGZpeE1hcmt1cChyZXN1bHQudmFsdWUpO1xuXG4gICAgYmxvY2suaW5uZXJIVE1MID0gcmVzdWx0LnZhbHVlO1xuICAgIGJsb2NrLmNsYXNzTmFtZSA9IGJ1aWxkQ2xhc3NOYW1lKGJsb2NrLmNsYXNzTmFtZSwgbGFuZ3VhZ2UsIHJlc3VsdC5sYW5ndWFnZSk7XG4gICAgYmxvY2sucmVzdWx0ID0ge1xuICAgICAgbGFuZ3VhZ2U6IHJlc3VsdC5sYW5ndWFnZSxcbiAgICAgIHJlOiByZXN1bHQucmVsZXZhbmNlXG4gICAgfTtcbiAgICBpZiAocmVzdWx0LnNlY29uZF9iZXN0KSB7XG4gICAgICBibG9jay5zZWNvbmRfYmVzdCA9IHtcbiAgICAgICAgbGFuZ3VhZ2U6IHJlc3VsdC5zZWNvbmRfYmVzdC5sYW5ndWFnZSxcbiAgICAgICAgcmU6IHJlc3VsdC5zZWNvbmRfYmVzdC5yZWxldmFuY2VcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLypcbiAgVXBkYXRlcyBoaWdobGlnaHQuanMgZ2xvYmFsIG9wdGlvbnMgd2l0aCB2YWx1ZXMgcGFzc2VkIGluIHRoZSBmb3JtIG9mIGFuIG9iamVjdC5cbiAgKi9cbiAgZnVuY3Rpb24gY29uZmlndXJlKHVzZXJfb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBpbmhlcml0KG9wdGlvbnMsIHVzZXJfb3B0aW9ucyk7XG4gIH1cblxuICAvKlxuICBBcHBsaWVzIGhpZ2hsaWdodGluZyB0byBhbGwgPHByZT48Y29kZT4uLjwvY29kZT48L3ByZT4gYmxvY2tzIG9uIGEgcGFnZS5cbiAgKi9cbiAgZnVuY3Rpb24gaW5pdEhpZ2hsaWdodGluZygpIHtcbiAgICBpZiAoaW5pdEhpZ2hsaWdodGluZy5jYWxsZWQpXG4gICAgICByZXR1cm47XG4gICAgaW5pdEhpZ2hsaWdodGluZy5jYWxsZWQgPSB0cnVlO1xuXG4gICAgdmFyIGJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZSBjb2RlJyk7XG4gICAgQXJyYXlQcm90by5mb3JFYWNoLmNhbGwoYmxvY2tzLCBoaWdobGlnaHRCbG9jayk7XG4gIH1cblxuICAvKlxuICBBdHRhY2hlcyBoaWdobGlnaHRpbmcgdG8gdGhlIHBhZ2UgbG9hZCBldmVudC5cbiAgKi9cbiAgZnVuY3Rpb24gaW5pdEhpZ2hsaWdodGluZ09uTG9hZCgpIHtcbiAgICBhZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdEhpZ2hsaWdodGluZywgZmFsc2UpO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBpbml0SGlnaGxpZ2h0aW5nLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3Rlckxhbmd1YWdlKG5hbWUsIGxhbmd1YWdlKSB7XG4gICAgdmFyIGxhbmcgPSBsYW5ndWFnZXNbbmFtZV0gPSBsYW5ndWFnZShobGpzKTtcbiAgICByZXN0b3JlTGFuZ3VhZ2VBcGkobGFuZyk7XG4gICAgaWYgKGxhbmcuYWxpYXNlcykge1xuICAgICAgbGFuZy5hbGlhc2VzLmZvckVhY2goZnVuY3Rpb24oYWxpYXMpIHthbGlhc2VzW2FsaWFzXSA9IG5hbWU7fSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdExhbmd1YWdlcygpIHtcbiAgICByZXR1cm4gb2JqZWN0S2V5cyhsYW5ndWFnZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2UobmFtZSkge1xuICAgIG5hbWUgPSAobmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbGFuZ3VhZ2VzW25hbWVdIHx8IGxhbmd1YWdlc1thbGlhc2VzW25hbWVdXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF1dG9EZXRlY3Rpb24obmFtZSkge1xuICAgIHZhciBsYW5nID0gZ2V0TGFuZ3VhZ2UobmFtZSk7XG4gICAgcmV0dXJuIGxhbmcgJiYgIWxhbmcuZGlzYWJsZUF1dG9kZXRlY3Q7XG4gIH1cblxuICAvKiBJbnRlcmZhY2UgZGVmaW5pdGlvbiAqL1xuXG4gIGhsanMuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuICBobGpzLmhpZ2hsaWdodEF1dG8gPSBoaWdobGlnaHRBdXRvO1xuICBobGpzLmZpeE1hcmt1cCA9IGZpeE1hcmt1cDtcbiAgaGxqcy5oaWdobGlnaHRCbG9jayA9IGhpZ2hsaWdodEJsb2NrO1xuICBobGpzLmNvbmZpZ3VyZSA9IGNvbmZpZ3VyZTtcbiAgaGxqcy5pbml0SGlnaGxpZ2h0aW5nID0gaW5pdEhpZ2hsaWdodGluZztcbiAgaGxqcy5pbml0SGlnaGxpZ2h0aW5nT25Mb2FkID0gaW5pdEhpZ2hsaWdodGluZ09uTG9hZDtcbiAgaGxqcy5yZWdpc3Rlckxhbmd1YWdlID0gcmVnaXN0ZXJMYW5ndWFnZTtcbiAgaGxqcy5saXN0TGFuZ3VhZ2VzID0gbGlzdExhbmd1YWdlcztcbiAgaGxqcy5nZXRMYW5ndWFnZSA9IGdldExhbmd1YWdlO1xuICBobGpzLmF1dG9EZXRlY3Rpb24gPSBhdXRvRGV0ZWN0aW9uO1xuICBobGpzLmluaGVyaXQgPSBpbmhlcml0O1xuXG4gIC8vIENvbW1vbiByZWdleHBzXG4gIGhsanMuSURFTlRfUkUgPSAnW2EtekEtWl1cXFxcdyonO1xuICBobGpzLlVOREVSU0NPUkVfSURFTlRfUkUgPSAnW2EtekEtWl9dXFxcXHcqJztcbiAgaGxqcy5OVU1CRVJfUkUgPSAnXFxcXGJcXFxcZCsoXFxcXC5cXFxcZCspPyc7XG4gIGhsanMuQ19OVU1CRVJfUkUgPSAnKC0/KShcXFxcYjBbeFhdW2EtZkEtRjAtOV0rfChcXFxcYlxcXFxkKyhcXFxcLlxcXFxkKik/fFxcXFwuXFxcXGQrKShbZUVdWy0rXT9cXFxcZCspPyknOyAvLyAweC4uLiwgMC4uLiwgZGVjaW1hbCwgZmxvYXRcbiAgaGxqcy5CSU5BUllfTlVNQkVSX1JFID0gJ1xcXFxiKDBiWzAxXSspJzsgLy8gMGIuLi5cbiAgaGxqcy5SRV9TVEFSVEVSU19SRSA9ICchfCE9fCE9PXwlfCU9fCZ8JiZ8Jj18XFxcXCp8XFxcXCo9fFxcXFwrfFxcXFwrPXwsfC18LT18Lz18L3w6fDt8PDx8PDw9fDw9fDx8PT09fD09fD18Pj4+PXw+Pj18Pj18Pj4+fD4+fD58XFxcXD98XFxcXFt8XFxcXHt8XFxcXCh8XFxcXF58XFxcXF49fFxcXFx8fFxcXFx8PXxcXFxcfFxcXFx8fH4nO1xuXG4gIC8vIENvbW1vbiBtb2Rlc1xuICBobGpzLkJBQ0tTTEFTSF9FU0NBUEUgPSB7XG4gICAgYmVnaW46ICdcXFxcXFxcXFtcXFxcc1xcXFxTXScsIHJlbGV2YW5jZTogMFxuICB9O1xuICBobGpzLkFQT1NfU1RSSU5HX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogJ1xcJycsIGVuZDogJ1xcJycsXG4gICAgaWxsZWdhbDogJ1xcXFxuJyxcbiAgICBjb250YWluczogW2hsanMuQkFDS1NMQVNIX0VTQ0FQRV1cbiAgfTtcbiAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAnXCInLCBlbmQ6ICdcIicsXG4gICAgaWxsZWdhbDogJ1xcXFxuJyxcbiAgICBjb250YWluczogW2hsanMuQkFDS1NMQVNIX0VTQ0FQRV1cbiAgfTtcbiAgaGxqcy5QSFJBU0FMX1dPUkRTX01PREUgPSB7XG4gICAgYmVnaW46IC9cXGIoYXxhbnx0aGV8YXJlfEknbXxpc24ndHxkb24ndHxkb2Vzbid0fHdvbid0fGJ1dHxqdXN0fHNob3VsZHxwcmV0dHl8c2ltcGx5fGVub3VnaHxnb25uYXxnb2luZ3x3dGZ8c298c3VjaHx3aWxsfHlvdXx5b3VyfHRoZXl8bGlrZXxtb3JlKVxcYi9cbiAgfTtcbiAgaGxqcy5DT01NRU5UID0gZnVuY3Rpb24gKGJlZ2luLCBlbmQsIGluaGVyaXRzKSB7XG4gICAgdmFyIG1vZGUgPSBobGpzLmluaGVyaXQoXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2NvbW1lbnQnLFxuICAgICAgICBiZWdpbjogYmVnaW4sIGVuZDogZW5kLFxuICAgICAgICBjb250YWluczogW11cbiAgICAgIH0sXG4gICAgICBpbmhlcml0cyB8fCB7fVxuICAgICk7XG4gICAgbW9kZS5jb250YWlucy5wdXNoKGhsanMuUEhSQVNBTF9XT1JEU19NT0RFKTtcbiAgICBtb2RlLmNvbnRhaW5zLnB1c2goe1xuICAgICAgY2xhc3NOYW1lOiAnZG9jdGFnJyxcbiAgICAgIGJlZ2luOiAnKD86VE9ET3xGSVhNRXxOT1RFfEJVR3xYWFgpOicsXG4gICAgICByZWxldmFuY2U6IDBcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kZTtcbiAgfTtcbiAgaGxqcy5DX0xJTkVfQ09NTUVOVF9NT0RFID0gaGxqcy5DT01NRU5UKCcvLycsICckJyk7XG4gIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUgPSBobGpzLkNPTU1FTlQoJy9cXFxcKicsICdcXFxcKi8nKTtcbiAgaGxqcy5IQVNIX0NPTU1FTlRfTU9ERSA9IGhsanMuQ09NTUVOVCgnIycsICckJyk7XG4gIGhsanMuTlVNQkVSX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAnbnVtYmVyJyxcbiAgICBiZWdpbjogaGxqcy5OVU1CRVJfUkUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuQ19OVU1CRVJfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIGJlZ2luOiBobGpzLkNfTlVNQkVSX1JFLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuICBobGpzLkJJTkFSWV9OVU1CRVJfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIGJlZ2luOiBobGpzLkJJTkFSWV9OVU1CRVJfUkUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuQ1NTX05VTUJFUl9NT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ251bWJlcicsXG4gICAgYmVnaW46IGhsanMuTlVNQkVSX1JFICsgJygnICtcbiAgICAgICclfGVtfGV4fGNofHJlbScgICtcbiAgICAgICd8dnd8dmh8dm1pbnx2bWF4JyArXG4gICAgICAnfGNtfG1tfGlufHB0fHBjfHB4JyArXG4gICAgICAnfGRlZ3xncmFkfHJhZHx0dXJuJyArXG4gICAgICAnfHN8bXMnICtcbiAgICAgICd8SHp8a0h6JyArXG4gICAgICAnfGRwaXxkcGNtfGRwcHgnICtcbiAgICAgICcpPycsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuUkVHRVhQX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAncmVnZXhwJyxcbiAgICBiZWdpbjogL1xcLy8sIGVuZDogL1xcL1tnaW11eV0qLyxcbiAgICBpbGxlZ2FsOiAvXFxuLyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgICAge1xuICAgICAgICBiZWdpbjogL1xcWy8sIGVuZDogL1xcXS8sXG4gICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgY29udGFpbnM6IFtobGpzLkJBQ0tTTEFTSF9FU0NBUEVdXG4gICAgICB9XG4gICAgXVxuICB9O1xuICBobGpzLlRJVExFX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAndGl0bGUnLFxuICAgIGJlZ2luOiBobGpzLklERU5UX1JFLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuICBobGpzLlVOREVSU0NPUkVfVElUTEVfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICd0aXRsZScsXG4gICAgYmVnaW46IGhsanMuVU5ERVJTQ09SRV9JREVOVF9SRSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcbiAgaGxqcy5NRVRIT0RfR1VBUkQgPSB7XG4gICAgLy8gZXhjbHVkZXMgbWV0aG9kIG5hbWVzIGZyb20ga2V5d29yZCBwcm9jZXNzaW5nXG4gICAgYmVnaW46ICdcXFxcLlxcXFxzKicgKyBobGpzLlVOREVSU0NPUkVfSURFTlRfUkUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG5cbiAgcmV0dXJuIGhsanM7XG59KSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhsanMpIHtcbiAgdmFyIElERU5UX1JFID0gJ1tBLVphLXokX11bMC05QS1aYS16JF9dKic7XG4gIHZhciBLRVlXT1JEUyA9IHtcbiAgICBrZXl3b3JkOlxuICAgICAgJ2luIG9mIGlmIGZvciB3aGlsZSBmaW5hbGx5IHZhciBuZXcgZnVuY3Rpb24gZG8gcmV0dXJuIHZvaWQgZWxzZSBicmVhayBjYXRjaCAnICtcbiAgICAgICdpbnN0YW5jZW9mIHdpdGggdGhyb3cgY2FzZSBkZWZhdWx0IHRyeSB0aGlzIHN3aXRjaCBjb250aW51ZSB0eXBlb2YgZGVsZXRlICcgK1xuICAgICAgJ2xldCB5aWVsZCBjb25zdCBleHBvcnQgc3VwZXIgZGVidWdnZXIgYXMgYXN5bmMgYXdhaXQgc3RhdGljICcgK1xuICAgICAgLy8gRUNNQVNjcmlwdCA2IG1vZHVsZXMgaW1wb3J0XG4gICAgICAnaW1wb3J0IGZyb20gYXMnXG4gICAgLFxuICAgIGxpdGVyYWw6XG4gICAgICAndHJ1ZSBmYWxzZSBudWxsIHVuZGVmaW5lZCBOYU4gSW5maW5pdHknLFxuICAgIGJ1aWx0X2luOlxuICAgICAgJ2V2YWwgaXNGaW5pdGUgaXNOYU4gcGFyc2VGbG9hdCBwYXJzZUludCBkZWNvZGVVUkkgZGVjb2RlVVJJQ29tcG9uZW50ICcgK1xuICAgICAgJ2VuY29kZVVSSSBlbmNvZGVVUklDb21wb25lbnQgZXNjYXBlIHVuZXNjYXBlIE9iamVjdCBGdW5jdGlvbiBCb29sZWFuIEVycm9yICcgK1xuICAgICAgJ0V2YWxFcnJvciBJbnRlcm5hbEVycm9yIFJhbmdlRXJyb3IgUmVmZXJlbmNlRXJyb3IgU3RvcEl0ZXJhdGlvbiBTeW50YXhFcnJvciAnICtcbiAgICAgICdUeXBlRXJyb3IgVVJJRXJyb3IgTnVtYmVyIE1hdGggRGF0ZSBTdHJpbmcgUmVnRXhwIEFycmF5IEZsb2F0MzJBcnJheSAnICtcbiAgICAgICdGbG9hdDY0QXJyYXkgSW50MTZBcnJheSBJbnQzMkFycmF5IEludDhBcnJheSBVaW50MTZBcnJheSBVaW50MzJBcnJheSAnICtcbiAgICAgICdVaW50OEFycmF5IFVpbnQ4Q2xhbXBlZEFycmF5IEFycmF5QnVmZmVyIERhdGFWaWV3IEpTT04gSW50bCBhcmd1bWVudHMgcmVxdWlyZSAnICtcbiAgICAgICdtb2R1bGUgY29uc29sZSB3aW5kb3cgZG9jdW1lbnQgU3ltYm9sIFNldCBNYXAgV2Vha1NldCBXZWFrTWFwIFByb3h5IFJlZmxlY3QgJyArXG4gICAgICAnUHJvbWlzZSdcbiAgfTtcbiAgdmFyIE5VTUJFUiA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICB7IGJlZ2luOiAnXFxcXGIoMFtiQl1bMDFdKyknIH0sXG4gICAgICB7IGJlZ2luOiAnXFxcXGIoMFtvT11bMC03XSspJyB9LFxuICAgICAgeyBiZWdpbjogaGxqcy5DX05VTUJFUl9SRSB9XG4gICAgXSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcbiAgdmFyIFNVQlNUID0ge1xuICAgIGNsYXNzTmFtZTogJ3N1YnN0JyxcbiAgICBiZWdpbjogJ1xcXFwkXFxcXHsnLCBlbmQ6ICdcXFxcfScsXG4gICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgIGNvbnRhaW5zOiBbXSAgLy8gZGVmaW5lZCBsYXRlclxuICB9O1xuICB2YXIgSFRNTF9URU1QTEFURSA9IHtcbiAgICBiZWdpbjogJ2h0bWxgJywgZW5kOiAnJyxcbiAgICBzdGFydHM6IHtcbiAgICAgIGVuZDogJ2AnLCByZXR1cm5FbmQ6IGZhbHNlLFxuICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgICAgICBTVUJTVFxuICAgICAgXSxcbiAgICAgIHN1Ykxhbmd1YWdlOiAneG1sJyxcbiAgICB9XG4gIH07XG4gIHZhciBDU1NfVEVNUExBVEUgPSB7XG4gICAgYmVnaW46ICdjc3NgJywgZW5kOiAnJyxcbiAgICBzdGFydHM6IHtcbiAgICAgIGVuZDogJ2AnLCByZXR1cm5FbmQ6IGZhbHNlLFxuICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgICAgICBTVUJTVFxuICAgICAgXSxcbiAgICAgIHN1Ykxhbmd1YWdlOiAnY3NzJyxcbiAgICB9XG4gIH07XG4gIHZhciBURU1QTEFURV9TVFJJTkcgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogJ2AnLCBlbmQ6ICdgJyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgICAgU1VCU1RcbiAgICBdXG4gIH07XG4gIFNVQlNULmNvbnRhaW5zID0gW1xuICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgIEhUTUxfVEVNUExBVEUsXG4gICAgQ1NTX1RFTVBMQVRFLFxuICAgIFRFTVBMQVRFX1NUUklORyxcbiAgICBOVU1CRVIsXG4gICAgaGxqcy5SRUdFWFBfTU9ERVxuICBdO1xuICB2YXIgUEFSQU1TX0NPTlRBSU5TID0gU1VCU1QuY29udGFpbnMuY29uY2F0KFtcbiAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERVxuICBdKTtcblxuICByZXR1cm4ge1xuICAgIGFsaWFzZXM6IFsnanMnLCAnanN4J10sXG4gICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ21ldGEnLFxuICAgICAgICByZWxldmFuY2U6IDEwLFxuICAgICAgICBiZWdpbjogL15cXHMqWydcIl11c2UgKHN0cmljdHxhc20pWydcIl0vXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdtZXRhJyxcbiAgICAgICAgYmVnaW46IC9eIyEvLCBlbmQ6IC8kL1xuICAgICAgfSxcbiAgICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICBIVE1MX1RFTVBMQVRFLFxuICAgICAgQ1NTX1RFTVBMQVRFLFxuICAgICAgVEVNUExBVEVfU1RSSU5HLFxuICAgICAgaGxqcy5DX0xJTkVfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERSxcbiAgICAgIE5VTUJFUixcbiAgICAgIHsgLy8gb2JqZWN0IGF0dHIgY29udGFpbmVyXG4gICAgICAgIGJlZ2luOiAvW3ssXVxccyovLCByZWxldmFuY2U6IDAsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgYmVnaW46IElERU5UX1JFICsgJ1xcXFxzKjonLCByZXR1cm5CZWdpbjogdHJ1ZSxcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgICAgIGNvbnRhaW5zOiBbe2NsYXNzTmFtZTogJ2F0dHInLCBiZWdpbjogSURFTlRfUkUsIHJlbGV2YW5jZTogMH1dXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgeyAvLyBcInZhbHVlXCIgY29udGFpbmVyXG4gICAgICAgIGJlZ2luOiAnKCcgKyBobGpzLlJFX1NUQVJURVJTX1JFICsgJ3xcXFxcYihjYXNlfHJldHVybnx0aHJvdylcXFxcYilcXFxccyonLFxuICAgICAgICBrZXl3b3JkczogJ3JldHVybiB0aHJvdyBjYXNlJyxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERSxcbiAgICAgICAgICBobGpzLlJFR0VYUF9NT0RFLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgIGJlZ2luOiAnKFxcXFwoLio/XFxcXCl8JyArIElERU5UX1JFICsgJylcXFxccyo9PicsIHJldHVybkJlZ2luOiB0cnVlLFxuICAgICAgICAgICAgZW5kOiAnXFxcXHMqPT4nLFxuICAgICAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3BhcmFtcycsXG4gICAgICAgICAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IElERU5UX1JFXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbjogL1xcKFxccypcXCkvLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IC9cXCgvLCBlbmQ6IC9cXCkvLFxuICAgICAgICAgICAgICAgICAgICBleGNsdWRlQmVnaW46IHRydWUsIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGtleXdvcmRzOiBLRVlXT1JEUyxcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbnM6IFBBUkFNU19DT05UQUlOU1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgICAgICAgIGJlZ2luOiAvXFxzLyxcbiAgICAgICAgICAgIGVuZDogL1xccyovLFxuICAgICAgICAgICAgc2tpcDogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgLy8gRTRYIC8gSlNYXG4gICAgICAgICAgICBiZWdpbjogLzwvLCBlbmQ6IC8oXFwvW0EtWmEtejAtOVxcXFwuXzotXSt8W0EtWmEtejAtOVxcXFwuXzotXStcXC8pPi8sXG4gICAgICAgICAgICBzdWJMYW5ndWFnZTogJ3htbCcsXG4gICAgICAgICAgICBjb250YWluczogW1xuICAgICAgICAgICAgICB7IGJlZ2luOiAvPFtBLVphLXowLTlcXFxcLl86LV0rXFxzKlxcLz4vLCBza2lwOiB0cnVlIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBiZWdpbjogLzxbQS1aYS16MC05XFxcXC5fOi1dKy8sIGVuZDogLyhcXC9bQS1aYS16MC05XFxcXC5fOi1dK3xbQS1aYS16MC05XFxcXC5fOi1dK1xcLyk+Lywgc2tpcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb250YWluczogW1xuICAgICAgICAgICAgICAgICAgeyBiZWdpbjogLzxbQS1aYS16MC05XFxcXC5fOi1dK1xccypcXC8+Lywgc2tpcDogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgJ3NlbGYnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgYmVnaW5LZXl3b3JkczogJ2Z1bmN0aW9uJywgZW5kOiAvXFx7LywgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICBobGpzLmluaGVyaXQoaGxqcy5USVRMRV9NT0RFLCB7YmVnaW46IElERU5UX1JFfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAncGFyYW1zJyxcbiAgICAgICAgICAgIGJlZ2luOiAvXFwoLywgZW5kOiAvXFwpLyxcbiAgICAgICAgICAgIGV4Y2x1ZGVCZWdpbjogdHJ1ZSxcbiAgICAgICAgICAgIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgICAgICAgICBjb250YWluczogUEFSQU1TX0NPTlRBSU5TXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBpbGxlZ2FsOiAvXFxbfCUvXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogL1xcJFsoLl0vIC8vIHJlbGV2YW5jZSBib29zdGVyIGZvciBhIHBhdHRlcm4gY29tbW9uIHRvIEpTIGxpYnM6IGAkKHNvbWV0aGluZylgIGFuZCBgJC5zb21ldGhpbmdgXG4gICAgICB9LFxuICAgICAgaGxqcy5NRVRIT0RfR1VBUkQsXG4gICAgICB7IC8vIEVTNiBjbGFzc1xuICAgICAgICBjbGFzc05hbWU6ICdjbGFzcycsXG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICdjbGFzcycsIGVuZDogL1t7Oz1dLywgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgICAgaWxsZWdhbDogL1s6XCJcXFtcXF1dLyxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICB7YmVnaW5LZXl3b3JkczogJ2V4dGVuZHMnfSxcbiAgICAgICAgICBobGpzLlVOREVSU0NPUkVfVElUTEVfTU9ERVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbktleXdvcmRzOiAnY29uc3RydWN0b3IgZ2V0IHNldCcsIGVuZDogL1xcey8sIGV4Y2x1ZGVFbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIGlsbGVnYWw6IC8jKD8hISkvXG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaGxqcykge1xuICB2YXIgSURFTlRfUkUgPSAnW2EtekEtWi1dW2EtekEtWjAtOV8tXSonO1xuICB2YXIgVkFSSUFCTEUgPSB7XG4gICAgY2xhc3NOYW1lOiAndmFyaWFibGUnLFxuICAgIGJlZ2luOiAnKFxcXFwkJyArIElERU5UX1JFICsgJylcXFxcYidcbiAgfTtcbiAgdmFyIEhFWENPTE9SID0ge1xuICAgIGNsYXNzTmFtZTogJ251bWJlcicsIGJlZ2luOiAnI1swLTlBLUZhLWZdKydcbiAgfTtcbiAgdmFyIERFRl9JTlRFUk5BTFMgPSB7XG4gICAgY2xhc3NOYW1lOiAnYXR0cmlidXRlJyxcbiAgICBiZWdpbjogJ1tBLVpcXFxcX1xcXFwuXFxcXC1dKycsIGVuZDogJzonLFxuICAgIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgaWxsZWdhbDogJ1teXFxcXHNdJyxcbiAgICBzdGFydHM6IHtcbiAgICAgIGVuZHNXaXRoUGFyZW50OiB0cnVlLCBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgSEVYQ09MT1IsXG4gICAgICAgIGhsanMuQ1NTX05VTUJFUl9NT0RFLFxuICAgICAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgICAgICBobGpzLkFQT1NfU1RSSU5HX01PREUsXG4gICAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdtZXRhJywgYmVnaW46ICchaW1wb3J0YW50J1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGNhc2VfaW5zZW5zaXRpdmU6IHRydWUsXG4gICAgaWxsZWdhbDogJ1s9L3xcXCddJyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5DX0xJTkVfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnc2VsZWN0b3ItaWQnLCBiZWdpbjogJ1xcXFwjW0EtWmEtejAtOV8tXSsnLFxuICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3NlbGVjdG9yLWNsYXNzJywgYmVnaW46ICdcXFxcLltBLVphLXowLTlfLV0rJyxcbiAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3Rvci1hdHRyJywgYmVnaW46ICdcXFxcWycsIGVuZDogJ1xcXFxdJyxcbiAgICAgICAgaWxsZWdhbDogJyQnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3Rvci10YWcnLCAvLyBiZWdpbjogSURFTlRfUkUsIGVuZDogJ1ssfFxcXFxzXSdcbiAgICAgICAgYmVnaW46ICdcXFxcYihhfGFiYnJ8YWNyb255bXxhZGRyZXNzfGFyZWF8YXJ0aWNsZXxhc2lkZXxhdWRpb3xifGJhc2V8YmlnfGJsb2NrcXVvdGV8Ym9keXxicnxidXR0b258Y2FudmFzfGNhcHRpb258Y2l0ZXxjb2RlfGNvbHxjb2xncm91cHxjb21tYW5kfGRhdGFsaXN0fGRkfGRlbHxkZXRhaWxzfGRmbnxkaXZ8ZGx8ZHR8ZW18ZW1iZWR8ZmllbGRzZXR8ZmlnY2FwdGlvbnxmaWd1cmV8Zm9vdGVyfGZvcm18ZnJhbWV8ZnJhbWVzZXR8KGhbMS02XSl8aGVhZHxoZWFkZXJ8aGdyb3VwfGhyfGh0bWx8aXxpZnJhbWV8aW1nfGlucHV0fGluc3xrYmR8a2V5Z2VufGxhYmVsfGxlZ2VuZHxsaXxsaW5rfG1hcHxtYXJrfG1ldGF8bWV0ZXJ8bmF2fG5vZnJhbWVzfG5vc2NyaXB0fG9iamVjdHxvbHxvcHRncm91cHxvcHRpb258b3V0cHV0fHB8cGFyYW18cHJlfHByb2dyZXNzfHF8cnB8cnR8cnVieXxzYW1wfHNjcmlwdHxzZWN0aW9ufHNlbGVjdHxzbWFsbHxzcGFufHN0cmlrZXxzdHJvbmd8c3R5bGV8c3VifHN1cHx0YWJsZXx0Ym9keXx0ZHx0ZXh0YXJlYXx0Zm9vdHx0aHx0aGVhZHx0aW1lfHRpdGxlfHRyfHR0fHVsfHZhcnx2aWRlbylcXFxcYicsXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICc6KHZpc2l0ZWR8dmFsaWR8cm9vdHxyaWdodHxyZXF1aXJlZHxyZWFkLXdyaXRlfHJlYWQtb25seXxvdXQtcmFuZ2V8b3B0aW9uYWx8b25seS1vZi10eXBlfG9ubHktY2hpbGR8bnRoLW9mLXR5cGV8bnRoLWxhc3Qtb2YtdHlwZXxudGgtbGFzdC1jaGlsZHxudGgtY2hpbGR8bm90fGxpbmt8bGVmdHxsYXN0LW9mLXR5cGV8bGFzdC1jaGlsZHxsYW5nfGludmFsaWR8aW5kZXRlcm1pbmF0ZXxpbi1yYW5nZXxob3Zlcnxmb2N1c3xmaXJzdC1vZi10eXBlfGZpcnN0LWxpbmV8Zmlyc3QtbGV0dGVyfGZpcnN0LWNoaWxkfGZpcnN0fGVuYWJsZWR8ZW1wdHl8ZGlzYWJsZWR8ZGVmYXVsdHxjaGVja2VkfGJlZm9yZXxhZnRlcnxhY3RpdmUpJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICc6OihhZnRlcnxiZWZvcmV8Y2hvaWNlc3xmaXJzdC1sZXR0ZXJ8Zmlyc3QtbGluZXxyZXBlYXQtaW5kZXh8cmVwZWF0LWl0ZW18c2VsZWN0aW9ufHZhbHVlKSdcbiAgICAgIH0sXG4gICAgICBWQVJJQUJMRSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnYXR0cmlidXRlJyxcbiAgICAgICAgYmVnaW46ICdcXFxcYih6LWluZGV4fHdvcmQtd3JhcHx3b3JkLXNwYWNpbmd8d29yZC1icmVha3x3aWR0aHx3aWRvd3N8d2hpdGUtc3BhY2V8dmlzaWJpbGl0eXx2ZXJ0aWNhbC1hbGlnbnx1bmljb2RlLWJpZGl8dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb258dHJhbnNpdGlvbi1wcm9wZXJ0eXx0cmFuc2l0aW9uLWR1cmF0aW9ufHRyYW5zaXRpb24tZGVsYXl8dHJhbnNpdGlvbnx0cmFuc2Zvcm0tc3R5bGV8dHJhbnNmb3JtLW9yaWdpbnx0cmFuc2Zvcm18dG9wfHRleHQtdW5kZXJsaW5lLXBvc2l0aW9ufHRleHQtdHJhbnNmb3JtfHRleHQtc2hhZG93fHRleHQtcmVuZGVyaW5nfHRleHQtb3ZlcmZsb3d8dGV4dC1pbmRlbnR8dGV4dC1kZWNvcmF0aW9uLXN0eWxlfHRleHQtZGVjb3JhdGlvbi1saW5lfHRleHQtZGVjb3JhdGlvbi1jb2xvcnx0ZXh0LWRlY29yYXRpb258dGV4dC1hbGlnbi1sYXN0fHRleHQtYWxpZ258dGFiLXNpemV8dGFibGUtbGF5b3V0fHJpZ2h0fHJlc2l6ZXxxdW90ZXN8cG9zaXRpb258cG9pbnRlci1ldmVudHN8cGVyc3BlY3RpdmUtb3JpZ2lufHBlcnNwZWN0aXZlfHBhZ2UtYnJlYWstaW5zaWRlfHBhZ2UtYnJlYWstYmVmb3JlfHBhZ2UtYnJlYWstYWZ0ZXJ8cGFkZGluZy10b3B8cGFkZGluZy1yaWdodHxwYWRkaW5nLWxlZnR8cGFkZGluZy1ib3R0b218cGFkZGluZ3xvdmVyZmxvdy15fG92ZXJmbG93LXh8b3ZlcmZsb3ctd3JhcHxvdmVyZmxvd3xvdXRsaW5lLXdpZHRofG91dGxpbmUtc3R5bGV8b3V0bGluZS1vZmZzZXR8b3V0bGluZS1jb2xvcnxvdXRsaW5lfG9ycGhhbnN8b3JkZXJ8b3BhY2l0eXxvYmplY3QtcG9zaXRpb258b2JqZWN0LWZpdHxub3JtYWx8bm9uZXxuYXYtdXB8bmF2LXJpZ2h0fG5hdi1sZWZ0fG5hdi1pbmRleHxuYXYtZG93bnxtaW4td2lkdGh8bWluLWhlaWdodHxtYXgtd2lkdGh8bWF4LWhlaWdodHxtYXNrfG1hcmtzfG1hcmdpbi10b3B8bWFyZ2luLXJpZ2h0fG1hcmdpbi1sZWZ0fG1hcmdpbi1ib3R0b218bWFyZ2lufGxpc3Qtc3R5bGUtdHlwZXxsaXN0LXN0eWxlLXBvc2l0aW9ufGxpc3Qtc3R5bGUtaW1hZ2V8bGlzdC1zdHlsZXxsaW5lLWhlaWdodHxsZXR0ZXItc3BhY2luZ3xsZWZ0fGp1c3RpZnktY29udGVudHxpbml0aWFsfGluaGVyaXR8aW1lLW1vZGV8aW1hZ2Utb3JpZW50YXRpb258aW1hZ2UtcmVzb2x1dGlvbnxpbWFnZS1yZW5kZXJpbmd8aWNvbnxoeXBoZW5zfGhlaWdodHxmb250LXdlaWdodHxmb250LXZhcmlhbnQtbGlnYXR1cmVzfGZvbnQtdmFyaWFudHxmb250LXN0eWxlfGZvbnQtc3RyZXRjaHxmb250LXNpemUtYWRqdXN0fGZvbnQtc2l6ZXxmb250LWxhbmd1YWdlLW92ZXJyaWRlfGZvbnQta2VybmluZ3xmb250LWZlYXR1cmUtc2V0dGluZ3N8Zm9udC1mYW1pbHl8Zm9udHxmbG9hdHxmbGV4LXdyYXB8ZmxleC1zaHJpbmt8ZmxleC1ncm93fGZsZXgtZmxvd3xmbGV4LWRpcmVjdGlvbnxmbGV4LWJhc2lzfGZsZXh8ZmlsdGVyfGVtcHR5LWNlbGxzfGRpc3BsYXl8ZGlyZWN0aW9ufGN1cnNvcnxjb3VudGVyLXJlc2V0fGNvdW50ZXItaW5jcmVtZW50fGNvbnRlbnR8Y29sdW1uLXdpZHRofGNvbHVtbi1zcGFufGNvbHVtbi1ydWxlLXdpZHRofGNvbHVtbi1ydWxlLXN0eWxlfGNvbHVtbi1ydWxlLWNvbG9yfGNvbHVtbi1ydWxlfGNvbHVtbi1nYXB8Y29sdW1uLWZpbGx8Y29sdW1uLWNvdW50fGNvbHVtbnN8Y29sb3J8Y2xpcC1wYXRofGNsaXB8Y2xlYXJ8Y2FwdGlvbi1zaWRlfGJyZWFrLWluc2lkZXxicmVhay1iZWZvcmV8YnJlYWstYWZ0ZXJ8Ym94LXNpemluZ3xib3gtc2hhZG93fGJveC1kZWNvcmF0aW9uLWJyZWFrfGJvdHRvbXxib3JkZXItd2lkdGh8Ym9yZGVyLXRvcC13aWR0aHxib3JkZXItdG9wLXN0eWxlfGJvcmRlci10b3AtcmlnaHQtcmFkaXVzfGJvcmRlci10b3AtbGVmdC1yYWRpdXN8Ym9yZGVyLXRvcC1jb2xvcnxib3JkZXItdG9wfGJvcmRlci1zdHlsZXxib3JkZXItc3BhY2luZ3xib3JkZXItcmlnaHQtd2lkdGh8Ym9yZGVyLXJpZ2h0LXN0eWxlfGJvcmRlci1yaWdodC1jb2xvcnxib3JkZXItcmlnaHR8Ym9yZGVyLXJhZGl1c3xib3JkZXItbGVmdC13aWR0aHxib3JkZXItbGVmdC1zdHlsZXxib3JkZXItbGVmdC1jb2xvcnxib3JkZXItbGVmdHxib3JkZXItaW1hZ2Utd2lkdGh8Ym9yZGVyLWltYWdlLXNvdXJjZXxib3JkZXItaW1hZ2Utc2xpY2V8Ym9yZGVyLWltYWdlLXJlcGVhdHxib3JkZXItaW1hZ2Utb3V0c2V0fGJvcmRlci1pbWFnZXxib3JkZXItY29sb3J8Ym9yZGVyLWNvbGxhcHNlfGJvcmRlci1ib3R0b20td2lkdGh8Ym9yZGVyLWJvdHRvbS1zdHlsZXxib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1c3xib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzfGJvcmRlci1ib3R0b20tY29sb3J8Ym9yZGVyLWJvdHRvbXxib3JkZXJ8YmFja2dyb3VuZC1zaXplfGJhY2tncm91bmQtcmVwZWF0fGJhY2tncm91bmQtcG9zaXRpb258YmFja2dyb3VuZC1vcmlnaW58YmFja2dyb3VuZC1pbWFnZXxiYWNrZ3JvdW5kLWNvbG9yfGJhY2tncm91bmQtY2xpcHxiYWNrZ3JvdW5kLWF0dGFjaG1lbnR8YmFja2dyb3VuZC1ibGVuZC1tb2RlfGJhY2tncm91bmR8YmFja2ZhY2UtdmlzaWJpbGl0eXxhdXRvfGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb258YW5pbWF0aW9uLXBsYXktc3RhdGV8YW5pbWF0aW9uLW5hbWV8YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudHxhbmltYXRpb24tZmlsbC1tb2RlfGFuaW1hdGlvbi1kdXJhdGlvbnxhbmltYXRpb24tZGlyZWN0aW9ufGFuaW1hdGlvbi1kZWxheXxhbmltYXRpb258YWxpZ24tc2VsZnxhbGlnbi1pdGVtc3xhbGlnbi1jb250ZW50KVxcXFxiJyxcbiAgICAgICAgaWxsZWdhbDogJ1teXFxcXHNdJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICdcXFxcYih3aGl0ZXNwYWNlfHdhaXR8dy1yZXNpemV8dmlzaWJsZXx2ZXJ0aWNhbC10ZXh0fHZlcnRpY2FsLWlkZW9ncmFwaGljfHVwcGVyY2FzZXx1cHBlci1yb21hbnx1cHBlci1hbHBoYXx1bmRlcmxpbmV8dHJhbnNwYXJlbnR8dG9wfHRoaW58dGhpY2t8dGV4dHx0ZXh0LXRvcHx0ZXh0LWJvdHRvbXx0Yi1ybHx0YWJsZS1oZWFkZXItZ3JvdXB8dGFibGUtZm9vdGVyLWdyb3VwfHN3LXJlc2l6ZXxzdXBlcnxzdHJpY3R8c3RhdGljfHNxdWFyZXxzb2xpZHxzbWFsbC1jYXBzfHNlcGFyYXRlfHNlLXJlc2l6ZXxzY3JvbGx8cy1yZXNpemV8cnRsfHJvdy1yZXNpemV8cmlkZ2V8cmlnaHR8cmVwZWF0fHJlcGVhdC15fHJlcGVhdC14fHJlbGF0aXZlfHByb2dyZXNzfHBvaW50ZXJ8b3ZlcmxpbmV8b3V0c2lkZXxvdXRzZXR8b2JsaXF1ZXxub3dyYXB8bm90LWFsbG93ZWR8bm9ybWFsfG5vbmV8bnctcmVzaXplfG5vLXJlcGVhdHxuby1kcm9wfG5ld3NwYXBlcnxuZS1yZXNpemV8bi1yZXNpemV8bW92ZXxtaWRkbGV8bWVkaXVtfGx0cnxsci10Ynxsb3dlcmNhc2V8bG93ZXItcm9tYW58bG93ZXItYWxwaGF8bG9vc2V8bGlzdC1pdGVtfGxpbmV8bGluZS10aHJvdWdofGxpbmUtZWRnZXxsaWdodGVyfGxlZnR8a2VlcC1hbGx8anVzdGlmeXxpdGFsaWN8aW50ZXItd29yZHxpbnRlci1pZGVvZ3JhcGh8aW5zaWRlfGluc2V0fGlubGluZXxpbmxpbmUtYmxvY2t8aW5oZXJpdHxpbmFjdGl2ZXxpZGVvZ3JhcGgtc3BhY2V8aWRlb2dyYXBoLXBhcmVudGhlc2lzfGlkZW9ncmFwaC1udW1lcmljfGlkZW9ncmFwaC1hbHBoYXxob3Jpem9udGFsfGhpZGRlbnxoZWxwfGhhbmR8Z3Jvb3ZlfGZpeGVkfGVsbGlwc2lzfGUtcmVzaXplfGRvdWJsZXxkb3R0ZWR8ZGlzdHJpYnV0ZXxkaXN0cmlidXRlLXNwYWNlfGRpc3RyaWJ1dGUtbGV0dGVyfGRpc3RyaWJ1dGUtYWxsLWxpbmVzfGRpc2N8ZGlzYWJsZWR8ZGVmYXVsdHxkZWNpbWFsfGRhc2hlZHxjcm9zc2hhaXJ8Y29sbGFwc2V8Y29sLXJlc2l6ZXxjaXJjbGV8Y2hhcnxjZW50ZXJ8Y2FwaXRhbGl6ZXxicmVhay13b3JkfGJyZWFrLWFsbHxib3R0b218Ym90aHxib2xkZXJ8Ym9sZHxibG9ja3xiaWRpLW92ZXJyaWRlfGJlbG93fGJhc2VsaW5lfGF1dG98YWx3YXlzfGFsbC1zY3JvbGx8YWJzb2x1dGV8dGFibGV8dGFibGUtY2VsbClcXFxcYidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAnOicsIGVuZDogJzsnLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIFZBUklBQkxFLFxuICAgICAgICAgIEhFWENPTE9SLFxuICAgICAgICAgIGhsanMuQ1NTX05VTUJFUl9NT0RFLFxuICAgICAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICAgICAgaGxqcy5BUE9TX1NUUklOR19NT0RFLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ21ldGEnLCBiZWdpbjogJyFpbXBvcnRhbnQnXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogJ0AnLCBlbmQ6ICdbeztdJyxcbiAgICAgICAga2V5d29yZHM6ICdtaXhpbiBpbmNsdWRlIGV4dGVuZCBmb3IgaWYgZWxzZSBlYWNoIHdoaWxlIGNoYXJzZXQgaW1wb3J0IGRlYnVnIG1lZGlhIHBhZ2UgY29udGVudCBmb250LWZhY2UgbmFtZXNwYWNlIHdhcm4nLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIFZBUklBQkxFLFxuICAgICAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICAgICAgaGxqcy5BUE9TX1NUUklOR19NT0RFLFxuICAgICAgICAgIEhFWENPTE9SLFxuICAgICAgICAgIGhsanMuQ1NTX05VTUJFUl9NT0RFLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiAnXFxcXHNbQS1aYS16MC05Xy4tXSsnLFxuICAgICAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9O1xufTsiXSwic291cmNlUm9vdCI6IiJ9